// Generated from tsql.g4 by ANTLR 4.6.

package parser // tsql

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 1072, 54993, 33286, 44333, 17431, 44785, 36224, 43741, 3, 441, 3122,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 3, 2, 7, 2, 338,
	10, 2, 12, 2, 14, 2, 341, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 5, 3, 347, 10,
	3, 3, 4, 3, 4, 5, 4, 351, 10, 4, 6, 4, 353, 10, 4, 13, 4, 14, 4, 354, 3,
	5, 3, 5, 3, 5, 3, 5, 5, 5, 361, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 367,
	10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 384, 10, 7, 3, 8, 3, 8, 5, 8, 388, 10, 8,
	3, 8, 5, 8, 391, 10, 8, 3, 8, 3, 8, 5, 8, 395, 10, 8, 3, 8, 3, 8, 5, 8,
	399, 10, 8, 3, 8, 3, 8, 5, 8, 403, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 408,
	10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 413, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	5, 8, 420, 10, 8, 3, 8, 5, 8, 423, 10, 8, 3, 8, 3, 8, 5, 8, 427, 10, 8,
	3, 8, 5, 8, 430, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 438,
	10, 8, 3, 8, 5, 8, 441, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 446, 10, 8, 3, 8,
	5, 8, 449, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 454, 10, 8, 3, 8, 3, 8, 3, 8,
	5, 8, 459, 10, 8, 3, 8, 5, 8, 462, 10, 8, 3, 8, 3, 8, 3, 8, 5, 8, 467,
	10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 473, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 5, 8, 480, 10, 8, 3, 8, 3, 8, 5, 8, 484, 10, 8, 5, 8, 486, 10, 8,
	3, 8, 3, 8, 3, 8, 5, 8, 491, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 7, 8, 502, 10, 8, 12, 8, 14, 8, 505, 11, 8, 3, 8, 3,
	8, 5, 8, 509, 10, 8, 5, 8, 511, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 5, 9, 520, 10, 9, 3, 10, 5, 10, 523, 10, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 5, 10, 531, 10, 10, 5, 10, 533, 10, 10, 3, 10,
	5, 10, 536, 10, 10, 3, 10, 3, 10, 5, 10, 540, 10, 10, 3, 10, 5, 10, 543,
	10, 10, 3, 10, 3, 10, 5, 10, 547, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 5, 10, 554, 10, 10, 3, 10, 3, 10, 5, 10, 558, 10, 10, 5, 10, 560, 10,
	10, 5, 10, 562, 10, 10, 3, 10, 5, 10, 565, 10, 10, 3, 10, 5, 10, 568, 10,
	10, 3, 10, 5, 10, 571, 10, 10, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 577,
	10, 11, 3, 12, 5, 12, 580, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 5, 12, 588, 10, 12, 5, 12, 590, 10, 12, 3, 12, 5, 12, 593, 10, 12,
	3, 12, 3, 12, 5, 12, 597, 10, 12, 3, 12, 5, 12, 600, 10, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 5, 12, 606, 10, 12, 3, 12, 5, 12, 609, 10, 12, 3, 12,
	3, 12, 5, 12, 613, 10, 12, 3, 12, 5, 12, 616, 10, 12, 3, 12, 5, 12, 619,
	10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 626, 10, 13, 3, 14, 5,
	14, 629, 10, 14, 3, 14, 3, 14, 5, 14, 633, 10, 14, 3, 14, 5, 14, 636, 10,
	14, 3, 14, 5, 14, 639, 10, 14, 3, 14, 5, 14, 642, 10, 14, 3, 15, 5, 15,
	645, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 653, 10,
	15, 5, 15, 655, 10, 15, 3, 15, 3, 15, 5, 15, 659, 10, 15, 3, 15, 5, 15,
	662, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 668, 10, 15, 12, 15, 14,
	15, 671, 11, 15, 3, 15, 5, 15, 674, 10, 15, 3, 15, 3, 15, 5, 15, 678, 10,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 685, 10, 15, 3, 15, 3, 15,
	5, 15, 689, 10, 15, 5, 15, 691, 10, 15, 5, 15, 693, 10, 15, 3, 15, 5, 15,
	696, 10, 15, 3, 15, 5, 15, 699, 10, 15, 3, 15, 5, 15, 702, 10, 15, 3, 16,
	3, 16, 3, 16, 3, 16, 7, 16, 708, 10, 16, 12, 16, 14, 16, 711, 11, 16, 3,
	16, 3, 16, 3, 16, 5, 16, 716, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16,
	722, 10, 16, 5, 16, 724, 10, 16, 3, 17, 3, 17, 5, 17, 728, 10, 17, 3, 17,
	5, 17, 731, 10, 17, 3, 17, 5, 17, 734, 10, 17, 3, 18, 3, 18, 3, 18, 5,
	18, 739, 10, 18, 3, 18, 3, 18, 3, 18, 5, 18, 744, 10, 18, 3, 18, 5, 18,
	747, 10, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 755, 10,
	19, 3, 19, 3, 19, 5, 19, 759, 10, 19, 3, 19, 3, 19, 3, 19, 7, 19, 764,
	10, 19, 12, 19, 14, 19, 767, 11, 19, 5, 19, 769, 10, 19, 3, 19, 3, 19,
	3, 19, 3, 19, 3, 19, 7, 19, 776, 10, 19, 12, 19, 14, 19, 779, 11, 19, 5,
	19, 781, 10, 19, 3, 19, 3, 19, 5, 19, 785, 10, 19, 3, 19, 3, 19, 3, 19,
	3, 19, 7, 19, 791, 10, 19, 12, 19, 14, 19, 794, 11, 19, 5, 19, 796, 10,
	19, 3, 20, 3, 20, 5, 20, 800, 10, 20, 3, 20, 5, 20, 803, 10, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 812, 10, 20, 3, 20, 3,
	20, 5, 20, 816, 10, 20, 3, 20, 3, 20, 5, 20, 820, 10, 20, 3, 20, 5, 20,
	823, 10, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 830, 10, 21, 3,
	21, 5, 21, 833, 10, 21, 3, 21, 3, 21, 3, 21, 7, 21, 838, 10, 21, 12, 21,
	14, 21, 841, 11, 21, 3, 21, 5, 21, 844, 10, 21, 5, 21, 846, 10, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 7, 21, 852, 10, 21, 12, 21, 14, 21, 855, 11, 21,
	5, 21, 857, 10, 21, 3, 21, 3, 21, 5, 21, 861, 10, 21, 3, 21, 3, 21, 3,
	21, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 870, 10, 22, 3, 22, 5, 22, 873,
	10, 22, 3, 22, 3, 22, 5, 22, 877, 10, 22, 3, 22, 3, 22, 5, 22, 881, 10,
	22, 3, 22, 5, 22, 884, 10, 22, 3, 23, 3, 23, 3, 23, 5, 23, 889, 10, 23,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 5, 24, 905, 10, 24, 3, 24, 3, 24, 5, 24, 909,
	10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 915, 10, 24, 5, 24, 917, 10,
	24, 3, 24, 5, 24, 920, 10, 24, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	5, 25, 928, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 934, 10, 25, 3,
	25, 3, 25, 3, 25, 5, 25, 939, 10, 25, 3, 25, 5, 25, 942, 10, 25, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 951, 10, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 7, 26, 957, 10, 26, 12, 26, 14, 26, 960, 11, 26, 5, 26,
	962, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 969, 10, 26, 3,
	26, 5, 26, 972, 10, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1009, 10, 28, 3,
	28, 5, 28, 1012, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1018, 10, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5,
	29, 1030, 10, 29, 5, 29, 1032, 10, 29, 3, 29, 5, 29, 1035, 10, 29, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	5, 30, 1059, 10, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 5, 31, 1070, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	5, 31, 1078, 10, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7,
	32, 1087, 10, 32, 12, 32, 14, 32, 1090, 11, 32, 7, 32, 1092, 10, 32, 12,
	32, 14, 32, 1095, 11, 32, 5, 32, 1097, 10, 32, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 5, 33, 1105, 10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 35,
	3, 35, 3, 35, 3, 35, 5, 35, 1115, 10, 35, 3, 36, 3, 36, 3, 36, 3, 37, 3,
	37, 3, 37, 3, 38, 3, 38, 3, 39, 3, 39, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1141,
	10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1147, 10, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1158, 10, 42, 3,
	43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 5, 45, 1172, 10, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5,
	46, 1180, 10, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1187, 10, 47,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	5, 48, 1210, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 5, 50, 1223, 10, 50, 3, 51, 3, 51, 3, 51, 3, 51,
	5, 51, 1229, 10, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1234, 10, 51, 3, 51, 5,
	51, 1237, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1243, 10, 52, 3, 52,
	3, 52, 5, 52, 1247, 10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1254,
	10, 53, 3, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 5, 54, 1263, 10,
	54, 3, 54, 3, 54, 5, 54, 1267, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55,
	1273, 10, 55, 3, 55, 3, 55, 3, 55, 7, 55, 1278, 10, 55, 12, 55, 14, 55,
	1281, 11, 55, 3, 55, 5, 55, 1284, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1297, 10, 57, 3, 57,
	3, 57, 3, 58, 3, 58, 5, 58, 1303, 10, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3,
	59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60,
	5, 60, 1320, 10, 60, 3, 60, 3, 60, 5, 60, 1324, 10, 60, 3, 60, 3, 60, 3,
	60, 3, 61, 3, 61, 3, 61, 5, 61, 1332, 10, 61, 3, 61, 3, 61, 5, 61, 1336,
	10, 61, 3, 61, 3, 61, 3, 61, 3, 61, 7, 61, 1342, 10, 61, 12, 61, 14, 61,
	1345, 11, 61, 3, 61, 5, 61, 1348, 10, 61, 5, 61, 1350, 10, 61, 3, 62, 3,
	62, 5, 62, 1354, 10, 62, 3, 62, 3, 62, 5, 62, 1358, 10, 62, 3, 62, 3, 62,
	5, 62, 1362, 10, 62, 3, 62, 3, 62, 5, 62, 1366, 10, 62, 3, 62, 3, 62, 3,
	62, 3, 62, 5, 62, 1372, 10, 62, 3, 62, 3, 62, 5, 62, 1376, 10, 62, 5, 62,
	1378, 10, 62, 3, 63, 3, 63, 3, 63, 5, 63, 1383, 10, 63, 3, 63, 3, 63, 3,
	63, 3, 63, 7, 63, 1389, 10, 63, 12, 63, 14, 63, 1392, 11, 63, 5, 63, 1394,
	10, 63, 3, 63, 5, 63, 1397, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63,
	7, 63, 1404, 10, 63, 12, 63, 14, 63, 1407, 11, 63, 3, 63, 3, 63, 5, 63,
	1411, 10, 63, 3, 63, 3, 63, 3, 63, 5, 63, 1416, 10, 63, 3, 63, 5, 63, 1419,
	10, 63, 5, 63, 1421, 10, 63, 3, 64, 3, 64, 5, 64, 1425, 10, 64, 3, 64,
	3, 64, 5, 64, 1429, 10, 64, 3, 64, 5, 64, 1432, 10, 64, 3, 64, 3, 64, 5,
	64, 1436, 10, 64, 3, 65, 3, 65, 3, 66, 3, 66, 5, 66, 1442, 10, 66, 3, 66,
	3, 66, 3, 66, 5, 66, 1447, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5,
	66, 1454, 10, 66, 5, 66, 1456, 10, 66, 3, 66, 3, 66, 5, 66, 1460, 10, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1467, 10, 66, 3, 66, 3, 66, 5,
	66, 1471, 10, 66, 3, 66, 5, 66, 1474, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 5, 66, 1483, 10, 66, 3, 66, 5, 66, 1486, 10, 66, 5,
	66, 1488, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67,
	1497, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 5, 67, 1508, 10, 67, 3, 67, 3, 67, 5, 67, 1512, 10, 67, 5, 67, 1514,
	10, 67, 5, 67, 1516, 10, 67, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 1522, 10,
	68, 3, 68, 3, 68, 3, 68, 5, 68, 1527, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 5, 68, 1534, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 1547, 10, 68, 5, 68, 1549, 10, 68,
	5, 68, 1551, 10, 68, 3, 68, 5, 68, 1554, 10, 68, 3, 68, 5, 68, 1557, 10,
	68, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1564, 10, 69, 3, 69, 5, 69,
	1567, 10, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1573, 10, 69, 3, 69, 3,
	69, 3, 69, 5, 69, 1578, 10, 69, 5, 69, 1580, 10, 69, 3, 69, 5, 69, 1583,
	10, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1589, 10, 69, 3, 69, 3, 69,
	3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1597, 10, 69, 5, 69, 1599, 10, 69, 3,
	69, 5, 69, 1602, 10, 69, 3, 69, 3, 69, 5, 69, 1606, 10, 69, 3, 69, 5, 69,
	1609, 10, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1615, 10, 69, 3, 69, 5,
	69, 1618, 10, 69, 3, 69, 3, 69, 5, 69, 1622, 10, 69, 3, 69, 5, 69, 1625,
	10, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 1631, 10, 69, 3, 69, 5, 69,
	1634, 10, 69, 5, 69, 1636, 10, 69, 3, 70, 3, 70, 5, 70, 1640, 10, 70, 3,
	71, 3, 71, 3, 71, 5, 71, 1645, 10, 71, 3, 72, 3, 72, 3, 72, 3, 72, 3, 73,
	3, 73, 5, 73, 1653, 10, 73, 3, 73, 3, 73, 3, 73, 5, 73, 1658, 10, 73, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 75, 3, 75, 5, 75, 1667, 10, 75, 3, 75,
	7, 75, 1670, 10, 75, 12, 75, 14, 75, 1673, 11, 75, 3, 76, 3, 76, 5, 76,
	1677, 10, 76, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 1683, 10, 77, 3, 77, 3,
	77, 5, 77, 1687, 10, 77, 3, 77, 5, 77, 1690, 10, 77, 3, 77, 3, 77, 5, 77,
	1694, 10, 77, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 1700, 10, 77, 3, 77, 3,
	77, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 1708, 10, 77, 3, 77, 3, 77, 3, 77,
	5, 77, 1713, 10, 77, 5, 77, 1715, 10, 77, 3, 77, 5, 77, 1718, 10, 77, 3,
	77, 7, 77, 1721, 10, 77, 12, 77, 14, 77, 1724, 11, 77, 3, 78, 3, 78, 5,
	78, 1728, 10, 78, 3, 78, 5, 78, 1731, 10, 78, 3, 78, 3, 78, 3, 78, 5, 78,
	1736, 10, 78, 3, 78, 5, 78, 1739, 10, 78, 3, 78, 5, 78, 1742, 10, 78, 3,
	78, 3, 78, 3, 78, 3, 78, 5, 78, 1748, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78,
	5, 78, 1754, 10, 78, 3, 79, 3, 79, 5, 79, 1758, 10, 79, 3, 79, 3, 79, 3,
	79, 5, 79, 1763, 10, 79, 3, 79, 5, 79, 1766, 10, 79, 3, 79, 3, 79, 3, 79,
	5, 79, 1771, 10, 79, 3, 79, 3, 79, 5, 79, 1775, 10, 79, 3, 79, 3, 79, 5,
	79, 1779, 10, 79, 3, 79, 3, 79, 3, 79, 3, 79, 5, 79, 1785, 10, 79, 3, 79,
	3, 79, 3, 79, 3, 79, 5, 79, 1791, 10, 79, 3, 80, 3, 80, 3, 80, 3, 80, 3,
	80, 7, 80, 1798, 10, 80, 12, 80, 14, 80, 1801, 11, 80, 3, 80, 3, 80, 3,
	81, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1810, 10, 81, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1820, 10, 82, 5, 82, 1822, 10,
	82, 5, 82, 1824, 10, 82, 3, 82, 5, 82, 1827, 10, 82, 3, 82, 5, 82, 1830,
	10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	5, 82, 1841, 10, 82, 5, 82, 1843, 10, 82, 5, 82, 1845, 10, 82, 3, 82, 5,
	82, 1848, 10, 82, 3, 83, 5, 83, 1851, 10, 83, 3, 83, 5, 83, 1854, 10, 83,
	3, 83, 5, 83, 1857, 10, 83, 3, 83, 5, 83, 1860, 10, 83, 3, 83, 5, 83, 1863,
	10, 83, 3, 83, 3, 83, 3, 83, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84,
	3, 84, 5, 84, 1875, 10, 84, 3, 84, 5, 84, 1878, 10, 84, 3, 84, 5, 84, 1881,
	10, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 7, 84, 1888, 10, 84, 12, 84,
	14, 84, 1891, 11, 84, 5, 84, 1893, 10, 84, 3, 84, 5, 84, 1896, 10, 84,
	3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 1903, 10, 85, 3, 85, 5, 85, 1906,
	10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85,
	3, 85, 3, 85, 3, 85, 5, 85, 1920, 10, 85, 3, 85, 5, 85, 1923, 10, 85, 3,
	85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 1930, 10, 85, 3, 85, 3, 85, 3, 85,
	3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 1941, 10, 85, 3, 86, 3,
	86, 5, 86, 1945, 10, 86, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	3, 87, 3, 87, 6, 87, 1956, 10, 87, 13, 87, 14, 87, 1957, 3, 87, 3, 87,
	5, 87, 1962, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 6, 87, 1968, 10, 87, 13,
	87, 14, 87, 1969, 3, 87, 3, 87, 5, 87, 1974, 10, 87, 3, 87, 3, 87, 3, 87,
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3,
	87, 3, 87, 3, 87, 5, 87, 1992, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 7, 87, 2007, 10,
	87, 12, 87, 14, 87, 2010, 11, 87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3,
	88, 3, 88, 3, 88, 5, 88, 2020, 10, 88, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90,
	5, 90, 2027, 10, 90, 3, 90, 3, 90, 3, 90, 7, 90, 2032, 10, 90, 12, 90,
	14, 90, 2035, 11, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 5, 91, 2042, 10,
	91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 92, 3, 92, 5, 92, 2051, 10, 92,
	3, 92, 3, 92, 5, 92, 2055, 10, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3,
	92, 3, 92, 3, 92, 5, 92, 2065, 10, 92, 3, 93, 3, 93, 3, 93, 7, 93, 2070,
	10, 93, 12, 93, 14, 93, 2073, 11, 93, 3, 94, 3, 94, 3, 94, 7, 94, 2078,
	10, 94, 12, 94, 14, 94, 2081, 11, 94, 3, 95, 3, 95, 3, 95, 7, 95, 2086,
	10, 95, 12, 95, 14, 95, 2089, 11, 95, 3, 96, 5, 96, 2092, 10, 96, 3, 96,
	3, 96, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3,
	97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 2114,
	10, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 2123, 10,
	97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 2129, 10, 97, 3, 97, 3, 97, 3, 97,
	3, 97, 5, 97, 2135, 10, 97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 2141, 10,
	97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97,
	2152, 10, 97, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 5, 98, 2159, 10, 98, 3,
	98, 7, 98, 2162, 10, 98, 12, 98, 14, 98, 2165, 11, 98, 3, 99, 3, 99, 5,
	99, 2169, 10, 99, 3, 99, 3, 99, 5, 99, 2173, 10, 99, 3, 99, 3, 99, 3, 99,
	3, 99, 3, 99, 6, 99, 2180, 10, 99, 13, 99, 14, 99, 2181, 5, 99, 2184, 10,
	99, 3, 100, 3, 100, 5, 100, 2188, 10, 100, 3, 100, 3, 100, 3, 100, 5, 100,
	2193, 10, 100, 3, 100, 3, 100, 5, 100, 2197, 10, 100, 5, 100, 2199, 10,
	100, 3, 100, 3, 100, 3, 100, 5, 100, 2204, 10, 100, 3, 100, 3, 100, 5,
	100, 2208, 10, 100, 3, 100, 3, 100, 5, 100, 2212, 10, 100, 3, 100, 3, 100,
	3, 100, 3, 100, 3, 100, 7, 100, 2219, 10, 100, 12, 100, 14, 100, 2222,
	11, 100, 5, 100, 2224, 10, 100, 3, 100, 3, 100, 5, 100, 2228, 10, 100,
	3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 7, 101, 2235, 10, 101, 12, 101,
	14, 101, 2238, 11, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101,
	3, 101, 3, 101, 3, 101, 5, 101, 2249, 10, 101, 5, 101, 2251, 10, 101, 3,
	102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 2259, 10, 102, 3,
	102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 2267, 10, 102, 3,
	102, 5, 102, 2270, 10, 102, 5, 102, 2272, 10, 102, 3, 103, 3, 103, 3, 103,
	3, 103, 3, 103, 5, 103, 2279, 10, 103, 3, 104, 3, 104, 5, 104, 2283, 10,
	104, 3, 105, 3, 105, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 7, 106, 2292,
	10, 106, 12, 106, 14, 106, 2295, 11, 106, 3, 106, 3, 106, 3, 107, 3, 107,
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107,
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107,
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 7, 107, 2326, 10,
	107, 12, 107, 14, 107, 2329, 11, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3,
	107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 5,
	107, 2344, 10, 107, 3, 108, 3, 108, 3, 108, 3, 108, 5, 108, 2350, 10, 108,
	3, 109, 3, 109, 3, 109, 7, 109, 2355, 10, 109, 12, 109, 14, 109, 2358,
	11, 109, 3, 110, 3, 110, 3, 110, 5, 110, 2363, 10, 110, 3, 110, 3, 110,
	3, 110, 5, 110, 2368, 10, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110,
	3, 110, 5, 110, 2376, 10, 110, 3, 110, 5, 110, 2379, 10, 110, 5, 110, 2381,
	10, 110, 3, 111, 3, 111, 3, 111, 7, 111, 2386, 10, 111, 12, 111, 14, 111,
	2389, 11, 111, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 5, 112, 2396, 10,
	112, 3, 113, 3, 113, 7, 113, 2400, 10, 113, 12, 113, 14, 113, 2403, 11,
	113, 3, 114, 3, 114, 5, 114, 2407, 10, 114, 3, 114, 3, 114, 5, 114, 2411,
	10, 114, 3, 114, 3, 114, 3, 114, 5, 114, 2416, 10, 114, 5, 114, 2418, 10,
	114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 5, 114, 2425, 10, 114, 3,
	114, 3, 114, 5, 114, 2429, 10, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3,
	114, 5, 114, 2436, 10, 114, 5, 114, 2438, 10, 114, 5, 114, 2440, 10, 114,
	3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 116,
	5, 116, 2451, 10, 116, 3, 116, 3, 116, 5, 116, 2455, 10, 116, 5, 116, 2457,
	10, 116, 3, 116, 5, 116, 2460, 10, 116, 3, 116, 3, 116, 3, 116, 3, 116,
	3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116,
	3, 116, 5, 116, 2476, 10, 116, 3, 117, 3, 117, 5, 117, 2480, 10, 117, 3,
	118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3,
	118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 7, 118, 2498, 10,
	118, 12, 118, 14, 118, 2501, 11, 118, 3, 118, 5, 118, 2504, 10, 118, 3,
	118, 3, 118, 5, 118, 2508, 10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 3,
	120, 3, 120, 3, 120, 3, 120, 3, 120, 5, 120, 2519, 10, 120, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 5, 121, 2526, 10, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 5,
	121, 2548, 10, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 5, 121, 2600,
	10, 121, 3, 121, 3, 121, 5, 121, 2604, 10, 121, 3, 121, 3, 121, 3, 121,
	3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121,
	5, 121, 2618, 10, 121, 3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 3, 123,
	3, 123, 3, 123, 3, 123, 3, 123, 3, 124, 5, 124, 2631, 10, 124, 3, 124,
	3, 124, 3, 125, 3, 125, 5, 125, 2637, 10, 125, 3, 126, 5, 126, 2640, 10,
	126, 3, 126, 3, 126, 3, 126, 3, 126, 7, 126, 2646, 10, 126, 12, 126, 14,
	126, 2649, 11, 126, 3, 126, 3, 126, 3, 127, 3, 127, 3, 127, 3, 127, 3,
	127, 7, 127, 2658, 10, 127, 12, 127, 14, 127, 2661, 11, 127, 3, 127, 3,
	127, 3, 128, 5, 128, 2666, 10, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3,
	128, 7, 128, 2673, 10, 128, 12, 128, 14, 128, 2676, 11, 128, 3, 128, 3,
	128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3,
	128, 3, 128, 7, 128, 2690, 10, 128, 12, 128, 14, 128, 2693, 11, 128, 3,
	128, 3, 128, 3, 128, 5, 128, 2698, 10, 128, 3, 128, 3, 128, 3, 128, 3,
	128, 3, 128, 3, 128, 5, 128, 2706, 10, 128, 3, 129, 3, 129, 5, 129, 2710,
	10, 129, 3, 130, 3, 130, 3, 130, 3, 130, 7, 130, 2716, 10, 130, 12, 130,
	14, 130, 2719, 11, 130, 3, 130, 3, 130, 3, 131, 3, 131, 5, 131, 2725, 10,
	131, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3,
	132, 7, 132, 2736, 10, 132, 12, 132, 14, 132, 2739, 11, 132, 3, 133, 3,
	133, 3, 133, 7, 133, 2744, 10, 133, 12, 133, 14, 133, 2747, 11, 133, 3,
	134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3,
	134, 5, 134, 2759, 10, 134, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 5,
	135, 2766, 10, 135, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 2772, 10, 135,
	3, 135, 3, 135, 5, 135, 2776, 10, 135, 3, 135, 3, 135, 3, 135, 3, 135,
	3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135,
	3, 135, 3, 135, 5, 135, 2793, 10, 135, 3, 136, 5, 136, 2796, 10, 136, 3,
	136, 3, 136, 3, 137, 3, 137, 3, 137, 3, 137, 3, 137, 5, 137, 2805, 10,
	137, 3, 137, 5, 137, 2808, 10, 137, 3, 137, 5, 137, 2811, 10, 137, 3, 137,
	3, 137, 3, 138, 3, 138, 3, 138, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139,
	3, 139, 5, 139, 2824, 10, 139, 3, 140, 3, 140, 5, 140, 2828, 10, 140, 3,
	141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 5, 141, 2836, 10, 141, 3,
	142, 3, 142, 3, 142, 3, 142, 5, 142, 2842, 10, 142, 3, 143, 3, 143, 3,
	143, 3, 143, 7, 143, 2848, 10, 143, 12, 143, 14, 143, 2851, 11, 143, 3,
	143, 3, 143, 3, 143, 3, 143, 5, 143, 2857, 10, 143, 3, 143, 3, 143, 3,
	143, 3, 143, 5, 143, 2863, 10, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3,
	143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 5,
	143, 2878, 10, 143, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3,
	144, 5, 144, 2887, 10, 144, 3, 144, 3, 144, 3, 145, 3, 145, 5, 145, 2893,
	10, 145, 3, 146, 3, 146, 3, 146, 3, 146, 5, 146, 2899, 10, 146, 3, 146,
	5, 146, 2902, 10, 146, 3, 146, 3, 146, 5, 146, 2906, 10, 146, 3, 146, 3,
	146, 3, 146, 7, 146, 2911, 10, 146, 12, 146, 14, 146, 2914, 11, 146, 3,
	147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 2921, 10, 147, 3, 147, 5,
	147, 2924, 10, 147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 2930, 10, 147,
	3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 2936, 10, 147, 5, 147, 2938, 10,
	147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 2944, 10, 147, 3, 147, 5,
	147, 2947, 10, 147, 5, 147, 2949, 10, 147, 3, 147, 3, 147, 3, 147, 3, 147,
	5, 147, 2955, 10, 147, 5, 147, 2957, 10, 147, 3, 147, 3, 147, 3, 148, 3,
	148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5,
	148, 2971, 10, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148, 2978,
	10, 148, 3, 148, 3, 148, 3, 149, 3, 149, 3, 149, 5, 149, 2985, 10, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 5, 149, 2992, 10, 149, 3, 149,
	3, 149, 3, 150, 3, 150, 3, 150, 5, 150, 2999, 10, 150, 3, 150, 3, 150,
	3, 151, 3, 151, 3, 151, 5, 151, 3006, 10, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 5, 151, 3013, 10, 151, 3, 151, 3, 151, 3, 152, 3, 152,
	5, 152, 3019, 10, 152, 3, 153, 3, 153, 3, 153, 5, 153, 3024, 10, 153, 3,
	153, 3, 153, 3, 154, 3, 154, 3, 154, 7, 154, 3031, 10, 154, 12, 154, 14,
	154, 3034, 11, 154, 3, 155, 3, 155, 5, 155, 3038, 10, 155, 3, 156, 3, 156,
	3, 157, 3, 157, 3, 158, 5, 158, 3045, 10, 158, 3, 158, 3, 158, 3, 159,
	3, 159, 3, 159, 3, 159, 3, 159, 5, 159, 3054, 10, 159, 3, 160, 3, 160,
	5, 160, 3058, 10, 160, 3, 160, 3, 160, 3, 160, 3, 160, 5, 160, 3064, 10,
	160, 3, 160, 5, 160, 3067, 10, 160, 3, 161, 3, 161, 5, 161, 3071, 10, 161,
	3, 162, 3, 162, 3, 162, 5, 162, 3076, 10, 162, 3, 162, 3, 162, 5, 162,
	3080, 10, 162, 3, 162, 3, 162, 5, 162, 3084, 10, 162, 3, 162, 3, 162, 5,
	162, 3088, 10, 162, 3, 163, 3, 163, 3, 164, 3, 164, 3, 164, 5, 164, 3095,
	10, 164, 3, 165, 3, 165, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166,
	3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166,
	5, 166, 3114, 10, 166, 3, 167, 3, 167, 3, 168, 3, 168, 5, 168, 3120, 10,
	168, 3, 168, 2, 3, 172, 169, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
	26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
	62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96,
	98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
	128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
	158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186,
	188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216,
	218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246,
	248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276,
	278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306,
	308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 2,
	60, 3, 2, 404, 405, 4, 2, 404, 404, 407, 407, 4, 2, 242, 242, 378, 378,
	4, 2, 404, 405, 407, 407, 4, 2, 108, 108, 126, 126, 4, 2, 10, 10, 53, 53,
	3, 2, 133, 134, 4, 2, 324, 325, 337, 337, 4, 2, 127, 127, 352, 352, 5,
	2, 253, 253, 355, 355, 394, 394, 5, 2, 166, 166, 205, 205, 247, 247, 4,
	2, 113, 113, 115, 115, 5, 2, 238, 238, 275, 275, 301, 301, 4, 2, 268, 268,
	289, 289, 5, 2, 251, 251, 318, 318, 320, 320, 3, 2, 339, 340, 5, 2, 305,
	305, 347, 347, 363, 363, 5, 2, 197, 197, 248, 248, 264, 264, 4, 2, 264,
	264, 362, 362, 5, 2, 79, 79, 215, 215, 362, 362, 5, 2, 108, 108, 221, 221,
	379, 379, 4, 2, 301, 301, 358, 358, 4, 2, 184, 184, 291, 291, 3, 2, 324,
	325, 4, 2, 166, 166, 187, 187, 3, 2, 172, 173, 6, 2, 216, 216, 326, 326,
	359, 359, 407, 407, 4, 2, 265, 265, 356, 356, 6, 2, 250, 250, 257, 257,
	286, 286, 367, 367, 5, 2, 322, 322, 339, 339, 357, 357, 4, 2, 195, 195,
	344, 344, 3, 2, 436, 437, 3, 2, 433, 435, 4, 2, 436, 437, 439, 441, 5,
	2, 5, 5, 8, 8, 163, 163, 4, 2, 5, 5, 55, 55, 4, 2, 350, 350, 352, 352,
	4, 2, 261, 261, 309, 309, 4, 2, 123, 123, 273, 273, 5, 2, 104, 104, 225,
	225, 273, 273, 5, 2, 104, 104, 273, 273, 292, 292, 4, 2, 85, 85, 351, 351,
	4, 2, 110, 110, 404, 405, 5, 2, 79, 79, 99, 99, 147, 147, 6, 2, 104, 104,
	273, 273, 292, 292, 345, 345, 4, 2, 405, 405, 407, 407, 5, 2, 245, 245,
	336, 336, 353, 353, 7, 2, 212, 212, 294, 294, 300, 300, 369, 371, 391,
	392, 3, 2, 229, 230, 4, 2, 335, 335, 352, 352, 5, 2, 79, 79, 113, 113,
	339, 339, 4, 2, 26, 26, 107, 107, 4, 2, 294, 294, 405, 405, 3, 2, 409,
	410, 4, 2, 405, 405, 409, 409, 45, 2, 74, 74, 195, 195, 203, 203, 205,
	205, 212, 213, 216, 218, 222, 223, 225, 225, 227, 230, 242, 242, 244, 245,
	247, 247, 250, 250, 253, 253, 255, 257, 261, 266, 268, 271, 273, 273, 276,
	276, 278, 278, 280, 282, 284, 296, 300, 300, 304, 304, 306, 306, 309, 311,
	313, 313, 315, 316, 319, 326, 328, 333, 335, 337, 339, 339, 341, 341, 344,
	346, 348, 357, 359, 360, 362, 362, 365, 371, 375, 378, 382, 382, 384, 388,
	390, 397, 406, 406, 3, 2, 415, 422, 7, 2, 267, 267, 283, 283, 298, 298,
	374, 374, 435, 435, 3641, 2, 339, 3, 2, 2, 2, 4, 344, 3, 2, 2, 2, 6, 352,
	3, 2, 2, 2, 8, 360, 3, 2, 2, 2, 10, 366, 3, 2, 2, 2, 12, 383, 3, 2, 2,
	2, 14, 510, 3, 2, 2, 2, 16, 519, 3, 2, 2, 2, 18, 522, 3, 2, 2, 2, 20, 576,
	3, 2, 2, 2, 22, 579, 3, 2, 2, 2, 24, 625, 3, 2, 2, 2, 26, 628, 3, 2, 2,
	2, 28, 644, 3, 2, 2, 2, 30, 703, 3, 2, 2, 2, 32, 727, 3, 2, 2, 2, 34, 746,
	3, 2, 2, 2, 36, 748, 3, 2, 2, 2, 38, 797, 3, 2, 2, 2, 40, 824, 3, 2, 2,
	2, 42, 865, 3, 2, 2, 2, 44, 888, 3, 2, 2, 2, 46, 890, 3, 2, 2, 2, 48, 921,
	3, 2, 2, 2, 50, 943, 3, 2, 2, 2, 52, 973, 3, 2, 2, 2, 54, 975, 3, 2, 2,
	2, 56, 1013, 3, 2, 2, 2, 58, 1058, 3, 2, 2, 2, 60, 1077, 3, 2, 2, 2, 62,
	1079, 3, 2, 2, 2, 64, 1104, 3, 2, 2, 2, 66, 1106, 3, 2, 2, 2, 68, 1114,
	3, 2, 2, 2, 70, 1116, 3, 2, 2, 2, 72, 1119, 3, 2, 2, 2, 74, 1122, 3, 2,
	2, 2, 76, 1124, 3, 2, 2, 2, 78, 1126, 3, 2, 2, 2, 80, 1128, 3, 2, 2, 2,
	82, 1157, 3, 2, 2, 2, 84, 1159, 3, 2, 2, 2, 86, 1162, 3, 2, 2, 2, 88, 1171,
	3, 2, 2, 2, 90, 1179, 3, 2, 2, 2, 92, 1186, 3, 2, 2, 2, 94, 1209, 3, 2,
	2, 2, 96, 1211, 3, 2, 2, 2, 98, 1222, 3, 2, 2, 2, 100, 1224, 3, 2, 2, 2,
	102, 1238, 3, 2, 2, 2, 104, 1248, 3, 2, 2, 2, 106, 1258, 3, 2, 2, 2, 108,
	1268, 3, 2, 2, 2, 110, 1285, 3, 2, 2, 2, 112, 1292, 3, 2, 2, 2, 114, 1302,
	3, 2, 2, 2, 116, 1304, 3, 2, 2, 2, 118, 1311, 3, 2, 2, 2, 120, 1349, 3,
	2, 2, 2, 122, 1377, 3, 2, 2, 2, 124, 1420, 3, 2, 2, 2, 126, 1424, 3, 2,
	2, 2, 128, 1437, 3, 2, 2, 2, 130, 1487, 3, 2, 2, 2, 132, 1515, 3, 2, 2,
	2, 134, 1556, 3, 2, 2, 2, 136, 1635, 3, 2, 2, 2, 138, 1637, 3, 2, 2, 2,
	140, 1641, 3, 2, 2, 2, 142, 1646, 3, 2, 2, 2, 144, 1650, 3, 2, 2, 2, 146,
	1659, 3, 2, 2, 2, 148, 1664, 3, 2, 2, 2, 150, 1676, 3, 2, 2, 2, 152, 1678,
	3, 2, 2, 2, 154, 1727, 3, 2, 2, 2, 156, 1757, 3, 2, 2, 2, 158, 1792, 3,
	2, 2, 2, 160, 1804, 3, 2, 2, 2, 162, 1811, 3, 2, 2, 2, 164, 1850, 3, 2,
	2, 2, 166, 1867, 3, 2, 2, 2, 168, 1940, 3, 2, 2, 2, 170, 1944, 3, 2, 2,
	2, 172, 1991, 3, 2, 2, 2, 174, 2019, 3, 2, 2, 2, 176, 2021, 3, 2, 2, 2,
	178, 2023, 3, 2, 2, 2, 180, 2036, 3, 2, 2, 2, 182, 2064, 3, 2, 2, 2, 184,
	2066, 3, 2, 2, 2, 186, 2074, 3, 2, 2, 2, 188, 2082, 3, 2, 2, 2, 190, 2091,
	3, 2, 2, 2, 192, 2151, 3, 2, 2, 2, 194, 2158, 3, 2, 2, 2, 196, 2172, 3,
	2, 2, 2, 198, 2185, 3, 2, 2, 2, 200, 2229, 3, 2, 2, 2, 202, 2271, 3, 2,
	2, 2, 204, 2273, 3, 2, 2, 2, 206, 2280, 3, 2, 2, 2, 208, 2284, 3, 2, 2,
	2, 210, 2286, 3, 2, 2, 2, 212, 2343, 3, 2, 2, 2, 214, 2345, 3, 2, 2, 2,
	216, 2351, 3, 2, 2, 2, 218, 2380, 3, 2, 2, 2, 220, 2382, 3, 2, 2, 2, 222,
	2395, 3, 2, 2, 2, 224, 2397, 3, 2, 2, 2, 226, 2439, 3, 2, 2, 2, 228, 2441,
	3, 2, 2, 2, 230, 2475, 3, 2, 2, 2, 232, 2477, 3, 2, 2, 2, 234, 2507, 3,
	2, 2, 2, 236, 2509, 3, 2, 2, 2, 238, 2518, 3, 2, 2, 2, 240, 2617, 3, 2,
	2, 2, 242, 2619, 3, 2, 2, 2, 244, 2624, 3, 2, 2, 2, 246, 2630, 3, 2, 2,
	2, 248, 2634, 3, 2, 2, 2, 250, 2639, 3, 2, 2, 2, 252, 2652, 3, 2, 2, 2,
	254, 2665, 3, 2, 2, 2, 256, 2709, 3, 2, 2, 2, 258, 2711, 3, 2, 2, 2, 260,
	2724, 3, 2, 2, 2, 262, 2726, 3, 2, 2, 2, 264, 2740, 3, 2, 2, 2, 266, 2758,
	3, 2, 2, 2, 268, 2792, 3, 2, 2, 2, 270, 2795, 3, 2, 2, 2, 272, 2799, 3,
	2, 2, 2, 274, 2814, 3, 2, 2, 2, 276, 2823, 3, 2, 2, 2, 278, 2827, 3, 2,
	2, 2, 280, 2835, 3, 2, 2, 2, 282, 2841, 3, 2, 2, 2, 284, 2877, 3, 2, 2,
	2, 286, 2879, 3, 2, 2, 2, 288, 2892, 3, 2, 2, 2, 290, 2894, 3, 2, 2, 2,
	292, 2915, 3, 2, 2, 2, 294, 2977, 3, 2, 2, 2, 296, 2991, 3, 2, 2, 2, 298,
	2998, 3, 2, 2, 2, 300, 3012, 3, 2, 2, 2, 302, 3018, 3, 2, 2, 2, 304, 3023,
	3, 2, 2, 2, 306, 3027, 3, 2, 2, 2, 308, 3037, 3, 2, 2, 2, 310, 3039, 3,
	2, 2, 2, 312, 3041, 3, 2, 2, 2, 314, 3044, 3, 2, 2, 2, 316, 3053, 3, 2,
	2, 2, 318, 3055, 3, 2, 2, 2, 320, 3070, 3, 2, 2, 2, 322, 3087, 3, 2, 2,
	2, 324, 3089, 3, 2, 2, 2, 326, 3094, 3, 2, 2, 2, 328, 3096, 3, 2, 2, 2,
	330, 3113, 3, 2, 2, 2, 332, 3115, 3, 2, 2, 2, 334, 3117, 3, 2, 2, 2, 336,
	338, 5, 4, 3, 2, 337, 336, 3, 2, 2, 2, 338, 341, 3, 2, 2, 2, 339, 337,
	3, 2, 2, 2, 339, 340, 3, 2, 2, 2, 340, 342, 3, 2, 2, 2, 341, 339, 3, 2,
	2, 2, 342, 343, 7, 2, 2, 3, 343, 3, 3, 2, 2, 2, 344, 346, 5, 6, 4, 2, 345,
	347, 5, 138, 70, 2, 346, 345, 3, 2, 2, 2, 346, 347, 3, 2, 2, 2, 347, 5,
	3, 2, 2, 2, 348, 350, 5, 8, 5, 2, 349, 351, 7, 431, 2, 2, 350, 349, 3,
	2, 2, 2, 350, 351, 3, 2, 2, 2, 351, 353, 3, 2, 2, 2, 352, 348, 3, 2, 2,
	2, 353, 354, 3, 2, 2, 2, 354, 352, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355,
	7, 3, 2, 2, 2, 356, 361, 5, 10, 6, 2, 357, 361, 5, 12, 7, 2, 358, 361,
	5, 14, 8, 2, 359, 361, 5, 16, 9, 2, 360, 356, 3, 2, 2, 2, 360, 357, 3,
	2, 2, 2, 360, 358, 3, 2, 2, 2, 360, 359, 3, 2, 2, 2, 361, 9, 3, 2, 2, 2,
	362, 367, 5, 18, 10, 2, 363, 367, 5, 22, 12, 2, 364, 367, 5, 26, 14, 2,
	365, 367, 5, 28, 15, 2, 366, 362, 3, 2, 2, 2, 366, 363, 3, 2, 2, 2, 366,
	364, 3, 2, 2, 2, 366, 365, 3, 2, 2, 2, 367, 11, 3, 2, 2, 2, 368, 384, 5,
	36, 19, 2, 369, 384, 5, 38, 20, 2, 370, 384, 5, 40, 21, 2, 371, 384, 5,
	46, 24, 2, 372, 384, 5, 48, 25, 2, 373, 384, 5, 110, 56, 2, 374, 384, 5,
	50, 26, 2, 375, 384, 5, 54, 28, 2, 376, 384, 5, 56, 29, 2, 377, 384, 5,
	100, 51, 2, 378, 384, 5, 102, 52, 2, 379, 384, 5, 104, 53, 2, 380, 384,
	5, 106, 54, 2, 381, 384, 5, 112, 57, 2, 382, 384, 5, 108, 55, 2, 383, 368,
	3, 2, 2, 2, 383, 369, 3, 2, 2, 2, 383, 370, 3, 2, 2, 2, 383, 371, 3, 2,
	2, 2, 383, 372, 3, 2, 2, 2, 383, 373, 3, 2, 2, 2, 383, 374, 3, 2, 2, 2,
	383, 375, 3, 2, 2, 2, 383, 376, 3, 2, 2, 2, 383, 377, 3, 2, 2, 2, 383,
	378, 3, 2, 2, 2, 383, 379, 3, 2, 2, 2, 383, 380, 3, 2, 2, 2, 383, 381,
	3, 2, 2, 2, 383, 382, 3, 2, 2, 2, 384, 13, 3, 2, 2, 2, 385, 387, 7, 13,
	2, 2, 386, 388, 7, 431, 2, 2, 387, 386, 3, 2, 2, 2, 387, 388, 3, 2, 2,
	2, 388, 390, 3, 2, 2, 2, 389, 391, 5, 6, 4, 2, 390, 389, 3, 2, 2, 2, 390,
	391, 3, 2, 2, 2, 391, 392, 3, 2, 2, 2, 392, 394, 7, 61, 2, 2, 393, 395,
	7, 431, 2, 2, 394, 393, 3, 2, 2, 2, 394, 395, 3, 2, 2, 2, 395, 511, 3,
	2, 2, 2, 396, 398, 7, 15, 2, 2, 397, 399, 7, 431, 2, 2, 398, 397, 3, 2,
	2, 2, 398, 399, 3, 2, 2, 2, 399, 511, 3, 2, 2, 2, 400, 402, 7, 36, 2, 2,
	401, 403, 7, 431, 2, 2, 402, 401, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2, 403,
	511, 3, 2, 2, 2, 404, 405, 7, 81, 2, 2, 405, 407, 5, 326, 164, 2, 406,
	408, 7, 431, 2, 2, 407, 406, 3, 2, 2, 2, 407, 408, 3, 2, 2, 2, 408, 511,
	3, 2, 2, 2, 409, 410, 5, 326, 164, 2, 410, 412, 7, 432, 2, 2, 411, 413,
	7, 431, 2, 2, 412, 411, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2, 413, 511, 3,
	2, 2, 2, 414, 415, 7, 88, 2, 2, 415, 416, 5, 186, 94, 2, 416, 419, 5, 8,
	5, 2, 417, 418, 7, 60, 2, 2, 418, 420, 5, 8, 5, 2, 419, 417, 3, 2, 2, 2,
	419, 420, 3, 2, 2, 2, 420, 422, 3, 2, 2, 2, 421, 423, 7, 431, 2, 2, 422,
	421, 3, 2, 2, 2, 422, 423, 3, 2, 2, 2, 423, 511, 3, 2, 2, 2, 424, 426,
	7, 144, 2, 2, 425, 427, 5, 172, 87, 2, 426, 425, 3, 2, 2, 2, 426, 427,
	3, 2, 2, 2, 427, 429, 3, 2, 2, 2, 428, 430, 7, 431, 2, 2, 429, 428, 3,
	2, 2, 2, 429, 430, 3, 2, 2, 2, 430, 511, 3, 2, 2, 2, 431, 437, 7, 376,
	2, 2, 432, 433, 9, 2, 2, 2, 433, 434, 7, 430, 2, 2, 434, 435, 9, 3, 2,
	2, 435, 436, 7, 430, 2, 2, 436, 438, 9, 2, 2, 2, 437, 432, 3, 2, 2, 2,
	437, 438, 3, 2, 2, 2, 438, 440, 3, 2, 2, 2, 439, 441, 7, 431, 2, 2, 440,
	439, 3, 2, 2, 2, 440, 441, 3, 2, 2, 2, 441, 511, 3, 2, 2, 2, 442, 443,
	7, 13, 2, 2, 443, 445, 7, 382, 2, 2, 444, 446, 7, 431, 2, 2, 445, 444,
	3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 448, 3, 2, 2, 2, 447, 449, 5, 6,
	4, 2, 448, 447, 3, 2, 2, 2, 448, 449, 3, 2, 2, 2, 449, 450, 3, 2, 2, 2,
	450, 451, 7, 61, 2, 2, 451, 453, 7, 382, 2, 2, 452, 454, 7, 431, 2, 2,
	453, 452, 3, 2, 2, 2, 453, 454, 3, 2, 2, 2, 454, 455, 3, 2, 2, 2, 455,
	456, 7, 13, 2, 2, 456, 458, 7, 218, 2, 2, 457, 459, 7, 431, 2, 2, 458,
	457, 3, 2, 2, 2, 458, 459, 3, 2, 2, 2, 459, 461, 3, 2, 2, 2, 460, 462,
	5, 6, 4, 2, 461, 460, 3, 2, 2, 2, 461, 462, 3, 2, 2, 2, 462, 463, 3, 2,
	2, 2, 463, 464, 7, 61, 2, 2, 464, 466, 7, 218, 2, 2, 465, 467, 7, 431,
	2, 2, 466, 465, 3, 2, 2, 2, 466, 467, 3, 2, 2, 2, 467, 511, 3, 2, 2, 2,
	468, 469, 7, 188, 2, 2, 469, 470, 9, 4, 2, 2, 470, 472, 5, 172, 87, 2,
	471, 473, 7, 431, 2, 2, 472, 471, 3, 2, 2, 2, 472, 473, 3, 2, 2, 2, 473,
	511, 3, 2, 2, 2, 474, 475, 7, 191, 2, 2, 475, 485, 5, 186, 94, 2, 476,
	486, 5, 8, 5, 2, 477, 479, 7, 15, 2, 2, 478, 480, 7, 431, 2, 2, 479, 478,
	3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480, 486, 3, 2, 2, 2, 481, 483, 7, 36,
	2, 2, 482, 484, 7, 431, 2, 2, 483, 482, 3, 2, 2, 2, 483, 484, 3, 2, 2,
	2, 484, 486, 3, 2, 2, 2, 485, 476, 3, 2, 2, 2, 485, 477, 3, 2, 2, 2, 485,
	481, 3, 2, 2, 2, 486, 511, 3, 2, 2, 2, 487, 488, 7, 132, 2, 2, 488, 490,
	5, 172, 87, 2, 489, 491, 7, 431, 2, 2, 490, 489, 3, 2, 2, 2, 490, 491,
	3, 2, 2, 2, 491, 511, 3, 2, 2, 2, 492, 493, 7, 136, 2, 2, 493, 494, 7,
	428, 2, 2, 494, 495, 9, 5, 2, 2, 495, 496, 7, 430, 2, 2, 496, 497, 5, 170,
	86, 2, 497, 498, 7, 430, 2, 2, 498, 503, 5, 170, 86, 2, 499, 500, 7, 430,
	2, 2, 500, 502, 5, 170, 86, 2, 501, 499, 3, 2, 2, 2, 502, 505, 3, 2, 2,
	2, 503, 501, 3, 2, 2, 2, 503, 504, 3, 2, 2, 2, 504, 506, 3, 2, 2, 2, 505,
	503, 3, 2, 2, 2, 506, 508, 7, 429, 2, 2, 507, 509, 7, 431, 2, 2, 508, 507,
	3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509, 511, 3, 2, 2, 2, 510, 385, 3, 2,
	2, 2, 510, 396, 3, 2, 2, 2, 510, 400, 3, 2, 2, 2, 510, 404, 3, 2, 2, 2,
	510, 409, 3, 2, 2, 2, 510, 414, 3, 2, 2, 2, 510, 424, 3, 2, 2, 2, 510,
	431, 3, 2, 2, 2, 510, 442, 3, 2, 2, 2, 510, 468, 3, 2, 2, 2, 510, 474,
	3, 2, 2, 2, 510, 487, 3, 2, 2, 2, 510, 492, 3, 2, 2, 2, 511, 15, 3, 2,
	2, 2, 512, 520, 5, 120, 61, 2, 513, 520, 5, 122, 62, 2, 514, 520, 5, 124,
	63, 2, 515, 520, 5, 130, 66, 2, 516, 520, 5, 134, 68, 2, 517, 520, 5, 136,
	69, 2, 518, 520, 5, 140, 71, 2, 519, 512, 3, 2, 2, 2, 519, 513, 3, 2, 2,
	2, 519, 514, 3, 2, 2, 2, 519, 515, 3, 2, 2, 2, 519, 516, 3, 2, 2, 2, 519,
	517, 3, 2, 2, 2, 519, 518, 3, 2, 2, 2, 520, 17, 3, 2, 2, 2, 521, 523, 5,
	178, 90, 2, 522, 521, 3, 2, 2, 2, 522, 523, 3, 2, 2, 2, 523, 524, 3, 2,
	2, 2, 524, 532, 7, 51, 2, 2, 525, 526, 7, 171, 2, 2, 526, 527, 7, 428,
	2, 2, 527, 528, 5, 172, 87, 2, 528, 530, 7, 429, 2, 2, 529, 531, 7, 127,
	2, 2, 530, 529, 3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531, 533, 3, 2, 2, 2,
	532, 525, 3, 2, 2, 2, 532, 533, 3, 2, 2, 2, 533, 535, 3, 2, 2, 2, 534,
	536, 7, 78, 2, 2, 535, 534, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536, 537,
	3, 2, 2, 2, 537, 539, 5, 20, 11, 2, 538, 540, 5, 252, 127, 2, 539, 538,
	3, 2, 2, 2, 539, 540, 3, 2, 2, 2, 540, 542, 3, 2, 2, 2, 541, 543, 5, 30,
	16, 2, 542, 541, 3, 2, 2, 2, 542, 543, 3, 2, 2, 2, 543, 546, 3, 2, 2, 2,
	544, 545, 7, 78, 2, 2, 545, 547, 5, 220, 111, 2, 546, 544, 3, 2, 2, 2,
	546, 547, 3, 2, 2, 2, 547, 561, 3, 2, 2, 2, 548, 559, 7, 190, 2, 2, 549,
	560, 5, 186, 94, 2, 550, 551, 7, 40, 2, 2, 551, 557, 7, 112, 2, 2, 552,
	554, 7, 268, 2, 2, 553, 552, 3, 2, 2, 2, 553, 554, 3, 2, 2, 2, 554, 555,
	3, 2, 2, 2, 555, 558, 5, 308, 155, 2, 556, 558, 7, 404, 2, 2, 557, 553,
	3, 2, 2, 2, 557, 556, 3, 2, 2, 2, 558, 560, 3, 2, 2, 2, 559, 549, 3, 2,
	2, 2, 559, 550, 3, 2, 2, 2, 560, 562, 3, 2, 2, 2, 561, 548, 3, 2, 2, 2,
	561, 562, 3, 2, 2, 2, 562, 564, 3, 2, 2, 2, 563, 565, 5, 202, 102, 2, 564,
	563, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565, 567, 3, 2, 2, 2, 566, 568,
	5, 210, 106, 2, 567, 566, 3, 2, 2, 2, 567, 568, 3, 2, 2, 2, 568, 570, 3,
	2, 2, 2, 569, 571, 7, 431, 2, 2, 570, 569, 3, 2, 2, 2, 570, 571, 3, 2,
	2, 2, 571, 19, 3, 2, 2, 2, 572, 577, 5, 248, 125, 2, 573, 577, 5, 302,
	152, 2, 574, 577, 5, 114, 58, 2, 575, 577, 7, 404, 2, 2, 576, 572, 3, 2,
	2, 2, 576, 573, 3, 2, 2, 2, 576, 574, 3, 2, 2, 2, 576, 575, 3, 2, 2, 2,
	577, 21, 3, 2, 2, 2, 578, 580, 5, 178, 90, 2, 579, 578, 3, 2, 2, 2, 579,
	580, 3, 2, 2, 2, 580, 581, 3, 2, 2, 2, 581, 589, 7, 92, 2, 2, 582, 583,
	7, 171, 2, 2, 583, 584, 7, 428, 2, 2, 584, 585, 5, 172, 87, 2, 585, 587,
	7, 429, 2, 2, 586, 588, 7, 127, 2, 2, 587, 586, 3, 2, 2, 2, 587, 588, 3,
	2, 2, 2, 588, 590, 3, 2, 2, 2, 589, 582, 3, 2, 2, 2, 589, 590, 3, 2, 2,
	2, 590, 592, 3, 2, 2, 2, 591, 593, 7, 94, 2, 2, 592, 591, 3, 2, 2, 2, 592,
	593, 3, 2, 2, 2, 593, 596, 3, 2, 2, 2, 594, 597, 5, 302, 152, 2, 595, 597,
	5, 114, 58, 2, 596, 594, 3, 2, 2, 2, 596, 595, 3, 2, 2, 2, 597, 599, 3,
	2, 2, 2, 598, 600, 5, 252, 127, 2, 599, 598, 3, 2, 2, 2, 599, 600, 3, 2,
	2, 2, 600, 605, 3, 2, 2, 2, 601, 602, 7, 428, 2, 2, 602, 603, 5, 306, 154,
	2, 603, 604, 7, 429, 2, 2, 604, 606, 3, 2, 2, 2, 605, 601, 3, 2, 2, 2,
	605, 606, 3, 2, 2, 2, 606, 608, 3, 2, 2, 2, 607, 609, 5, 30, 16, 2, 608,
	607, 3, 2, 2, 2, 608, 609, 3, 2, 2, 2, 609, 610, 3, 2, 2, 2, 610, 612,
	5, 24, 13, 2, 611, 613, 5, 202, 102, 2, 612, 611, 3, 2, 2, 2, 612, 613,
	3, 2, 2, 2, 613, 615, 3, 2, 2, 2, 614, 616, 5, 210, 106, 2, 615, 614, 3,
	2, 2, 2, 615, 616, 3, 2, 2, 2, 616, 618, 3, 2, 2, 2, 617, 619, 7, 431,
	2, 2, 618, 617, 3, 2, 2, 2, 618, 619, 3, 2, 2, 2, 619, 23, 3, 2, 2, 2,
	620, 626, 5, 262, 132, 2, 621, 626, 5, 238, 120, 2, 622, 626, 5, 124, 63,
	2, 623, 624, 7, 50, 2, 2, 624, 626, 7, 185, 2, 2, 625, 620, 3, 2, 2, 2,
	625, 621, 3, 2, 2, 2, 625, 622, 3, 2, 2, 2, 625, 623, 3, 2, 2, 2, 626,
	25, 3, 2, 2, 2, 627, 629, 5, 178, 90, 2, 628, 627, 3, 2, 2, 2, 628, 629,
	3, 2, 2, 2, 629, 630, 3, 2, 2, 2, 630, 632, 5, 194, 98, 2, 631, 633, 5,
	200, 101, 2, 632, 631, 3, 2, 2, 2, 632, 633, 3, 2, 2, 2, 633, 635, 3, 2,
	2, 2, 634, 636, 5, 202, 102, 2, 635, 634, 3, 2, 2, 2, 635, 636, 3, 2, 2,
	2, 636, 638, 3, 2, 2, 2, 637, 639, 5, 210, 106, 2, 638, 637, 3, 2, 2, 2,
	638, 639, 3, 2, 2, 2, 639, 641, 3, 2, 2, 2, 640, 642, 7, 431, 2, 2, 641,
	640, 3, 2, 2, 2, 641, 642, 3, 2, 2, 2, 642, 27, 3, 2, 2, 2, 643, 645, 5,
	178, 90, 2, 644, 643, 3, 2, 2, 2, 644, 645, 3, 2, 2, 2, 645, 646, 3, 2,
	2, 2, 646, 654, 7, 181, 2, 2, 647, 648, 7, 171, 2, 2, 648, 649, 7, 428,
	2, 2, 649, 650, 5, 172, 87, 2, 650, 652, 7, 429, 2, 2, 651, 653, 7, 127,
	2, 2, 652, 651, 3, 2, 2, 2, 652, 653, 3, 2, 2, 2, 653, 655, 3, 2, 2, 2,
	654, 647, 3, 2, 2, 2, 654, 655, 3, 2, 2, 2, 655, 658, 3, 2, 2, 2, 656,
	659, 5, 302, 152, 2, 657, 659, 5, 114, 58, 2, 658, 656, 3, 2, 2, 2, 658,
	657, 3, 2, 2, 2, 659, 661, 3, 2, 2, 2, 660, 662, 5, 250, 126, 2, 661, 660,
	3, 2, 2, 2, 661, 662, 3, 2, 2, 2, 662, 663, 3, 2, 2, 2, 663, 664, 7, 160,
	2, 2, 664, 669, 5, 182, 92, 2, 665, 666, 7, 430, 2, 2, 666, 668, 5, 182,
	92, 2, 667, 665, 3, 2, 2, 2, 668, 671, 3, 2, 2, 2, 669, 667, 3, 2, 2, 2,
	669, 670, 3, 2, 2, 2, 670, 673, 3, 2, 2, 2, 671, 669, 3, 2, 2, 2, 672,
	674, 5, 30, 16, 2, 673, 672, 3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674, 677,
	3, 2, 2, 2, 675, 676, 7, 78, 2, 2, 676, 678, 5, 220, 111, 2, 677, 675,
	3, 2, 2, 2, 677, 678, 3, 2, 2, 2, 678, 692, 3, 2, 2, 2, 679, 690, 7, 190,
	2, 2, 680, 691, 5, 184, 93, 2, 681, 682, 7, 40, 2, 2, 682, 688, 7, 112,
	2, 2, 683, 685, 7, 268, 2, 2, 684, 683, 3, 2, 2, 2, 684, 685, 3, 2, 2,
	2, 685, 686, 3, 2, 2, 2, 686, 689, 5, 308, 155, 2, 687, 689, 7, 404, 2,
	2, 688, 684, 3, 2, 2, 2, 688, 687, 3, 2, 2, 2, 689, 691, 3, 2, 2, 2, 690,
	680, 3, 2, 2, 2, 690, 681, 3, 2, 2, 2, 691, 693, 3, 2, 2, 2, 692, 679,
	3, 2, 2, 2, 692, 693, 3, 2, 2, 2, 693, 695, 3, 2, 2, 2, 694, 696, 5, 202,
	102, 2, 695, 694, 3, 2, 2, 2, 695, 696, 3, 2, 2, 2, 696, 698, 3, 2, 2,
	2, 697, 699, 5, 210, 106, 2, 698, 697, 3, 2, 2, 2, 698, 699, 3, 2, 2, 2,
	699, 701, 3, 2, 2, 2, 700, 702, 7, 431, 2, 2, 701, 700, 3, 2, 2, 2, 701,
	702, 3, 2, 2, 2, 702, 29, 3, 2, 2, 2, 703, 704, 7, 325, 2, 2, 704, 709,
	5, 32, 17, 2, 705, 706, 7, 430, 2, 2, 706, 708, 5, 32, 17, 2, 707, 705,
	3, 2, 2, 2, 708, 711, 3, 2, 2, 2, 709, 707, 3, 2, 2, 2, 709, 710, 3, 2,
	2, 2, 710, 723, 3, 2, 2, 2, 711, 709, 3, 2, 2, 2, 712, 715, 7, 94, 2, 2,
	713, 716, 7, 404, 2, 2, 714, 716, 5, 296, 149, 2, 715, 713, 3, 2, 2, 2,
	715, 714, 3, 2, 2, 2, 716, 721, 3, 2, 2, 2, 717, 718, 7, 428, 2, 2, 718,
	719, 5, 306, 154, 2, 719, 720, 7, 429, 2, 2, 720, 722, 3, 2, 2, 2, 721,
	717, 3, 2, 2, 2, 721, 722, 3, 2, 2, 2, 722, 724, 3, 2, 2, 2, 723, 712,
	3, 2, 2, 2, 723, 724, 3, 2, 2, 2, 724, 31, 3, 2, 2, 2, 725, 728, 5, 34,
	18, 2, 726, 728, 5, 172, 87, 2, 727, 725, 3, 2, 2, 2, 727, 726, 3, 2, 2,
	2, 728, 733, 3, 2, 2, 2, 729, 731, 7, 9, 2, 2, 730, 729, 3, 2, 2, 2, 730,
	731, 3, 2, 2, 2, 731, 732, 3, 2, 2, 2, 732, 734, 5, 260, 131, 2, 733, 730,
	3, 2, 2, 2, 733, 734, 3, 2, 2, 2, 734, 33, 3, 2, 2, 2, 735, 739, 7, 244,
	2, 2, 736, 739, 7, 281, 2, 2, 737, 739, 5, 296, 149, 2, 738, 735, 3, 2,
	2, 2, 738, 736, 3, 2, 2, 2, 738, 737, 3, 2, 2, 2, 739, 740, 3, 2, 2, 2,
	740, 743, 7, 423, 2, 2, 741, 744, 7, 433, 2, 2, 742, 744, 5, 326, 164,
	2, 743, 741, 3, 2, 2, 2, 743, 742, 3, 2, 2, 2, 744, 747, 3, 2, 2, 2, 745,
	747, 7, 398, 2, 2, 746, 738, 3, 2, 2, 2, 746, 745, 3, 2, 2, 2, 747, 35,
	3, 2, 2, 2, 748, 749, 7, 38, 2, 2, 749, 750, 7, 46, 2, 2, 750, 754, 5,
	326, 164, 2, 751, 752, 7, 33, 2, 2, 752, 753, 7, 411, 2, 2, 753, 755, 9,
	6, 2, 2, 754, 751, 3, 2, 2, 2, 754, 755, 3, 2, 2, 2, 755, 768, 3, 2, 2,
	2, 756, 758, 7, 115, 2, 2, 757, 759, 7, 131, 2, 2, 758, 757, 3, 2, 2, 2,
	758, 759, 3, 2, 2, 2, 759, 760, 3, 2, 2, 2, 760, 765, 5, 288, 145, 2, 761,
	762, 7, 430, 2, 2, 762, 764, 5, 288, 145, 2, 763, 761, 3, 2, 2, 2, 764,
	767, 3, 2, 2, 2, 765, 763, 3, 2, 2, 2, 765, 766, 3, 2, 2, 2, 766, 769,
	3, 2, 2, 2, 767, 765, 3, 2, 2, 2, 768, 756, 3, 2, 2, 2, 768, 769, 3, 2,
	2, 2, 769, 780, 3, 2, 2, 2, 770, 771, 7, 103, 2, 2, 771, 772, 7, 115, 2,
	2, 772, 777, 5, 288, 145, 2, 773, 774, 7, 430, 2, 2, 774, 776, 5, 288,
	145, 2, 775, 773, 3, 2, 2, 2, 776, 779, 3, 2, 2, 2, 777, 775, 3, 2, 2,
	2, 777, 778, 3, 2, 2, 2, 778, 781, 3, 2, 2, 2, 779, 777, 3, 2, 2, 2, 780,
	770, 3, 2, 2, 2, 780, 781, 3, 2, 2, 2, 781, 784, 3, 2, 2, 2, 782, 783,
	7, 28, 2, 2, 783, 785, 5, 326, 164, 2, 784, 782, 3, 2, 2, 2, 784, 785,
	3, 2, 2, 2, 785, 795, 3, 2, 2, 2, 786, 787, 7, 192, 2, 2, 787, 792, 5,
	284, 143, 2, 788, 789, 7, 430, 2, 2, 789, 791, 5, 284, 143, 2, 790, 788,
	3, 2, 2, 2, 791, 794, 3, 2, 2, 2, 792, 790, 3, 2, 2, 2, 792, 793, 3, 2,
	2, 2, 793, 796, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 795, 786, 3, 2, 2, 2,
	795, 796, 3, 2, 2, 2, 796, 37, 3, 2, 2, 2, 797, 799, 7, 38, 2, 2, 798,
	800, 7, 179, 2, 2, 799, 798, 3, 2, 2, 2, 799, 800, 3, 2, 2, 2, 800, 802,
	3, 2, 2, 2, 801, 803, 5, 312, 157, 2, 802, 801, 3, 2, 2, 2, 802, 803, 3,
	2, 2, 2, 803, 804, 3, 2, 2, 2, 804, 805, 7, 90, 2, 2, 805, 806, 5, 326,
	164, 2, 806, 807, 7, 115, 2, 2, 807, 808, 5, 232, 117, 2, 808, 809, 7,
	428, 2, 2, 809, 811, 5, 306, 154, 2, 810, 812, 9, 7, 2, 2, 811, 810, 3,
	2, 2, 2, 811, 812, 3, 2, 2, 2, 812, 813, 3, 2, 2, 2, 813, 815, 7, 429,
	2, 2, 814, 816, 5, 158, 80, 2, 815, 814, 3, 2, 2, 2, 815, 816, 3, 2, 2,
	2, 816, 819, 3, 2, 2, 2, 817, 818, 7, 115, 2, 2, 818, 820, 5, 326, 164,
	2, 819, 817, 3, 2, 2, 2, 819, 820, 3, 2, 2, 2, 820, 822, 3, 2, 2, 2, 821,
	823, 7, 431, 2, 2, 822, 821, 3, 2, 2, 2, 822, 823, 3, 2, 2, 2, 823, 39,
	3, 2, 2, 2, 824, 825, 7, 38, 2, 2, 825, 826, 9, 8, 2, 2, 826, 829, 5, 300,
	151, 2, 827, 828, 7, 431, 2, 2, 828, 830, 7, 405, 2, 2, 829, 827, 3, 2,
	2, 2, 829, 830, 3, 2, 2, 2, 830, 845, 3, 2, 2, 2, 831, 833, 7, 428, 2,
	2, 832, 831, 3, 2, 2, 2, 832, 833, 3, 2, 2, 2, 833, 834, 3, 2, 2, 2, 834,
	839, 5, 42, 22, 2, 835, 836, 7, 430, 2, 2, 836, 838, 5, 42, 22, 2, 837,
	835, 3, 2, 2, 2, 838, 841, 3, 2, 2, 2, 839, 837, 3, 2, 2, 2, 839, 840,
	3, 2, 2, 2, 840, 843, 3, 2, 2, 2, 841, 839, 3, 2, 2, 2, 842, 844, 7, 429,
	2, 2, 843, 842, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 846, 3, 2, 2, 2,
	845, 832, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 856, 3, 2, 2, 2, 847,
	848, 7, 192, 2, 2, 848, 853, 5, 44, 23, 2, 849, 850, 7, 430, 2, 2, 850,
	852, 5, 44, 23, 2, 851, 849, 3, 2, 2, 2, 852, 855, 3, 2, 2, 2, 853, 851,
	3, 2, 2, 2, 853, 854, 3, 2, 2, 2, 854, 857, 3, 2, 2, 2, 855, 853, 3, 2,
	2, 2, 856, 847, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2, 857, 860, 3, 2, 2, 2,
	858, 859, 7, 73, 2, 2, 859, 861, 7, 141, 2, 2, 860, 858, 3, 2, 2, 2, 860,
	861, 3, 2, 2, 2, 861, 862, 3, 2, 2, 2, 862, 863, 7, 9, 2, 2, 863, 864,
	5, 6, 4, 2, 864, 41, 3, 2, 2, 2, 865, 869, 7, 404, 2, 2, 866, 867, 5, 326,
	164, 2, 867, 868, 7, 423, 2, 2, 868, 870, 3, 2, 2, 2, 869, 866, 3, 2, 2,
	2, 869, 870, 3, 2, 2, 2, 870, 872, 3, 2, 2, 2, 871, 873, 7, 9, 2, 2, 872,
	871, 3, 2, 2, 2, 872, 873, 3, 2, 2, 2, 873, 874, 3, 2, 2, 2, 874, 876,
	5, 318, 160, 2, 875, 877, 7, 186, 2, 2, 876, 875, 3, 2, 2, 2, 876, 877,
	3, 2, 2, 2, 877, 880, 3, 2, 2, 2, 878, 879, 7, 411, 2, 2, 879, 881, 5,
	320, 161, 2, 880, 878, 3, 2, 2, 2, 880, 881, 3, 2, 2, 2, 881, 883, 3, 2,
	2, 2, 882, 884, 9, 9, 2, 2, 883, 882, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2,
	884, 43, 3, 2, 2, 2, 885, 889, 7, 253, 2, 2, 886, 889, 7, 341, 2, 2, 887,
	889, 5, 142, 72, 2, 888, 885, 3, 2, 2, 2, 888, 886, 3, 2, 2, 2, 888, 887,
	3, 2, 2, 2, 889, 45, 3, 2, 2, 2, 890, 891, 7, 38, 2, 2, 891, 892, 7, 164,
	2, 2, 892, 893, 5, 326, 164, 2, 893, 894, 7, 115, 2, 2, 894, 895, 5, 232,
	117, 2, 895, 896, 7, 428, 2, 2, 896, 897, 5, 306, 154, 2, 897, 916, 7,
	429, 2, 2, 898, 904, 7, 192, 2, 2, 899, 905, 7, 266, 2, 2, 900, 901, 7,
	354, 2, 2, 901, 902, 7, 405, 2, 2, 902, 905, 9, 10, 2, 2, 903, 905, 7,
	368, 2, 2, 904, 899, 3, 2, 2, 2, 904, 900, 3, 2, 2, 2, 904, 903, 3, 2,
	2, 2, 905, 908, 3, 2, 2, 2, 906, 907, 7, 430, 2, 2, 907, 909, 7, 313, 2,
	2, 908, 906, 3, 2, 2, 2, 908, 909, 3, 2, 2, 2, 909, 914, 3, 2, 2, 2, 910,
	911, 7, 430, 2, 2, 911, 912, 7, 279, 2, 2, 912, 913, 7, 411, 2, 2, 913,
	915, 5, 310, 156, 2, 914, 910, 3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915, 917,
	3, 2, 2, 2, 916, 898, 3, 2, 2, 2, 916, 917, 3, 2, 2, 2, 917, 919, 3, 2,
	2, 2, 918, 920, 7, 431, 2, 2, 919, 918, 3, 2, 2, 2, 919, 920, 3, 2, 2,
	2, 920, 47, 3, 2, 2, 2, 921, 922, 7, 38, 2, 2, 922, 923, 7, 166, 2, 2,
	923, 924, 5, 296, 149, 2, 924, 925, 7, 428, 2, 2, 925, 927, 5, 148, 75,
	2, 926, 928, 7, 430, 2, 2, 927, 926, 3, 2, 2, 2, 927, 928, 3, 2, 2, 2,
	928, 929, 3, 2, 2, 2, 929, 933, 7, 429, 2, 2, 930, 931, 7, 115, 2, 2, 931,
	934, 5, 326, 164, 2, 932, 934, 7, 50, 2, 2, 933, 930, 3, 2, 2, 2, 933,
	932, 3, 2, 2, 2, 933, 934, 3, 2, 2, 2, 934, 938, 3, 2, 2, 2, 935, 936,
	7, 375, 2, 2, 936, 939, 5, 326, 164, 2, 937, 939, 7, 50, 2, 2, 938, 935,
	3, 2, 2, 2, 938, 937, 3, 2, 2, 2, 938, 939, 3, 2, 2, 2, 939, 941, 3, 2,
	2, 2, 940, 942, 7, 431, 2, 2, 941, 940, 3, 2, 2, 2, 941, 942, 3, 2, 2,
	2, 942, 49, 3, 2, 2, 2, 943, 944, 7, 38, 2, 2, 944, 945, 7, 187, 2, 2,
	945, 950, 5, 298, 150, 2, 946, 947, 7, 428, 2, 2, 947, 948, 5, 306, 154,
	2, 948, 949, 7, 429, 2, 2, 949, 951, 3, 2, 2, 2, 950, 946, 3, 2, 2, 2,
	950, 951, 3, 2, 2, 2, 951, 961, 3, 2, 2, 2, 952, 953, 7, 192, 2, 2, 953,
	958, 5, 52, 27, 2, 954, 955, 7, 430, 2, 2, 955, 957, 5, 52, 27, 2, 956,
	954, 3, 2, 2, 2, 957, 960, 3, 2, 2, 2, 958, 956, 3, 2, 2, 2, 958, 959,
	3, 2, 2, 2, 959, 962, 3, 2, 2, 2, 960, 958, 3, 2, 2, 2, 961, 952, 3, 2,
	2, 2, 961, 962, 3, 2, 2, 2, 962, 963, 3, 2, 2, 2, 963, 964, 7, 9, 2, 2,
	964, 968, 5, 26, 14, 2, 965, 966, 7, 192, 2, 2, 966, 967, 7, 23, 2, 2,
	967, 969, 7, 121, 2, 2, 968, 965, 3, 2, 2, 2, 968, 969, 3, 2, 2, 2, 969,
	971, 3, 2, 2, 2, 970, 972, 7, 431, 2, 2, 971, 970, 3, 2, 2, 2, 971, 972,
	3, 2, 2, 2, 972, 51, 3, 2, 2, 2, 973, 974, 9, 11, 2, 2, 974, 53, 3, 2,
	2, 2, 975, 976, 7, 6, 2, 2, 976, 977, 7, 166, 2, 2, 977, 1008, 5, 296,
	149, 2, 978, 979, 7, 160, 2, 2, 979, 980, 7, 428, 2, 2, 980, 981, 7, 290,
	2, 2, 981, 982, 7, 411, 2, 2, 982, 983, 9, 12, 2, 2, 983, 1009, 7, 429,
	2, 2, 984, 985, 7, 4, 2, 2, 985, 1009, 5, 150, 76, 2, 986, 987, 7, 58,
	2, 2, 987, 988, 7, 32, 2, 2, 988, 1009, 5, 326, 164, 2, 989, 990, 7, 192,
	2, 2, 990, 991, 7, 23, 2, 2, 991, 992, 7, 4, 2, 2, 992, 993, 7, 32, 2,
	2, 993, 994, 5, 326, 164, 2, 994, 995, 7, 75, 2, 2, 995, 996, 7, 97, 2,
	2, 996, 997, 7, 428, 2, 2, 997, 998, 5, 306, 154, 2, 998, 999, 7, 429,
	2, 2, 999, 1000, 7, 140, 2, 2, 1000, 1001, 5, 296, 149, 2, 1001, 1002,
	7, 428, 2, 2, 1002, 1003, 5, 306, 154, 2, 1003, 1004, 7, 429, 2, 2, 1004,
	1009, 3, 2, 2, 2, 1005, 1006, 7, 23, 2, 2, 1006, 1007, 7, 32, 2, 2, 1007,
	1009, 5, 326, 164, 2, 1008, 978, 3, 2, 2, 2, 1008, 984, 3, 2, 2, 2, 1008,
	986, 3, 2, 2, 2, 1008, 989, 3, 2, 2, 2, 1008, 1005, 3, 2, 2, 2, 1009, 1011,
	3, 2, 2, 2, 1010, 1012, 7, 431, 2, 2, 1011, 1010, 3, 2, 2, 2, 1011, 1012,
	3, 2, 2, 2, 1012, 55, 3, 2, 2, 2, 1013, 1014, 7, 6, 2, 2, 1014, 1017, 7,
	46, 2, 2, 1015, 1018, 5, 326, 164, 2, 1016, 1018, 7, 40, 2, 2, 1017, 1015,
	3, 2, 2, 2, 1017, 1016, 3, 2, 2, 2, 1018, 1031, 3, 2, 2, 2, 1019, 1020,
	7, 304, 2, 2, 1020, 1021, 7, 306, 2, 2, 1021, 1022, 7, 411, 2, 2, 1022,
	1032, 5, 326, 164, 2, 1023, 1024, 7, 28, 2, 2, 1024, 1032, 5, 326, 164,
	2, 1025, 1026, 7, 160, 2, 2, 1026, 1029, 5, 58, 30, 2, 1027, 1028, 7, 192,
	2, 2, 1028, 1030, 5, 98, 50, 2, 1029, 1027, 3, 2, 2, 2, 1029, 1030, 3,
	2, 2, 2, 1030, 1032, 3, 2, 2, 2, 1031, 1019, 3, 2, 2, 2, 1031, 1023, 3,
	2, 2, 2, 1031, 1025, 3, 2, 2, 2, 1032, 1034, 3, 2, 2, 2, 1033, 1035, 7,
	431, 2, 2, 1034, 1033, 3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 57, 3,
	2, 2, 2, 1036, 1059, 5, 60, 31, 2, 1037, 1059, 5, 62, 32, 2, 1038, 1059,
	5, 66, 34, 2, 1039, 1059, 5, 68, 35, 2, 1040, 1059, 5, 70, 36, 2, 1041,
	1059, 5, 72, 37, 2, 1042, 1059, 5, 74, 38, 2, 1043, 1059, 5, 76, 39, 2,
	1044, 1059, 5, 78, 40, 2, 1045, 1059, 5, 80, 41, 2, 1046, 1059, 5, 82,
	42, 2, 1047, 1048, 7, 260, 2, 2, 1048, 1059, 5, 286, 144, 2, 1049, 1059,
	7, 3, 2, 2, 1050, 1059, 5, 84, 43, 2, 1051, 1059, 5, 86, 44, 2, 1052, 1059,
	5, 88, 45, 2, 1053, 1059, 5, 90, 46, 2, 1054, 1059, 5, 92, 47, 2, 1055,
	1059, 5, 94, 48, 2, 1056, 1059, 5, 96, 49, 2, 1057, 1059, 5, 98, 50, 2,
	1058, 1036, 3, 2, 2, 2, 1058, 1037, 3, 2, 2, 2, 1058, 1038, 3, 2, 2, 2,
	1058, 1039, 3, 2, 2, 2, 1058, 1040, 3, 2, 2, 2, 1058, 1041, 3, 2, 2, 2,
	1058, 1042, 3, 2, 2, 2, 1058, 1043, 3, 2, 2, 2, 1058, 1044, 3, 2, 2, 2,
	1058, 1045, 3, 2, 2, 2, 1058, 1046, 3, 2, 2, 2, 1058, 1047, 3, 2, 2, 2,
	1058, 1049, 3, 2, 2, 2, 1058, 1050, 3, 2, 2, 2, 1058, 1051, 3, 2, 2, 2,
	1058, 1052, 3, 2, 2, 2, 1058, 1053, 3, 2, 2, 2, 1058, 1054, 3, 2, 2, 2,
	1058, 1055, 3, 2, 2, 2, 1058, 1056, 3, 2, 2, 2, 1058, 1057, 3, 2, 2, 2,
	1059, 59, 3, 2, 2, 2, 1060, 1061, 7, 207, 2, 2, 1061, 1078, 5, 310, 156,
	2, 1062, 1063, 7, 208, 2, 2, 1063, 1078, 7, 113, 2, 2, 1064, 1069, 7, 115,
	2, 2, 1065, 1066, 7, 279, 2, 2, 1066, 1067, 7, 411, 2, 2, 1067, 1070, 7,
	115, 2, 2, 1068, 1070, 7, 113, 2, 2, 1069, 1065, 3, 2, 2, 2, 1069, 1068,
	3, 2, 2, 2, 1070, 1078, 3, 2, 2, 2, 1071, 1072, 7, 209, 2, 2, 1072, 1078,
	5, 310, 156, 2, 1073, 1074, 7, 210, 2, 2, 1074, 1078, 5, 310, 156, 2, 1075,
	1076, 7, 211, 2, 2, 1076, 1078, 9, 13, 2, 2, 1077, 1060, 3, 2, 2, 2, 1077,
	1062, 3, 2, 2, 2, 1077, 1064, 3, 2, 2, 2, 1077, 1071, 3, 2, 2, 2, 1077,
	1073, 3, 2, 2, 2, 1077, 1075, 3, 2, 2, 2, 1078, 61, 3, 2, 2, 2, 1079, 1080,
	7, 220, 2, 2, 1080, 1096, 7, 411, 2, 2, 1081, 1097, 7, 113, 2, 2, 1082,
	1093, 7, 115, 2, 2, 1083, 1088, 5, 64, 33, 2, 1084, 1085, 7, 430, 2, 2,
	1085, 1087, 5, 64, 33, 2, 1086, 1084, 3, 2, 2, 2, 1087, 1090, 3, 2, 2,
	2, 1088, 1086, 3, 2, 2, 2, 1088, 1089, 3, 2, 2, 2, 1089, 1092, 3, 2, 2,
	2, 1090, 1088, 3, 2, 2, 2, 1091, 1083, 3, 2, 2, 2, 1092, 1095, 3, 2, 2,
	2, 1093, 1091, 3, 2, 2, 2, 1093, 1094, 3, 2, 2, 2, 1094, 1097, 3, 2, 2,
	2, 1095, 1093, 3, 2, 2, 2, 1096, 1081, 3, 2, 2, 2, 1096, 1082, 3, 2, 2,
	2, 1097, 63, 3, 2, 2, 2, 1098, 1099, 7, 206, 2, 2, 1099, 1100, 7, 411,
	2, 2, 1100, 1105, 5, 310, 156, 2, 1101, 1102, 7, 219, 2, 2, 1102, 1103,
	7, 411, 2, 2, 1103, 1105, 9, 14, 2, 2, 1104, 1098, 3, 2, 2, 2, 1104, 1101,
	3, 2, 2, 2, 1105, 65, 3, 2, 2, 2, 1106, 1107, 7, 33, 2, 2, 1107, 1108,
	7, 411, 2, 2, 1108, 1109, 9, 6, 2, 2, 1109, 67, 3, 2, 2, 2, 1110, 1111,
	7, 231, 2, 2, 1111, 1115, 5, 310, 156, 2, 1112, 1113, 7, 232, 2, 2, 1113,
	1115, 9, 15, 2, 2, 1114, 1110, 3, 2, 2, 2, 1114, 1112, 3, 2, 2, 2, 1115,
	69, 3, 2, 2, 2, 1116, 1117, 7, 237, 2, 2, 1117, 1118, 5, 310, 156, 2, 1118,
	71, 3, 2, 2, 2, 1119, 1120, 7, 253, 2, 2, 1120, 1121, 5, 310, 156, 2, 1121,
	73, 3, 2, 2, 2, 1122, 1123, 9, 16, 2, 2, 1123, 75, 3, 2, 2, 2, 1124, 1125,
	9, 17, 2, 2, 1125, 77, 3, 2, 2, 2, 1126, 1127, 9, 18, 2, 2, 1127, 79, 3,
	2, 2, 2, 1128, 1129, 7, 243, 2, 2, 1129, 1130, 7, 411, 2, 2, 1130, 1131,
	9, 19, 2, 2, 1131, 81, 3, 2, 2, 2, 1132, 1133, 7, 239, 2, 2, 1133, 1158,
	5, 310, 156, 2, 1134, 1135, 7, 381, 2, 2, 1135, 1158, 5, 310, 156, 2, 1136,
	1137, 7, 241, 2, 2, 1137, 1140, 7, 411, 2, 2, 1138, 1141, 5, 326, 164,
	2, 1139, 1141, 7, 407, 2, 2, 1140, 1138, 3, 2, 2, 2, 1140, 1139, 3, 2,
	2, 2, 1141, 1158, 3, 2, 2, 2, 1142, 1143, 7, 240, 2, 2, 1143, 1146, 7,
	411, 2, 2, 1144, 1147, 5, 326, 164, 2, 1145, 1147, 7, 407, 2, 2, 1146,
	1144, 3, 2, 2, 2, 1146, 1145, 3, 2, 2, 2, 1147, 1158, 3, 2, 2, 2, 1148,
	1149, 7, 307, 2, 2, 1149, 1150, 7, 411, 2, 2, 1150, 1158, 9, 13, 2, 2,
	1151, 1152, 7, 380, 2, 2, 1152, 1153, 7, 411, 2, 2, 1153, 1158, 9, 13,
	2, 2, 1154, 1155, 7, 383, 2, 2, 1155, 1156, 7, 411, 2, 2, 1156, 1158, 7,
	405, 2, 2, 1157, 1132, 3, 2, 2, 2, 1157, 1134, 3, 2, 2, 2, 1157, 1136,
	3, 2, 2, 2, 1157, 1142, 3, 2, 2, 2, 1157, 1148, 3, 2, 2, 2, 1157, 1151,
	3, 2, 2, 2, 1157, 1154, 3, 2, 2, 2, 1158, 83, 3, 2, 2, 2, 1159, 1160, 7,
	303, 2, 2, 1160, 1161, 9, 13, 2, 2, 1161, 85, 3, 2, 2, 2, 1162, 1163, 7,
	328, 2, 2, 1163, 1164, 9, 20, 2, 2, 1164, 87, 3, 2, 2, 2, 1165, 1166, 7,
	342, 2, 2, 1166, 1172, 9, 21, 2, 2, 1167, 1168, 7, 379, 2, 2, 1168, 1172,
	5, 310, 156, 2, 1169, 1170, 7, 327, 2, 2, 1170, 1172, 9, 22, 2, 2, 1171,
	1165, 3, 2, 2, 2, 1171, 1167, 3, 2, 2, 2, 1171, 1169, 3, 2, 2, 2, 1172,
	89, 3, 2, 2, 2, 1173, 1180, 7, 252, 2, 2, 1174, 1180, 7, 249, 2, 2, 1175,
	1180, 7, 308, 2, 2, 1176, 1180, 7, 254, 2, 2, 1177, 1178, 7, 274, 2, 2,
	1178, 1180, 5, 310, 156, 2, 1179, 1173, 3, 2, 2, 2, 1179, 1174, 3, 2, 2,
	2, 1179, 1175, 3, 2, 2, 2, 1179, 1176, 3, 2, 2, 2, 1179, 1177, 3, 2, 2,
	2, 1180, 91, 3, 2, 2, 2, 1181, 1182, 7, 198, 2, 2, 1182, 1187, 5, 310,
	156, 2, 1183, 1184, 7, 338, 2, 2, 1184, 1187, 9, 13, 2, 2, 1185, 1187,
	9, 13, 2, 2, 1186, 1181, 3, 2, 2, 2, 1186, 1183, 3, 2, 2, 2, 1186, 1185,
	3, 2, 2, 2, 1187, 93, 3, 2, 2, 2, 1188, 1189, 7, 200, 2, 2, 1189, 1210,
	5, 310, 156, 2, 1190, 1191, 7, 199, 2, 2, 1191, 1210, 5, 310, 156, 2, 1192,
	1193, 7, 201, 2, 2, 1193, 1210, 5, 310, 156, 2, 1194, 1195, 7, 202, 2,
	2, 1195, 1210, 5, 310, 156, 2, 1196, 1197, 7, 204, 2, 2, 1197, 1210, 5,
	310, 156, 2, 1198, 1199, 7, 224, 2, 2, 1199, 1200, 7, 411, 2, 2, 1200,
	1210, 7, 405, 2, 2, 1201, 1202, 7, 226, 2, 2, 1202, 1210, 5, 310, 156,
	2, 1203, 1204, 7, 317, 2, 2, 1204, 1210, 5, 310, 156, 2, 1205, 1206, 7,
	334, 2, 2, 1206, 1210, 5, 310, 156, 2, 1207, 1208, 7, 343, 2, 2, 1208,
	1210, 5, 310, 156, 2, 1209, 1188, 3, 2, 2, 2, 1209, 1190, 3, 2, 2, 2, 1209,
	1192, 3, 2, 2, 2, 1209, 1194, 3, 2, 2, 2, 1209, 1196, 3, 2, 2, 2, 1209,
	1198, 3, 2, 2, 2, 1209, 1201, 3, 2, 2, 2, 1209, 1203, 3, 2, 2, 2, 1209,
	1205, 3, 2, 2, 2, 1209, 1207, 3, 2, 2, 2, 1210, 95, 3, 2, 2, 2, 1211, 1212,
	7, 373, 2, 2, 1212, 1213, 7, 411, 2, 2, 1213, 1214, 7, 405, 2, 2, 1214,
	1215, 9, 23, 2, 2, 1215, 97, 3, 2, 2, 2, 1216, 1217, 7, 148, 2, 2, 1217,
	1218, 7, 196, 2, 2, 1218, 1223, 7, 405, 2, 2, 1219, 1220, 7, 148, 2, 2,
	1220, 1223, 7, 277, 2, 2, 1221, 1223, 7, 314, 2, 2, 1222, 1216, 3, 2, 2,
	2, 1222, 1219, 3, 2, 2, 2, 1222, 1221, 3, 2, 2, 2, 1223, 99, 3, 2, 2, 2,
	1224, 1225, 7, 58, 2, 2, 1225, 1228, 7, 90, 2, 2, 1226, 1227, 7, 88, 2,
	2, 1227, 1229, 7, 66, 2, 2, 1228, 1226, 3, 2, 2, 2, 1228, 1229, 3, 2, 2,
	2, 1229, 1230, 3, 2, 2, 2, 1230, 1233, 5, 326, 164, 2, 1231, 1232, 7, 115,
	2, 2, 1232, 1234, 5, 296, 149, 2, 1233, 1231, 3, 2, 2, 2, 1233, 1234, 3,
	2, 2, 2, 1234, 1236, 3, 2, 2, 2, 1235, 1237, 7, 431, 2, 2, 1236, 1235,
	3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2, 1237, 101, 3, 2, 2, 2, 1238, 1239,
	7, 58, 2, 2, 1239, 1242, 7, 134, 2, 2, 1240, 1241, 7, 88, 2, 2, 1241, 1243,
	7, 66, 2, 2, 1242, 1240, 3, 2, 2, 2, 1242, 1243, 3, 2, 2, 2, 1243, 1244,
	3, 2, 2, 2, 1244, 1246, 5, 300, 151, 2, 1245, 1247, 7, 431, 2, 2, 1246,
	1245, 3, 2, 2, 2, 1246, 1247, 3, 2, 2, 2, 1247, 103, 3, 2, 2, 2, 1248,
	1249, 7, 58, 2, 2, 1249, 1253, 7, 164, 2, 2, 1250, 1251, 5, 296, 149, 2,
	1251, 1252, 7, 423, 2, 2, 1252, 1254, 3, 2, 2, 2, 1253, 1250, 3, 2, 2,
	2, 1253, 1254, 3, 2, 2, 2, 1254, 1255, 3, 2, 2, 2, 1255, 1256, 5, 326,
	164, 2, 1256, 1257, 7, 431, 2, 2, 1257, 105, 3, 2, 2, 2, 1258, 1259, 7,
	58, 2, 2, 1259, 1262, 7, 166, 2, 2, 1260, 1261, 7, 88, 2, 2, 1261, 1263,
	7, 66, 2, 2, 1262, 1260, 3, 2, 2, 2, 1262, 1263, 3, 2, 2, 2, 1263, 1264,
	3, 2, 2, 2, 1264, 1266, 5, 296, 149, 2, 1265, 1267, 7, 431, 2, 2, 1266,
	1265, 3, 2, 2, 2, 1266, 1267, 3, 2, 2, 2, 1267, 107, 3, 2, 2, 2, 1268,
	1269, 7, 58, 2, 2, 1269, 1272, 7, 187, 2, 2, 1270, 1271, 7, 88, 2, 2, 1271,
	1273, 7, 66, 2, 2, 1272, 1270, 3, 2, 2, 2, 1272, 1273, 3, 2, 2, 2, 1273,
	1274, 3, 2, 2, 2, 1274, 1279, 5, 298, 150, 2, 1275, 1276, 7, 430, 2, 2,
	1276, 1278, 5, 298, 150, 2, 1277, 1275, 3, 2, 2, 2, 1278, 1281, 3, 2, 2,
	2, 1279, 1277, 3, 2, 2, 2, 1279, 1280, 3, 2, 2, 2, 1280, 1283, 3, 2, 2,
	2, 1281, 1279, 3, 2, 2, 2, 1282, 1284, 7, 431, 2, 2, 1283, 1282, 3, 2,
	2, 2, 1283, 1284, 3, 2, 2, 2, 1284, 109, 3, 2, 2, 2, 1285, 1286, 7, 38,
	2, 2, 1286, 1287, 7, 384, 2, 2, 1287, 1288, 5, 298, 150, 2, 1288, 1289,
	7, 78, 2, 2, 1289, 1290, 5, 318, 160, 2, 1290, 1291, 5, 320, 161, 2, 1291,
	111, 3, 2, 2, 2, 1292, 1293, 7, 58, 2, 2, 1293, 1296, 7, 384, 2, 2, 1294,
	1295, 7, 88, 2, 2, 1295, 1297, 7, 66, 2, 2, 1296, 1294, 3, 2, 2, 2, 1296,
	1297, 3, 2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1299, 5, 298, 150, 2, 1299,
	113, 3, 2, 2, 2, 1300, 1303, 5, 116, 59, 2, 1301, 1303, 5, 118, 60, 2,
	1302, 1300, 3, 2, 2, 2, 1302, 1301, 3, 2, 2, 2, 1303, 115, 3, 2, 2, 2,
	1304, 1305, 7, 118, 2, 2, 1305, 1306, 7, 428, 2, 2, 1306, 1307, 5, 326,
	164, 2, 1307, 1308, 7, 430, 2, 2, 1308, 1309, 7, 407, 2, 2, 1309, 1310,
	7, 429, 2, 2, 1310, 117, 3, 2, 2, 2, 1311, 1312, 7, 117, 2, 2, 1312, 1313,
	7, 428, 2, 2, 1313, 1314, 7, 407, 2, 2, 1314, 1315, 7, 430, 2, 2, 1315,
	1316, 7, 407, 2, 2, 1316, 1317, 7, 429, 2, 2, 1317, 1319, 7, 423, 2, 2,
	1318, 1320, 5, 326, 164, 2, 1319, 1318, 3, 2, 2, 2, 1319, 1320, 3, 2, 2,
	2, 1320, 1321, 3, 2, 2, 2, 1321, 1323, 7, 423, 2, 2, 1322, 1324, 5, 326,
	164, 2, 1323, 1322, 3, 2, 2, 2, 1323, 1324, 3, 2, 2, 2, 1324, 1325, 3,
	2, 2, 2, 1325, 1326, 7, 423, 2, 2, 1326, 1327, 5, 326, 164, 2, 1327, 119,
	3, 2, 2, 2, 1328, 1329, 7, 49, 2, 2, 1329, 1331, 7, 404, 2, 2, 1330, 1332,
	7, 9, 2, 2, 1331, 1330, 3, 2, 2, 2, 1331, 1332, 3, 2, 2, 2, 1332, 1333,
	3, 2, 2, 2, 1333, 1335, 5, 146, 74, 2, 1334, 1336, 7, 431, 2, 2, 1335,
	1334, 3, 2, 2, 2, 1335, 1336, 3, 2, 2, 2, 1336, 1350, 3, 2, 2, 2, 1337,
	1338, 7, 49, 2, 2, 1338, 1343, 5, 144, 73, 2, 1339, 1340, 7, 430, 2, 2,
	1340, 1342, 5, 144, 73, 2, 1341, 1339, 3, 2, 2, 2, 1342, 1345, 3, 2, 2,
	2, 1343, 1341, 3, 2, 2, 2, 1343, 1344, 3, 2, 2, 2, 1344, 1347, 3, 2, 2,
	2, 1345, 1343, 3, 2, 2, 2, 1346, 1348, 7, 431, 2, 2, 1347, 1346, 3, 2,
	2, 2, 1347, 1348, 3, 2, 2, 2, 1348, 1350, 3, 2, 2, 2, 1349, 1328, 3, 2,
	2, 2, 1349, 1337, 3, 2, 2, 2, 1350, 121, 3, 2, 2, 2, 1351, 1353, 7, 25,
	2, 2, 1352, 1354, 7, 268, 2, 2, 1353, 1352, 3, 2, 2, 2, 1353, 1354, 3,
	2, 2, 2, 1354, 1355, 3, 2, 2, 2, 1355, 1357, 5, 308, 155, 2, 1356, 1358,
	7, 431, 2, 2, 1357, 1356, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1378,
	3, 2, 2, 2, 1359, 1361, 7, 48, 2, 2, 1360, 1362, 7, 268, 2, 2, 1361, 1360,
	3, 2, 2, 2, 1361, 1362, 3, 2, 2, 2, 1362, 1363, 3, 2, 2, 2, 1363, 1365,
	5, 308, 155, 2, 1364, 1366, 7, 431, 2, 2, 1365, 1364, 3, 2, 2, 2, 1365,
	1366, 3, 2, 2, 2, 1366, 1378, 3, 2, 2, 2, 1367, 1378, 5, 162, 82, 2, 1368,
	1378, 5, 166, 84, 2, 1369, 1371, 7, 116, 2, 2, 1370, 1372, 7, 268, 2, 2,
	1371, 1370, 3, 2, 2, 2, 1371, 1372, 3, 2, 2, 2, 1372, 1373, 3, 2, 2, 2,
	1373, 1375, 5, 308, 155, 2, 1374, 1376, 7, 431, 2, 2, 1375, 1374, 3, 2,
	2, 2, 1375, 1376, 3, 2, 2, 2, 1376, 1378, 3, 2, 2, 2, 1377, 1351, 3, 2,
	2, 2, 1377, 1359, 3, 2, 2, 2, 1377, 1367, 3, 2, 2, 2, 1377, 1368, 3, 2,
	2, 2, 1377, 1369, 3, 2, 2, 2, 1378, 123, 3, 2, 2, 2, 1379, 1382, 7, 65,
	2, 2, 1380, 1381, 7, 404, 2, 2, 1381, 1383, 7, 411, 2, 2, 1382, 1380, 3,
	2, 2, 2, 1382, 1383, 3, 2, 2, 2, 1383, 1384, 3, 2, 2, 2, 1384, 1393, 5,
	300, 151, 2, 1385, 1390, 5, 126, 64, 2, 1386, 1387, 7, 430, 2, 2, 1387,
	1389, 5, 126, 64, 2, 1388, 1386, 3, 2, 2, 2, 1389, 1392, 3, 2, 2, 2, 1390,
	1388, 3, 2, 2, 2, 1390, 1391, 3, 2, 2, 2, 1391, 1394, 3, 2, 2, 2, 1392,
	1390, 3, 2, 2, 2, 1393, 1385, 3, 2, 2, 2, 1393, 1394, 3, 2, 2, 2, 1394,
	1396, 3, 2, 2, 2, 1395, 1397, 7, 431, 2, 2, 1396, 1395, 3, 2, 2, 2, 1396,
	1397, 3, 2, 2, 2, 1397, 1421, 3, 2, 2, 2, 1398, 1399, 7, 65, 2, 2, 1399,
	1400, 7, 428, 2, 2, 1400, 1405, 5, 128, 65, 2, 1401, 1402, 7, 436, 2, 2,
	1402, 1404, 5, 128, 65, 2, 1403, 1401, 3, 2, 2, 2, 1404, 1407, 3, 2, 2,
	2, 1405, 1403, 3, 2, 2, 2, 1405, 1406, 3, 2, 2, 2, 1406, 1408, 3, 2, 2,
	2, 1407, 1405, 3, 2, 2, 2, 1408, 1415, 7, 429, 2, 2, 1409, 1411, 7, 9,
	2, 2, 1410, 1409, 3, 2, 2, 2, 1410, 1411, 3, 2, 2, 2, 1411, 1412, 3, 2,
	2, 2, 1412, 1413, 9, 24, 2, 2, 1413, 1414, 7, 411, 2, 2, 1414, 1416, 7,
	407, 2, 2, 1415, 1410, 3, 2, 2, 2, 1415, 1416, 3, 2, 2, 2, 1416, 1418,
	3, 2, 2, 2, 1417, 1419, 7, 431, 2, 2, 1418, 1417, 3, 2, 2, 2, 1418, 1419,
	3, 2, 2, 2, 1419, 1421, 3, 2, 2, 2, 1420, 1379, 3, 2, 2, 2, 1420, 1398,
	3, 2, 2, 2, 1421, 125, 3, 2, 2, 2, 1422, 1423, 7, 404, 2, 2, 1423, 1425,
	7, 411, 2, 2, 1424, 1422, 3, 2, 2, 2, 1424, 1425, 3, 2, 2, 2, 1425, 1435,
	3, 2, 2, 2, 1426, 1429, 5, 170, 86, 2, 1427, 1429, 5, 326, 164, 2, 1428,
	1426, 3, 2, 2, 2, 1428, 1427, 3, 2, 2, 2, 1429, 1431, 3, 2, 2, 2, 1430,
	1432, 9, 25, 2, 2, 1431, 1430, 3, 2, 2, 2, 1431, 1432, 3, 2, 2, 2, 1432,
	1436, 3, 2, 2, 2, 1433, 1436, 7, 50, 2, 2, 1434, 1436, 7, 110, 2, 2, 1435,
	1428, 3, 2, 2, 2, 1435, 1433, 3, 2, 2, 2, 1435, 1434, 3, 2, 2, 2, 1436,
	127, 3, 2, 2, 2, 1437, 1438, 9, 3, 2, 2, 1438, 129, 3, 2, 2, 2, 1439, 1441,
	5, 142, 72, 2, 1440, 1442, 7, 431, 2, 2, 1441, 1440, 3, 2, 2, 2, 1441,
	1442, 3, 2, 2, 2, 1442, 1488, 3, 2, 2, 2, 1443, 1455, 7, 82, 2, 2, 1444,
	1446, 7, 5, 2, 2, 1445, 1447, 7, 333, 2, 2, 1446, 1445, 3, 2, 2, 2, 1446,
	1447, 3, 2, 2, 2, 1447, 1456, 3, 2, 2, 2, 1448, 1453, 5, 132, 67, 2, 1449,
	1450, 7, 428, 2, 2, 1450, 1451, 5, 306, 154, 2, 1451, 1452, 7, 429, 2,
	2, 1452, 1454, 3, 2, 2, 2, 1453, 1449, 3, 2, 2, 2, 1453, 1454, 3, 2, 2,
	2, 1454, 1456, 3, 2, 2, 2, 1455, 1444, 3, 2, 2, 2, 1455, 1448, 3, 2, 2,
	2, 1456, 1459, 3, 2, 2, 2, 1457, 1458, 7, 115, 2, 2, 1458, 1460, 5, 296,
	149, 2, 1459, 1457, 3, 2, 2, 2, 1459, 1460, 3, 2, 2, 2, 1460, 1461, 3,
	2, 2, 2, 1461, 1462, 7, 170, 2, 2, 1462, 1466, 5, 326, 164, 2, 1463, 1464,
	7, 192, 2, 2, 1464, 1465, 7, 82, 2, 2, 1465, 1467, 7, 121, 2, 2, 1466,
	1463, 3, 2, 2, 2, 1466, 1467, 3, 2, 2, 2, 1467, 1470, 3, 2, 2, 2, 1468,
	1469, 7, 9, 2, 2, 1469, 1471, 5, 326, 164, 2, 1470, 1468, 3, 2, 2, 2, 1470,
	1471, 3, 2, 2, 2, 1471, 1473, 3, 2, 2, 2, 1472, 1474, 7, 431, 2, 2, 1473,
	1472, 3, 2, 2, 2, 1473, 1474, 3, 2, 2, 2, 1474, 1488, 3, 2, 2, 2, 1475,
	1482, 7, 145, 2, 2, 1476, 1477, 7, 428, 2, 2, 1477, 1478, 7, 192, 2, 2,
	1478, 1479, 7, 228, 2, 2, 1479, 1480, 7, 411, 2, 2, 1480, 1481, 7, 404,
	2, 2, 1481, 1483, 7, 429, 2, 2, 1482, 1476, 3, 2, 2, 2, 1482, 1483, 3,
	2, 2, 2, 1483, 1485, 3, 2, 2, 2, 1484, 1486, 7, 431, 2, 2, 1485, 1484,
	3, 2, 2, 2, 1485, 1486, 3, 2, 2, 2, 1486, 1488, 3, 2, 2, 2, 1487, 1439,
	3, 2, 2, 2, 1487, 1443, 3, 2, 2, 2, 1487, 1475, 3, 2, 2, 2, 1488, 131,
	3, 2, 2, 2, 1489, 1516, 7, 65, 2, 2, 1490, 1491, 7, 187, 2, 2, 1491, 1516,
	5, 326, 164, 2, 1492, 1493, 7, 372, 2, 2, 1493, 1516, 5, 326, 164, 2, 1494,
	1496, 7, 227, 2, 2, 1495, 1497, 5, 326, 164, 2, 1496, 1495, 3, 2, 2, 2,
	1496, 1497, 3, 2, 2, 2, 1497, 1516, 3, 2, 2, 2, 1498, 1499, 7, 38, 2, 2,
	1499, 1516, 9, 26, 2, 2, 1500, 1516, 7, 361, 2, 2, 1501, 1516, 7, 278,
	2, 2, 1502, 1516, 7, 155, 2, 2, 1503, 1516, 7, 140, 2, 2, 1504, 1516, 7,
	92, 2, 2, 1505, 1513, 7, 6, 2, 2, 1506, 1508, 7, 8, 2, 2, 1507, 1506, 3,
	2, 2, 2, 1507, 1508, 3, 2, 2, 2, 1508, 1511, 3, 2, 2, 2, 1509, 1512, 5,
	326, 164, 2, 1510, 1512, 7, 46, 2, 2, 1511, 1509, 3, 2, 2, 2, 1511, 1510,
	3, 2, 2, 2, 1512, 1514, 3, 2, 2, 2, 1513, 1507, 3, 2, 2, 2, 1513, 1514,
	3, 2, 2, 2, 1514, 1516, 3, 2, 2, 2, 1515, 1489, 3, 2, 2, 2, 1515, 1490,
	3, 2, 2, 2, 1515, 1492, 3, 2, 2, 2, 1515, 1494, 3, 2, 2, 2, 1515, 1498,
	3, 2, 2, 2, 1515, 1500, 3, 2, 2, 2, 1515, 1501, 3, 2, 2, 2, 1515, 1502,
	3, 2, 2, 2, 1515, 1503, 3, 2, 2, 2, 1515, 1504, 3, 2, 2, 2, 1515, 1505,
	3, 2, 2, 2, 1516, 133, 3, 2, 2, 2, 1517, 1518, 7, 160, 2, 2, 1518, 1521,
	7, 404, 2, 2, 1519, 1520, 7, 423, 2, 2, 1520, 1522, 5, 326, 164, 2, 1521,
	1519, 3, 2, 2, 2, 1521, 1522, 3, 2, 2, 2, 1522, 1523, 3, 2, 2, 2, 1523,
	1524, 7, 411, 2, 2, 1524, 1526, 5, 172, 87, 2, 1525, 1527, 7, 431, 2, 2,
	1526, 1525, 3, 2, 2, 2, 1526, 1527, 3, 2, 2, 2, 1527, 1557, 3, 2, 2, 2,
	1528, 1529, 7, 160, 2, 2, 1529, 1530, 7, 404, 2, 2, 1530, 1531, 5, 332,
	167, 2, 1531, 1533, 5, 172, 87, 2, 1532, 1534, 7, 431, 2, 2, 1533, 1532,
	3, 2, 2, 2, 1533, 1534, 3, 2, 2, 2, 1534, 1557, 3, 2, 2, 2, 1535, 1536,
	7, 160, 2, 2, 1536, 1537, 7, 404, 2, 2, 1537, 1538, 7, 411, 2, 2, 1538,
	1539, 7, 45, 2, 2, 1539, 1550, 5, 164, 83, 2, 1540, 1548, 7, 73, 2, 2,
	1541, 1542, 7, 137, 2, 2, 1542, 1549, 7, 321, 2, 2, 1543, 1546, 7, 181,
	2, 2, 1544, 1545, 7, 112, 2, 2, 1545, 1547, 5, 306, 154, 2, 1546, 1544,
	3, 2, 2, 2, 1546, 1547, 3, 2, 2, 2, 1547, 1549, 3, 2, 2, 2, 1548, 1541,
	3, 2, 2, 2, 1548, 1543, 3, 2, 2, 2, 1549, 1551, 3, 2, 2, 2, 1550, 1540,
	3, 2, 2, 2, 1550, 1551, 3, 2, 2, 2, 1551, 1553, 3, 2, 2, 2, 1552, 1554,
	7, 431, 2, 2, 1553, 1552, 3, 2, 2, 2, 1553, 1554, 3, 2, 2, 2, 1554, 1557,
	3, 2, 2, 2, 1555, 1557, 5, 168, 85, 2, 1556, 1517, 3, 2, 2, 2, 1556, 1528,
	3, 2, 2, 2, 1556, 1535, 3, 2, 2, 2, 1556, 1555, 3, 2, 2, 2, 1557, 135,
	3, 2, 2, 2, 1558, 1559, 7, 13, 2, 2, 1559, 1560, 7, 56, 2, 2, 1560, 1563,
	9, 27, 2, 2, 1561, 1564, 5, 326, 164, 2, 1562, 1564, 7, 404, 2, 2, 1563,
	1561, 3, 2, 2, 2, 1563, 1562, 3, 2, 2, 2, 1563, 1564, 3, 2, 2, 2, 1564,
	1566, 3, 2, 2, 2, 1565, 1567, 7, 431, 2, 2, 1566, 1565, 3, 2, 2, 2, 1566,
	1567, 3, 2, 2, 2, 1567, 1636, 3, 2, 2, 2, 1568, 1569, 7, 13, 2, 2, 1569,
	1579, 9, 27, 2, 2, 1570, 1573, 5, 326, 164, 2, 1571, 1573, 7, 404, 2, 2,
	1572, 1570, 3, 2, 2, 2, 1572, 1571, 3, 2, 2, 2, 1573, 1577, 3, 2, 2, 2,
	1574, 1575, 7, 192, 2, 2, 1575, 1576, 7, 293, 2, 2, 1576, 1578, 7, 407,
	2, 2, 1577, 1574, 3, 2, 2, 2, 1577, 1578, 3, 2, 2, 2, 1578, 1580, 3, 2,
	2, 2, 1579, 1572, 3, 2, 2, 2, 1579, 1580, 3, 2, 2, 2, 1580, 1582, 3, 2,
	2, 2, 1581, 1583, 7, 431, 2, 2, 1582, 1581, 3, 2, 2, 2, 1582, 1583, 3,
	2, 2, 2, 1583, 1636, 3, 2, 2, 2, 1584, 1585, 7, 30, 2, 2, 1585, 1598, 9,
	27, 2, 2, 1586, 1589, 5, 326, 164, 2, 1587, 1589, 7, 404, 2, 2, 1588, 1586,
	3, 2, 2, 2, 1588, 1587, 3, 2, 2, 2, 1589, 1596, 3, 2, 2, 2, 1590, 1591,
	7, 192, 2, 2, 1591, 1592, 7, 428, 2, 2, 1592, 1593, 7, 243, 2, 2, 1593,
	1594, 7, 411, 2, 2, 1594, 1595, 9, 13, 2, 2, 1595, 1597, 7, 429, 2, 2,
	1596, 1590, 3, 2, 2, 2, 1596, 1597, 3, 2, 2, 2, 1597, 1599, 3, 2, 2, 2,
	1598, 1588, 3, 2, 2, 2, 1598, 1599, 3, 2, 2, 2, 1599, 1601, 3, 2, 2, 2,
	1600, 1602, 7, 431, 2, 2, 1601, 1600, 3, 2, 2, 2, 1601, 1602, 3, 2, 2,
	2, 1602, 1636, 3, 2, 2, 2, 1603, 1605, 7, 30, 2, 2, 1604, 1606, 7, 395,
	2, 2, 1605, 1604, 3, 2, 2, 2, 1605, 1606, 3, 2, 2, 2, 1606, 1608, 3, 2,
	2, 2, 1607, 1609, 7, 431, 2, 2, 1608, 1607, 3, 2, 2, 2, 1608, 1609, 3,
	2, 2, 2, 1609, 1636, 3, 2, 2, 2, 1610, 1611, 7, 148, 2, 2, 1611, 1614,
	9, 27, 2, 2, 1612, 1615, 5, 326, 164, 2, 1613, 1615, 7, 404, 2, 2, 1614,
	1612, 3, 2, 2, 2, 1614, 1613, 3, 2, 2, 2, 1614, 1615, 3, 2, 2, 2, 1615,
	1617, 3, 2, 2, 2, 1616, 1618, 7, 431, 2, 2, 1617, 1616, 3, 2, 2, 2, 1617,
	1618, 3, 2, 2, 2, 1618, 1636, 3, 2, 2, 2, 1619, 1621, 7, 148, 2, 2, 1620,
	1622, 7, 395, 2, 2, 1621, 1620, 3, 2, 2, 2, 1621, 1622, 3, 2, 2, 2, 1622,
	1624, 3, 2, 2, 2, 1623, 1625, 7, 431, 2, 2, 1624, 1623, 3, 2, 2, 2, 1624,
	1625, 3, 2, 2, 2, 1625, 1636, 3, 2, 2, 2, 1626, 1627, 7, 152, 2, 2, 1627,
	1630, 9, 27, 2, 2, 1628, 1631, 5, 326, 164, 2, 1629, 1631, 7, 404, 2, 2,
	1630, 1628, 3, 2, 2, 2, 1630, 1629, 3, 2, 2, 2, 1630, 1631, 3, 2, 2, 2,
	1631, 1633, 3, 2, 2, 2, 1632, 1634, 7, 431, 2, 2, 1633, 1632, 3, 2, 2,
	2, 1633, 1634, 3, 2, 2, 2, 1634, 1636, 3, 2, 2, 2, 1635, 1558, 3, 2, 2,
	2, 1635, 1568, 3, 2, 2, 2, 1635, 1584, 3, 2, 2, 2, 1635, 1603, 3, 2, 2,
	2, 1635, 1610, 3, 2, 2, 2, 1635, 1619, 3, 2, 2, 2, 1635, 1626, 3, 2, 2,
	2, 1636, 137, 3, 2, 2, 2, 1637, 1639, 7, 269, 2, 2, 1638, 1640, 7, 405,
	2, 2, 1639, 1638, 3, 2, 2, 2, 1639, 1640, 3, 2, 2, 2, 1640, 139, 3, 2,
	2, 2, 1641, 1642, 7, 183, 2, 2, 1642, 1644, 5, 326, 164, 2, 1643, 1645,
	7, 431, 2, 2, 1644, 1643, 3, 2, 2, 2, 1644, 1645, 3, 2, 2, 2, 1645, 141,
	3, 2, 2, 2, 1646, 1647, 7, 65, 2, 2, 1647, 1648, 7, 9, 2, 2, 1648, 1649,
	9, 28, 2, 2, 1649, 143, 3, 2, 2, 2, 1650, 1652, 7, 404, 2, 2, 1651, 1653,
	7, 9, 2, 2, 1652, 1651, 3, 2, 2, 2, 1652, 1653, 3, 2, 2, 2, 1653, 1654,
	3, 2, 2, 2, 1654, 1657, 5, 318, 160, 2, 1655, 1656, 7, 411, 2, 2, 1656,
	1658, 5, 172, 87, 2, 1657, 1655, 3, 2, 2, 2, 1657, 1658, 3, 2, 2, 2, 1658,
	145, 3, 2, 2, 2, 1659, 1660, 7, 166, 2, 2, 1660, 1661, 7, 428, 2, 2, 1661,
	1662, 5, 148, 75, 2, 1662, 1663, 7, 429, 2, 2, 1663, 147, 3, 2, 2, 2, 1664,
	1671, 5, 150, 76, 2, 1665, 1667, 7, 430, 2, 2, 1666, 1665, 3, 2, 2, 2,
	1666, 1667, 3, 2, 2, 2, 1667, 1668, 3, 2, 2, 2, 1668, 1670, 5, 150, 76,
	2, 1669, 1666, 3, 2, 2, 2, 1670, 1673, 3, 2, 2, 2, 1671, 1669, 3, 2, 2,
	2, 1671, 1672, 3, 2, 2, 2, 1672, 149, 3, 2, 2, 2, 1673, 1671, 3, 2, 2,
	2, 1674, 1677, 5, 152, 77, 2, 1675, 1677, 5, 156, 79, 2, 1676, 1674, 3,
	2, 2, 2, 1676, 1675, 3, 2, 2, 2, 1677, 151, 3, 2, 2, 2, 1678, 1682, 5,
	326, 164, 2, 1679, 1683, 5, 318, 160, 2, 1680, 1681, 7, 9, 2, 2, 1681,
	1683, 5, 172, 87, 2, 1682, 1679, 3, 2, 2, 2, 1682, 1680, 3, 2, 2, 2, 1683,
	1686, 3, 2, 2, 2, 1684, 1685, 7, 28, 2, 2, 1685, 1687, 5, 326, 164, 2,
	1686, 1684, 3, 2, 2, 2, 1686, 1687, 3, 2, 2, 2, 1687, 1689, 3, 2, 2, 2,
	1688, 1690, 5, 314, 158, 2, 1689, 1688, 3, 2, 2, 2, 1689, 1690, 3, 2, 2,
	2, 1690, 1714, 3, 2, 2, 2, 1691, 1692, 7, 32, 2, 2, 1692, 1694, 5, 326,
	164, 2, 1693, 1691, 3, 2, 2, 2, 1693, 1694, 3, 2, 2, 2, 1694, 1695, 3,
	2, 2, 2, 1695, 1696, 7, 50, 2, 2, 1696, 1699, 5, 174, 88, 2, 1697, 1698,
	7, 192, 2, 2, 1698, 1700, 7, 185, 2, 2, 1699, 1697, 3, 2, 2, 2, 1699, 1700,
	3, 2, 2, 2, 1700, 1715, 3, 2, 2, 2, 1701, 1707, 7, 85, 2, 2, 1702, 1703,
	7, 428, 2, 2, 1703, 1704, 7, 405, 2, 2, 1704, 1705, 7, 430, 2, 2, 1705,
	1706, 7, 405, 2, 2, 1706, 1708, 7, 429, 2, 2, 1707, 1702, 3, 2, 2, 2, 1707,
	1708, 3, 2, 2, 2, 1708, 1712, 3, 2, 2, 2, 1709, 1710, 7, 109, 2, 2, 1710,
	1711, 7, 73, 2, 2, 1711, 1713, 7, 141, 2, 2, 1712, 1709, 3, 2, 2, 2, 1712,
	1713, 3, 2, 2, 2, 1713, 1715, 3, 2, 2, 2, 1714, 1693, 3, 2, 2, 2, 1714,
	1701, 3, 2, 2, 2, 1714, 1715, 3, 2, 2, 2, 1715, 1717, 3, 2, 2, 2, 1716,
	1718, 7, 150, 2, 2, 1717, 1716, 3, 2, 2, 2, 1717, 1718, 3, 2, 2, 2, 1718,
	1722, 3, 2, 2, 2, 1719, 1721, 5, 154, 78, 2, 1720, 1719, 3, 2, 2, 2, 1721,
	1724, 3, 2, 2, 2, 1722, 1720, 3, 2, 2, 2, 1722, 1723, 3, 2, 2, 2, 1723,
	153, 3, 2, 2, 2, 1724, 1722, 3, 2, 2, 2, 1725, 1726, 7, 32, 2, 2, 1726,
	1728, 5, 326, 164, 2, 1727, 1725, 3, 2, 2, 2, 1727, 1728, 3, 2, 2, 2, 1728,
	1730, 3, 2, 2, 2, 1729, 1731, 5, 314, 158, 2, 1730, 1729, 3, 2, 2, 2, 1730,
	1731, 3, 2, 2, 2, 1731, 1753, 3, 2, 2, 2, 1732, 1733, 7, 131, 2, 2, 1733,
	1736, 7, 97, 2, 2, 1734, 1736, 7, 179, 2, 2, 1735, 1732, 3, 2, 2, 2, 1735,
	1734, 3, 2, 2, 2, 1736, 1738, 3, 2, 2, 2, 1737, 1739, 5, 312, 157, 2, 1738,
	1737, 3, 2, 2, 2, 1738, 1739, 3, 2, 2, 2, 1739, 1741, 3, 2, 2, 2, 1740,
	1742, 5, 158, 80, 2, 1741, 1740, 3, 2, 2, 2, 1741, 1742, 3, 2, 2, 2, 1742,
	1754, 3, 2, 2, 2, 1743, 1747, 7, 23, 2, 2, 1744, 1745, 7, 109, 2, 2, 1745,
	1746, 7, 73, 2, 2, 1746, 1748, 7, 141, 2, 2, 1747, 1744, 3, 2, 2, 2, 1747,
	1748, 3, 2, 2, 2, 1748, 1749, 3, 2, 2, 2, 1749, 1750, 7, 428, 2, 2, 1750,
	1751, 5, 186, 94, 2, 1751, 1752, 7, 429, 2, 2, 1752, 1754, 3, 2, 2, 2,
	1753, 1735, 3, 2, 2, 2, 1753, 1743, 3, 2, 2, 2, 1754, 155, 3, 2, 2, 2,
	1755, 1756, 7, 32, 2, 2, 1756, 1758, 5, 326, 164, 2, 1757, 1755, 3, 2,
	2, 2, 1757, 1758, 3, 2, 2, 2, 1758, 1790, 3, 2, 2, 2, 1759, 1760, 7, 131,
	2, 2, 1760, 1763, 7, 97, 2, 2, 1761, 1763, 7, 179, 2, 2, 1762, 1759, 3,
	2, 2, 2, 1762, 1761, 3, 2, 2, 2, 1763, 1765, 3, 2, 2, 2, 1764, 1766, 5,
	312, 157, 2, 1765, 1764, 3, 2, 2, 2, 1765, 1766, 3, 2, 2, 2, 1766, 1767,
	3, 2, 2, 2, 1767, 1768, 7, 428, 2, 2, 1768, 1770, 5, 306, 154, 2, 1769,
	1771, 9, 7, 2, 2, 1770, 1769, 3, 2, 2, 2, 1770, 1771, 3, 2, 2, 2, 1771,
	1772, 3, 2, 2, 2, 1772, 1774, 7, 429, 2, 2, 1773, 1775, 5, 158, 80, 2,
	1774, 1773, 3, 2, 2, 2, 1774, 1775, 3, 2, 2, 2, 1775, 1778, 3, 2, 2, 2,
	1776, 1777, 7, 115, 2, 2, 1777, 1779, 5, 326, 164, 2, 1778, 1776, 3, 2,
	2, 2, 1778, 1779, 3, 2, 2, 2, 1779, 1791, 3, 2, 2, 2, 1780, 1784, 7, 23,
	2, 2, 1781, 1782, 7, 109, 2, 2, 1782, 1783, 7, 73, 2, 2, 1783, 1785, 7,
	141, 2, 2, 1784, 1781, 3, 2, 2, 2, 1784, 1785, 3, 2, 2, 2, 1785, 1786,
	3, 2, 2, 2, 1786, 1787, 7, 428, 2, 2, 1787, 1788, 5, 186, 94, 2, 1788,
	1789, 7, 429, 2, 2, 1789, 1791, 3, 2, 2, 2, 1790, 1762, 3, 2, 2, 2, 1790,
	1780, 3, 2, 2, 2, 1791, 157, 3, 2, 2, 2, 1792, 1793, 7, 192, 2, 2, 1793,
	1794, 7, 428, 2, 2, 1794, 1799, 5, 160, 81, 2, 1795, 1796, 7, 430, 2, 2,
	1796, 1798, 5, 160, 81, 2, 1797, 1795, 3, 2, 2, 2, 1798, 1801, 3, 2, 2,
	2, 1799, 1797, 3, 2, 2, 2, 1799, 1800, 3, 2, 2, 2, 1800, 1802, 3, 2, 2,
	2, 1801, 1799, 3, 2, 2, 2, 1802, 1803, 7, 429, 2, 2, 1803, 159, 3, 2, 2,
	2, 1804, 1805, 5, 328, 165, 2, 1805, 1809, 7, 411, 2, 2, 1806, 1810, 5,
	328, 165, 2, 1807, 1810, 5, 310, 156, 2, 1808, 1810, 7, 405, 2, 2, 1809,
	1806, 3, 2, 2, 2, 1809, 1807, 3, 2, 2, 2, 1809, 1808, 3, 2, 2, 2, 1810,
	161, 3, 2, 2, 2, 1811, 1812, 7, 49, 2, 2, 1812, 1844, 5, 308, 155, 2, 1813,
	1823, 7, 45, 2, 2, 1814, 1821, 5, 164, 83, 2, 1815, 1816, 7, 73, 2, 2,
	1816, 1819, 7, 181, 2, 2, 1817, 1818, 7, 112, 2, 2, 1818, 1820, 5, 306,
	154, 2, 1819, 1817, 3, 2, 2, 2, 1819, 1820, 3, 2, 2, 2, 1820, 1822, 3,
	2, 2, 2, 1821, 1815, 3, 2, 2, 2, 1821, 1822, 3, 2, 2, 2, 1822, 1824, 3,
	2, 2, 2, 1823, 1814, 3, 2, 2, 2, 1823, 1824, 3, 2, 2, 2, 1824, 1845, 3,
	2, 2, 2, 1825, 1827, 7, 280, 2, 2, 1826, 1825, 3, 2, 2, 2, 1826, 1827,
	3, 2, 2, 2, 1827, 1829, 3, 2, 2, 2, 1828, 1830, 7, 356, 2, 2, 1829, 1828,
	3, 2, 2, 2, 1829, 1830, 3, 2, 2, 2, 1830, 1831, 3, 2, 2, 2, 1831, 1832,
	7, 45, 2, 2, 1832, 1833, 7, 73, 2, 2, 1833, 1842, 5, 26, 14, 2, 1834, 1840,
	7, 73, 2, 2, 1835, 1836, 7, 137, 2, 2, 1836, 1841, 7, 321, 2, 2, 1837,
	1841, 7, 181, 2, 2, 1838, 1839, 7, 112, 2, 2, 1839, 1841, 5, 306, 154,
	2, 1840, 1835, 3, 2, 2, 2, 1840, 1837, 3, 2, 2, 2, 1840, 1838, 3, 2, 2,
	2, 1841, 1843, 3, 2, 2, 2, 1842, 1834, 3, 2, 2, 2, 1842, 1843, 3, 2, 2,
	2, 1843, 1845, 3, 2, 2, 2, 1844, 1813, 3, 2, 2, 2, 1844, 1826, 3, 2, 2,
	2, 1845, 1847, 3, 2, 2, 2, 1846, 1848, 7, 431, 2, 2, 1847, 1846, 3, 2,
	2, 2, 1847, 1848, 3, 2, 2, 2, 1848, 163, 3, 2, 2, 2, 1849, 1851, 9, 15,
	2, 2, 1850, 1849, 3, 2, 2, 2, 1850, 1851, 3, 2, 2, 2, 1851, 1853, 3, 2,
	2, 2, 1852, 1854, 9, 29, 2, 2, 1853, 1852, 3, 2, 2, 2, 1853, 1854, 3, 2,
	2, 2, 1854, 1856, 3, 2, 2, 2, 1855, 1857, 9, 30, 2, 2, 1856, 1855, 3, 2,
	2, 2, 1856, 1857, 3, 2, 2, 2, 1857, 1859, 3, 2, 2, 2, 1858, 1860, 9, 31,
	2, 2, 1859, 1858, 3, 2, 2, 2, 1859, 1860, 3, 2, 2, 2, 1860, 1862, 3, 2,
	2, 2, 1861, 1863, 7, 385, 2, 2, 1862, 1861, 3, 2, 2, 2, 1862, 1863, 3,
	2, 2, 2, 1863, 1864, 3, 2, 2, 2, 1864, 1865, 7, 73, 2, 2, 1865, 1866, 5,
	26, 14, 2, 1866, 165, 3, 2, 2, 2, 1867, 1877, 7, 69, 2, 2, 1868, 1875,
	7, 309, 2, 2, 1869, 1875, 7, 332, 2, 2, 1870, 1875, 7, 261, 2, 2, 1871,
	1875, 7, 287, 2, 2, 1872, 1873, 9, 32, 2, 2, 1873, 1875, 5, 172, 87, 2,
	1874, 1868, 3, 2, 2, 2, 1874, 1869, 3, 2, 2, 2, 1874, 1870, 3, 2, 2, 2,
	1874, 1871, 3, 2, 2, 2, 1874, 1872, 3, 2, 2, 2, 1874, 1875, 3, 2, 2, 2,
	1875, 1876, 3, 2, 2, 2, 1876, 1878, 7, 78, 2, 2, 1877, 1874, 3, 2, 2, 2,
	1877, 1878, 3, 2, 2, 2, 1878, 1880, 3, 2, 2, 2, 1879, 1881, 7, 268, 2,
	2, 1880, 1879, 3, 2, 2, 2, 1880, 1881, 3, 2, 2, 2, 1881, 1882, 3, 2, 2,
	2, 1882, 1892, 5, 308, 155, 2, 1883, 1884, 7, 94, 2, 2, 1884, 1889, 7,
	404, 2, 2, 1885, 1886, 7, 430, 2, 2, 1886, 1888, 7, 404, 2, 2, 1887, 1885,
	3, 2, 2, 2, 1888, 1891, 3, 2, 2, 2, 1889, 1887, 3, 2, 2, 2, 1889, 1890,
	3, 2, 2, 2, 1890, 1893, 3, 2, 2, 2, 1891, 1889, 3, 2, 2, 2, 1892, 1883,
	3, 2, 2, 2, 1892, 1893, 3, 2, 2, 2, 1893, 1895, 3, 2, 2, 2, 1894, 1896,
	7, 431, 2, 2, 1895, 1894, 3, 2, 2, 2, 1895, 1896, 3, 2, 2, 2, 1896, 167,
	3, 2, 2, 2, 1897, 1898, 7, 160, 2, 2, 1898, 1902, 5, 326, 164, 2, 1899,
	1903, 5, 326, 164, 2, 1900, 1903, 5, 170, 86, 2, 1901, 1903, 5, 310, 156,
	2, 1902, 1899, 3, 2, 2, 2, 1902, 1900, 3, 2, 2, 2, 1902, 1901, 3, 2, 2,
	2, 1903, 1905, 3, 2, 2, 2, 1904, 1906, 7, 431, 2, 2, 1905, 1904, 3, 2,
	2, 2, 1905, 1906, 3, 2, 2, 2, 1906, 1941, 3, 2, 2, 2, 1907, 1908, 7, 160,
	2, 2, 1908, 1909, 7, 173, 2, 2, 1909, 1910, 7, 282, 2, 2, 1910, 1919, 7,
	288, 2, 2, 1911, 1912, 7, 137, 2, 2, 1912, 1920, 7, 387, 2, 2, 1913, 1914,
	7, 137, 2, 2, 1914, 1920, 7, 223, 2, 2, 1915, 1916, 7, 346, 2, 2, 1916,
	1920, 7, 137, 2, 2, 1917, 1920, 7, 365, 2, 2, 1918, 1920, 7, 360, 2, 2,
	1919, 1911, 3, 2, 2, 2, 1919, 1913, 3, 2, 2, 2, 1919, 1915, 3, 2, 2, 2,
	1919, 1917, 3, 2, 2, 2, 1919, 1918, 3, 2, 2, 2, 1920, 1922, 3, 2, 2, 2,
	1921, 1923, 7, 431, 2, 2, 1922, 1921, 3, 2, 2, 2, 1922, 1923, 3, 2, 2,
	2, 1923, 1941, 3, 2, 2, 2, 1924, 1925, 7, 160, 2, 2, 1925, 1926, 7, 87,
	2, 2, 1926, 1927, 5, 296, 149, 2, 1927, 1929, 5, 310, 156, 2, 1928, 1930,
	7, 431, 2, 2, 1929, 1928, 3, 2, 2, 2, 1929, 1930, 3, 2, 2, 2, 1930, 1941,
	3, 2, 2, 2, 1931, 1932, 7, 160, 2, 2, 1932, 1933, 7, 199, 2, 2, 1933, 1941,
	5, 310, 156, 2, 1934, 1935, 7, 160, 2, 2, 1935, 1936, 7, 334, 2, 2, 1936,
	1941, 5, 310, 156, 2, 1937, 1938, 7, 160, 2, 2, 1938, 1939, 7, 201, 2,
	2, 1939, 1941, 5, 310, 156, 2, 1940, 1897, 3, 2, 2, 2, 1940, 1907, 3, 2,
	2, 2, 1940, 1924, 3, 2, 2, 2, 1940, 1931, 3, 2, 2, 2, 1940, 1934, 3, 2,
	2, 2, 1940, 1937, 3, 2, 2, 2, 1941, 169, 3, 2, 2, 2, 1942, 1945, 5, 322,
	162, 2, 1943, 1945, 7, 404, 2, 2, 1944, 1942, 3, 2, 2, 2, 1944, 1943, 3,
	2, 2, 2, 1945, 171, 3, 2, 2, 2, 1946, 1947, 8, 87, 1, 2, 1947, 1992, 7,
	50, 2, 2, 1948, 1992, 7, 110, 2, 2, 1949, 1992, 7, 404, 2, 2, 1950, 1992,
	5, 322, 162, 2, 1951, 1992, 5, 240, 121, 2, 1952, 1953, 7, 20, 2, 2, 1953,
	1955, 5, 172, 87, 2, 1954, 1956, 5, 242, 122, 2, 1955, 1954, 3, 2, 2, 2,
	1956, 1957, 3, 2, 2, 2, 1957, 1955, 3, 2, 2, 2, 1957, 1958, 3, 2, 2, 2,
	1958, 1961, 3, 2, 2, 2, 1959, 1960, 7, 60, 2, 2, 1960, 1962, 5, 172, 87,
	2, 1961, 1959, 3, 2, 2, 2, 1961, 1962, 3, 2, 2, 2, 1962, 1963, 3, 2, 2,
	2, 1963, 1964, 7, 61, 2, 2, 1964, 1992, 3, 2, 2, 2, 1965, 1967, 7, 20,
	2, 2, 1966, 1968, 5, 244, 123, 2, 1967, 1966, 3, 2, 2, 2, 1968, 1969, 3,
	2, 2, 2, 1969, 1967, 3, 2, 2, 2, 1969, 1970, 3, 2, 2, 2, 1970, 1973, 3,
	2, 2, 2, 1971, 1972, 7, 60, 2, 2, 1972, 1974, 5, 172, 87, 2, 1973, 1971,
	3, 2, 2, 2, 1973, 1974, 3, 2, 2, 2, 1974, 1975, 3, 2, 2, 2, 1975, 1976,
	7, 61, 2, 2, 1976, 1992, 3, 2, 2, 2, 1977, 1992, 5, 304, 153, 2, 1978,
	1979, 7, 428, 2, 2, 1979, 1980, 5, 172, 87, 2, 1980, 1981, 7, 429, 2, 2,
	1981, 1992, 3, 2, 2, 2, 1982, 1983, 7, 428, 2, 2, 1983, 1984, 5, 176, 89,
	2, 1984, 1985, 7, 429, 2, 2, 1985, 1992, 3, 2, 2, 2, 1986, 1987, 7, 438,
	2, 2, 1987, 1992, 5, 172, 87, 8, 1988, 1989, 9, 33, 2, 2, 1989, 1992, 5,
	172, 87, 6, 1990, 1992, 5, 272, 137, 2, 1991, 1946, 3, 2, 2, 2, 1991, 1948,
	3, 2, 2, 2, 1991, 1949, 3, 2, 2, 2, 1991, 1950, 3, 2, 2, 2, 1991, 1951,
	3, 2, 2, 2, 1991, 1952, 3, 2, 2, 2, 1991, 1965, 3, 2, 2, 2, 1991, 1977,
	3, 2, 2, 2, 1991, 1978, 3, 2, 2, 2, 1991, 1982, 3, 2, 2, 2, 1991, 1986,
	3, 2, 2, 2, 1991, 1988, 3, 2, 2, 2, 1991, 1990, 3, 2, 2, 2, 1992, 2008,
	3, 2, 2, 2, 1993, 1994, 12, 7, 2, 2, 1994, 1995, 9, 34, 2, 2, 1995, 2007,
	5, 172, 87, 8, 1996, 1997, 12, 5, 2, 2, 1997, 1998, 9, 35, 2, 2, 1998,
	2007, 5, 172, 87, 6, 1999, 2000, 12, 4, 2, 2, 2000, 2001, 5, 330, 166,
	2, 2001, 2002, 5, 172, 87, 5, 2002, 2007, 3, 2, 2, 2, 2003, 2004, 12, 14,
	2, 2, 2004, 2005, 7, 28, 2, 2, 2005, 2007, 5, 326, 164, 2, 2006, 1993,
	3, 2, 2, 2, 2006, 1996, 3, 2, 2, 2, 2006, 1999, 3, 2, 2, 2, 2006, 2003,
	3, 2, 2, 2, 2007, 2010, 3, 2, 2, 2, 2008, 2006, 3, 2, 2, 2, 2008, 2009,
	3, 2, 2, 2, 2009, 173, 3, 2, 2, 2, 2010, 2008, 3, 2, 2, 2, 2011, 2020,
	7, 110, 2, 2, 2012, 2020, 5, 322, 162, 2, 2013, 2020, 5, 240, 121, 2, 2014,
	2020, 7, 404, 2, 2, 2015, 2016, 7, 428, 2, 2, 2016, 2017, 5, 174, 88, 2,
	2017, 2018, 7, 429, 2, 2, 2018, 2020, 3, 2, 2, 2, 2019, 2011, 3, 2, 2,
	2, 2019, 2012, 3, 2, 2, 2, 2019, 2013, 3, 2, 2, 2, 2019, 2014, 3, 2, 2,
	2, 2019, 2015, 3, 2, 2, 2, 2020, 175, 3, 2, 2, 2, 2021, 2022, 5, 26, 14,
	2, 2022, 177, 3, 2, 2, 2, 2023, 2026, 7, 192, 2, 2, 2024, 2025, 7, 397,
	2, 2, 2025, 2027, 7, 430, 2, 2, 2026, 2024, 3, 2, 2, 2, 2026, 2027, 3,
	2, 2, 2, 2027, 2028, 3, 2, 2, 2, 2028, 2033, 5, 180, 91, 2, 2029, 2030,
	7, 430, 2, 2, 2030, 2032, 5, 180, 91, 2, 2031, 2029, 3, 2, 2, 2, 2032,
	2035, 3, 2, 2, 2, 2033, 2031, 3, 2, 2, 2, 2033, 2034, 3, 2, 2, 2, 2034,
	179, 3, 2, 2, 2, 2035, 2033, 3, 2, 2, 2, 2036, 2041, 5, 326, 164, 2, 2037,
	2038, 7, 428, 2, 2, 2038, 2039, 5, 306, 154, 2, 2039, 2040, 7, 429, 2,
	2, 2040, 2042, 3, 2, 2, 2, 2041, 2037, 3, 2, 2, 2, 2041, 2042, 3, 2, 2,
	2, 2042, 2043, 3, 2, 2, 2, 2043, 2044, 7, 9, 2, 2, 2044, 2045, 7, 428,
	2, 2, 2045, 2046, 5, 26, 14, 2, 2046, 2047, 7, 429, 2, 2, 2047, 181, 3,
	2, 2, 2, 2048, 2051, 5, 304, 153, 2, 2049, 2051, 7, 404, 2, 2, 2050, 2048,
	3, 2, 2, 2, 2050, 2049, 3, 2, 2, 2, 2051, 2054, 3, 2, 2, 2, 2052, 2055,
	7, 411, 2, 2, 2053, 2055, 5, 332, 167, 2, 2054, 2052, 3, 2, 2, 2, 2054,
	2053, 3, 2, 2, 2, 2055, 2056, 3, 2, 2, 2, 2056, 2065, 5, 172, 87, 2, 2057,
	2058, 5, 326, 164, 2, 2058, 2059, 7, 423, 2, 2, 2059, 2060, 5, 326, 164,
	2, 2060, 2061, 7, 428, 2, 2, 2061, 2062, 5, 264, 133, 2, 2062, 2063, 7,
	429, 2, 2, 2063, 2065, 3, 2, 2, 2, 2064, 2050, 3, 2, 2, 2, 2064, 2057,
	3, 2, 2, 2, 2065, 183, 3, 2, 2, 2, 2066, 2071, 5, 186, 94, 2, 2067, 2068,
	7, 430, 2, 2, 2068, 2070, 5, 186, 94, 2, 2069, 2067, 3, 2, 2, 2, 2070,
	2073, 3, 2, 2, 2, 2071, 2069, 3, 2, 2, 2, 2071, 2072, 3, 2, 2, 2, 2072,
	185, 3, 2, 2, 2, 2073, 2071, 3, 2, 2, 2, 2074, 2079, 5, 188, 95, 2, 2075,
	2076, 7, 122, 2, 2, 2076, 2078, 5, 188, 95, 2, 2077, 2075, 3, 2, 2, 2,
	2078, 2081, 3, 2, 2, 2, 2079, 2077, 3, 2, 2, 2, 2079, 2080, 3, 2, 2, 2,
	2080, 187, 3, 2, 2, 2, 2081, 2079, 3, 2, 2, 2, 2082, 2087, 5, 190, 96,
	2, 2083, 2084, 7, 7, 2, 2, 2084, 2086, 5, 190, 96, 2, 2085, 2083, 3, 2,
	2, 2, 2086, 2089, 3, 2, 2, 2, 2087, 2085, 3, 2, 2, 2, 2087, 2088, 3, 2,
	2, 2, 2088, 189, 3, 2, 2, 2, 2089, 2087, 3, 2, 2, 2, 2090, 2092, 7, 109,
	2, 2, 2091, 2090, 3, 2, 2, 2, 2091, 2092, 3, 2, 2, 2, 2092, 2093, 3, 2,
	2, 2, 2093, 2094, 5, 192, 97, 2, 2094, 191, 3, 2, 2, 2, 2095, 2096, 7,
	66, 2, 2, 2096, 2097, 7, 428, 2, 2, 2097, 2098, 5, 176, 89, 2, 2098, 2099,
	7, 429, 2, 2, 2099, 2152, 3, 2, 2, 2, 2100, 2101, 5, 172, 87, 2, 2101,
	2102, 5, 330, 166, 2, 2102, 2103, 5, 172, 87, 2, 2103, 2152, 3, 2, 2, 2,
	2104, 2105, 5, 172, 87, 2, 2105, 2106, 5, 330, 166, 2, 2106, 2107, 9, 36,
	2, 2, 2107, 2108, 7, 428, 2, 2, 2108, 2109, 5, 176, 89, 2, 2109, 2110,
	7, 429, 2, 2, 2110, 2152, 3, 2, 2, 2, 2111, 2113, 5, 172, 87, 2, 2112,
	2114, 7, 109, 2, 2, 2113, 2112, 3, 2, 2, 2, 2113, 2114, 3, 2, 2, 2, 2114,
	2115, 3, 2, 2, 2, 2115, 2116, 7, 14, 2, 2, 2116, 2117, 5, 172, 87, 2, 2117,
	2118, 7, 7, 2, 2, 2118, 2119, 5, 172, 87, 2, 2119, 2152, 3, 2, 2, 2, 2120,
	2122, 5, 172, 87, 2, 2121, 2123, 7, 109, 2, 2, 2122, 2121, 3, 2, 2, 2,
	2122, 2123, 3, 2, 2, 2, 2123, 2124, 3, 2, 2, 2, 2124, 2125, 7, 89, 2, 2,
	2125, 2128, 7, 428, 2, 2, 2126, 2129, 5, 176, 89, 2, 2127, 2129, 5, 264,
	133, 2, 2128, 2126, 3, 2, 2, 2, 2128, 2127, 3, 2, 2, 2, 2129, 2130, 3,
	2, 2, 2, 2130, 2131, 7, 429, 2, 2, 2131, 2152, 3, 2, 2, 2, 2132, 2134,
	5, 172, 87, 2, 2133, 2135, 7, 109, 2, 2, 2134, 2133, 3, 2, 2, 2, 2134,
	2135, 3, 2, 2, 2, 2135, 2136, 3, 2, 2, 2, 2136, 2137, 7, 100, 2, 2, 2137,
	2140, 5, 172, 87, 2, 2138, 2139, 7, 63, 2, 2, 2139, 2141, 5, 172, 87, 2,
	2140, 2138, 3, 2, 2, 2, 2140, 2141, 3, 2, 2, 2, 2141, 2152, 3, 2, 2, 2,
	2142, 2143, 5, 172, 87, 2, 2143, 2144, 7, 95, 2, 2, 2144, 2145, 5, 314,
	158, 2, 2145, 2152, 3, 2, 2, 2, 2146, 2147, 7, 428, 2, 2, 2147, 2148, 5,
	186, 94, 2, 2148, 2149, 7, 429, 2, 2, 2149, 2152, 3, 2, 2, 2, 2150, 2152,
	7, 405, 2, 2, 2151, 2095, 3, 2, 2, 2, 2151, 2100, 3, 2, 2, 2, 2151, 2104,
	3, 2, 2, 2, 2151, 2111, 3, 2, 2, 2, 2151, 2120, 3, 2, 2, 2, 2151, 2132,
	3, 2, 2, 2, 2151, 2142, 3, 2, 2, 2, 2151, 2146, 3, 2, 2, 2, 2151, 2150,
	3, 2, 2, 2, 2152, 193, 3, 2, 2, 2, 2153, 2159, 5, 198, 100, 2, 2154, 2155,
	7, 428, 2, 2, 2155, 2156, 5, 194, 98, 2, 2156, 2157, 7, 429, 2, 2, 2157,
	2159, 3, 2, 2, 2, 2158, 2153, 3, 2, 2, 2, 2158, 2154, 3, 2, 2, 2, 2159,
	2163, 3, 2, 2, 2, 2160, 2162, 5, 196, 99, 2, 2161, 2160, 3, 2, 2, 2, 2162,
	2165, 3, 2, 2, 2, 2163, 2161, 3, 2, 2, 2, 2163, 2164, 3, 2, 2, 2, 2164,
	195, 3, 2, 2, 2, 2165, 2163, 3, 2, 2, 2, 2166, 2168, 7, 178, 2, 2, 2167,
	2169, 7, 5, 2, 2, 2168, 2167, 3, 2, 2, 2, 2168, 2169, 3, 2, 2, 2, 2169,
	2173, 3, 2, 2, 2, 2170, 2173, 7, 64, 2, 2, 2171, 2173, 7, 93, 2, 2, 2172,
	2166, 3, 2, 2, 2, 2172, 2170, 3, 2, 2, 2, 2172, 2171, 3, 2, 2, 2, 2173,
	2183, 3, 2, 2, 2, 2174, 2184, 5, 198, 100, 2, 2175, 2176, 7, 428, 2, 2,
	2176, 2177, 5, 194, 98, 2, 2177, 2178, 7, 429, 2, 2, 2178, 2180, 3, 2,
	2, 2, 2179, 2175, 3, 2, 2, 2, 2180, 2181, 3, 2, 2, 2, 2181, 2179, 3, 2,
	2, 2, 2181, 2182, 3, 2, 2, 2, 2182, 2184, 3, 2, 2, 2, 2183, 2174, 3, 2,
	2, 2, 2183, 2179, 3, 2, 2, 2, 2184, 197, 3, 2, 2, 2, 2185, 2187, 7, 155,
	2, 2, 2186, 2188, 9, 37, 2, 2, 2187, 2186, 3, 2, 2, 2, 2187, 2188, 3, 2,
	2, 2, 2188, 2198, 3, 2, 2, 2, 2189, 2190, 7, 171, 2, 2, 2190, 2192, 5,
	172, 87, 2, 2191, 2193, 7, 127, 2, 2, 2192, 2191, 3, 2, 2, 2, 2192, 2193,
	3, 2, 2, 2, 2193, 2196, 3, 2, 2, 2, 2194, 2195, 7, 192, 2, 2, 2195, 2197,
	7, 377, 2, 2, 2196, 2194, 3, 2, 2, 2, 2196, 2197, 3, 2, 2, 2, 2197, 2199,
	3, 2, 2, 2, 2198, 2189, 3, 2, 2, 2, 2198, 2199, 3, 2, 2, 2, 2199, 2200,
	3, 2, 2, 2, 2200, 2203, 5, 216, 109, 2, 2201, 2202, 7, 94, 2, 2, 2202,
	2204, 5, 296, 149, 2, 2203, 2201, 3, 2, 2, 2, 2203, 2204, 3, 2, 2, 2, 2204,
	2207, 3, 2, 2, 2, 2205, 2206, 7, 78, 2, 2, 2206, 2208, 5, 220, 111, 2,
	2207, 2205, 3, 2, 2, 2, 2207, 2208, 3, 2, 2, 2, 2208, 2211, 3, 2, 2, 2,
	2209, 2210, 7, 190, 2, 2, 2210, 2212, 5, 186, 94, 2, 2211, 2209, 3, 2,
	2, 2, 2211, 2212, 3, 2, 2, 2, 2212, 2223, 3, 2, 2, 2, 2213, 2214, 7, 83,
	2, 2, 2214, 2215, 7, 18, 2, 2, 2215, 2220, 5, 208, 105, 2, 2216, 2217,
	7, 430, 2, 2, 2217, 2219, 5, 208, 105, 2, 2218, 2216, 3, 2, 2, 2, 2219,
	2222, 3, 2, 2, 2, 2220, 2218, 3, 2, 2, 2, 2220, 2221, 3, 2, 2, 2, 2221,
	2224, 3, 2, 2, 2, 2222, 2220, 3, 2, 2, 2, 2223, 2213, 3, 2, 2, 2, 2223,
	2224, 3, 2, 2, 2, 2224, 2227, 3, 2, 2, 2, 2225, 2226, 7, 84, 2, 2, 2226,
	2228, 5, 186, 94, 2, 2227, 2225, 3, 2, 2, 2, 2227, 2228, 3, 2, 2, 2, 2228,
	199, 3, 2, 2, 2, 2229, 2230, 7, 123, 2, 2, 2230, 2231, 7, 18, 2, 2, 2231,
	2236, 5, 206, 104, 2, 2232, 2233, 7, 430, 2, 2, 2233, 2235, 5, 206, 104,
	2, 2234, 2232, 3, 2, 2, 2, 2235, 2238, 3, 2, 2, 2, 2236, 2234, 3, 2, 2,
	2, 2236, 2237, 3, 2, 2, 2, 2237, 2250, 3, 2, 2, 2, 2238, 2236, 3, 2, 2,
	2, 2239, 2240, 7, 319, 2, 2, 2240, 2241, 5, 172, 87, 2, 2241, 2248, 9,
	38, 2, 2, 2242, 2243, 7, 69, 2, 2, 2243, 2244, 9, 39, 2, 2, 2244, 2245,
	5, 172, 87, 2, 2245, 2246, 9, 38, 2, 2, 2246, 2247, 7, 321, 2, 2, 2247,
	2249, 3, 2, 2, 2, 2248, 2242, 3, 2, 2, 2, 2248, 2249, 3, 2, 2, 2, 2249,
	2251, 3, 2, 2, 2, 2250, 2239, 3, 2, 2, 2, 2250, 2251, 3, 2, 2, 2, 2251,
	201, 3, 2, 2, 2, 2252, 2253, 7, 73, 2, 2, 2253, 2272, 7, 16, 2, 2, 2254,
	2255, 7, 73, 2, 2, 2255, 2256, 7, 396, 2, 2, 2256, 2258, 7, 205, 2, 2,
	2257, 2259, 5, 204, 103, 2, 2258, 2257, 3, 2, 2, 2, 2258, 2259, 3, 2, 2,
	2, 2259, 2272, 3, 2, 2, 2, 2260, 2261, 7, 73, 2, 2, 2261, 2262, 7, 396,
	2, 2, 2262, 2266, 7, 330, 2, 2, 2263, 2264, 7, 428, 2, 2, 2264, 2265, 7,
	407, 2, 2, 2265, 2267, 7, 429, 2, 2, 2266, 2263, 3, 2, 2, 2, 2266, 2267,
	3, 2, 2, 2, 2267, 2269, 3, 2, 2, 2, 2268, 2270, 5, 204, 103, 2, 2269, 2268,
	3, 2, 2, 2, 2269, 2270, 3, 2, 2, 2, 2270, 2272, 3, 2, 2, 2, 2271, 2252,
	3, 2, 2, 2, 2271, 2254, 3, 2, 2, 2, 2271, 2260, 3, 2, 2, 2, 2272, 203,
	3, 2, 2, 2, 2273, 2278, 7, 430, 2, 2, 2274, 2275, 7, 408, 2, 2, 2275, 2279,
	7, 213, 2, 2, 2276, 2279, 7, 384, 2, 2, 2277, 2279, 7, 349, 2, 2, 2278,
	2274, 3, 2, 2, 2, 2278, 2276, 3, 2, 2, 2, 2278, 2277, 3, 2, 2, 2, 2279,
	205, 3, 2, 2, 2, 2280, 2282, 5, 172, 87, 2, 2281, 2283, 9, 7, 2, 2, 2282,
	2281, 3, 2, 2, 2, 2282, 2283, 3, 2, 2, 2, 2283, 207, 3, 2, 2, 2, 2284,
	2285, 5, 172, 87, 2, 2285, 209, 3, 2, 2, 2, 2286, 2287, 7, 121, 2, 2, 2287,
	2288, 7, 428, 2, 2, 2288, 2293, 5, 212, 107, 2, 2289, 2290, 7, 430, 2,
	2, 2290, 2292, 5, 212, 107, 2, 2291, 2289, 3, 2, 2, 2, 2292, 2295, 3, 2,
	2, 2, 2293, 2291, 3, 2, 2, 2, 2293, 2294, 3, 2, 2, 2, 2294, 2296, 3, 2,
	2, 2, 2295, 2293, 3, 2, 2, 2, 2296, 2297, 7, 429, 2, 2, 2297, 211, 3, 2,
	2, 2, 2298, 2299, 7, 256, 2, 2, 2299, 2344, 7, 405, 2, 2, 2300, 2301, 9,
	40, 2, 2, 2301, 2344, 7, 83, 2, 2, 2302, 2303, 9, 41, 2, 2, 2303, 2344,
	7, 178, 2, 2, 2304, 2305, 9, 42, 2, 2, 2305, 2344, 7, 96, 2, 2, 2306, 2307,
	7, 255, 2, 2, 2307, 2344, 7, 393, 2, 2, 2308, 2309, 7, 263, 2, 2, 2309,
	2344, 7, 123, 2, 2, 2310, 2344, 7, 276, 2, 2, 2311, 2312, 7, 284, 2, 2,
	2312, 2344, 7, 129, 2, 2, 2313, 2314, 7, 285, 2, 2, 2314, 2344, 7, 129,
	2, 2, 2315, 2316, 7, 295, 2, 2, 2316, 2344, 7, 405, 2, 2, 2317, 2318, 7,
	296, 2, 2, 2318, 2344, 7, 405, 2, 2, 2319, 2320, 7, 323, 2, 2, 2320, 2321,
	7, 73, 2, 2, 2321, 2322, 7, 428, 2, 2, 2322, 2327, 5, 214, 108, 2, 2323,
	2324, 7, 430, 2, 2, 2324, 2326, 5, 214, 108, 2, 2325, 2323, 3, 2, 2, 2,
	2326, 2329, 3, 2, 2, 2, 2327, 2325, 3, 2, 2, 2, 2327, 2328, 3, 2, 2, 2,
	2328, 2330, 3, 2, 2, 2, 2329, 2327, 3, 2, 2, 2, 2330, 2331, 7, 429, 2,
	2, 2331, 2344, 3, 2, 2, 2, 2332, 2333, 7, 323, 2, 2, 2333, 2334, 7, 73,
	2, 2, 2334, 2344, 7, 388, 2, 2, 2335, 2336, 7, 328, 2, 2, 2336, 2344, 9,
	20, 2, 2, 2337, 2344, 7, 341, 2, 2, 2338, 2339, 7, 348, 2, 2, 2339, 2344,
	7, 129, 2, 2, 2340, 2341, 7, 183, 2, 2, 2341, 2342, 7, 129, 2, 2, 2342,
	2344, 7, 407, 2, 2, 2343, 2298, 3, 2, 2, 2, 2343, 2300, 3, 2, 2, 2, 2343,
	2302, 3, 2, 2, 2, 2343, 2304, 3, 2, 2, 2, 2343, 2306, 3, 2, 2, 2, 2343,
	2308, 3, 2, 2, 2, 2343, 2310, 3, 2, 2, 2, 2343, 2311, 3, 2, 2, 2, 2343,
	2313, 3, 2, 2, 2, 2343, 2315, 3, 2, 2, 2, 2343, 2317, 3, 2, 2, 2, 2343,
	2319, 3, 2, 2, 2, 2343, 2332, 3, 2, 2, 2, 2343, 2335, 3, 2, 2, 2, 2343,
	2337, 3, 2, 2, 2, 2343, 2338, 3, 2, 2, 2, 2343, 2340, 3, 2, 2, 2, 2344,
	213, 3, 2, 2, 2, 2345, 2349, 7, 404, 2, 2, 2346, 2350, 7, 388, 2, 2, 2347,
	2348, 7, 411, 2, 2, 2348, 2350, 5, 322, 162, 2, 2349, 2346, 3, 2, 2, 2,
	2349, 2347, 3, 2, 2, 2, 2350, 215, 3, 2, 2, 2, 2351, 2356, 5, 218, 110,
	2, 2352, 2353, 7, 430, 2, 2, 2353, 2355, 5, 218, 110, 2, 2354, 2352, 3,
	2, 2, 2, 2355, 2358, 3, 2, 2, 2, 2356, 2354, 3, 2, 2, 2, 2356, 2357, 3,
	2, 2, 2, 2357, 217, 3, 2, 2, 2, 2358, 2356, 3, 2, 2, 2, 2359, 2360, 5,
	296, 149, 2, 2360, 2361, 7, 423, 2, 2, 2361, 2363, 3, 2, 2, 2, 2362, 2359,
	3, 2, 2, 2, 2362, 2363, 3, 2, 2, 2, 2363, 2367, 3, 2, 2, 2, 2364, 2368,
	7, 433, 2, 2, 2365, 2366, 7, 427, 2, 2, 2366, 2368, 9, 43, 2, 2, 2367,
	2364, 3, 2, 2, 2, 2367, 2365, 3, 2, 2, 2, 2368, 2381, 3, 2, 2, 2, 2369,
	2370, 5, 260, 131, 2, 2370, 2371, 7, 411, 2, 2, 2371, 2372, 5, 172, 87,
	2, 2372, 2381, 3, 2, 2, 2, 2373, 2378, 5, 172, 87, 2, 2374, 2376, 7, 9,
	2, 2, 2375, 2374, 3, 2, 2, 2, 2375, 2376, 3, 2, 2, 2, 2376, 2377, 3, 2,
	2, 2, 2377, 2379, 5, 260, 131, 2, 2378, 2375, 3, 2, 2, 2, 2378, 2379, 3,
	2, 2, 2, 2379, 2381, 3, 2, 2, 2, 2380, 2362, 3, 2, 2, 2, 2380, 2369, 3,
	2, 2, 2, 2380, 2373, 3, 2, 2, 2, 2381, 219, 3, 2, 2, 2, 2382, 2387, 5,
	222, 112, 2, 2383, 2384, 7, 430, 2, 2, 2384, 2386, 5, 222, 112, 2, 2385,
	2383, 3, 2, 2, 2, 2386, 2389, 3, 2, 2, 2, 2387, 2385, 3, 2, 2, 2, 2387,
	2388, 3, 2, 2, 2, 2388, 221, 3, 2, 2, 2, 2389, 2387, 3, 2, 2, 2, 2390,
	2396, 5, 224, 113, 2, 2391, 2392, 7, 428, 2, 2, 2392, 2393, 5, 224, 113,
	2, 2393, 2394, 7, 429, 2, 2, 2394, 2396, 3, 2, 2, 2, 2395, 2390, 3, 2,
	2, 2, 2395, 2391, 3, 2, 2, 2, 2396, 223, 3, 2, 2, 2, 2397, 2401, 5, 226,
	114, 2, 2398, 2400, 5, 230, 116, 2, 2399, 2398, 3, 2, 2, 2, 2400, 2403,
	3, 2, 2, 2, 2401, 2399, 3, 2, 2, 2, 2401, 2402, 3, 2, 2, 2, 2402, 225,
	3, 2, 2, 2, 2403, 2401, 3, 2, 2, 2, 2404, 2406, 5, 232, 117, 2, 2405, 2407,
	5, 246, 124, 2, 2406, 2405, 3, 2, 2, 2, 2406, 2407, 3, 2, 2, 2, 2407, 2440,
	3, 2, 2, 2, 2408, 2410, 5, 234, 118, 2, 2409, 2411, 5, 246, 124, 2, 2410,
	2409, 3, 2, 2, 2, 2410, 2411, 3, 2, 2, 2, 2411, 2440, 3, 2, 2, 2, 2412,
	2417, 5, 238, 120, 2, 2413, 2415, 5, 246, 124, 2, 2414, 2416, 5, 258, 130,
	2, 2415, 2414, 3, 2, 2, 2, 2415, 2416, 3, 2, 2, 2, 2416, 2418, 3, 2, 2,
	2, 2417, 2413, 3, 2, 2, 2, 2417, 2418, 3, 2, 2, 2, 2418, 2440, 3, 2, 2,
	2, 2419, 2420, 5, 228, 115, 2, 2420, 2421, 5, 246, 124, 2, 2421, 2440,
	3, 2, 2, 2, 2422, 2424, 5, 240, 121, 2, 2423, 2425, 5, 246, 124, 2, 2424,
	2423, 3, 2, 2, 2, 2424, 2425, 3, 2, 2, 2, 2425, 2440, 3, 2, 2, 2, 2426,
	2428, 7, 404, 2, 2, 2427, 2429, 5, 246, 124, 2, 2428, 2427, 3, 2, 2, 2,
	2428, 2429, 3, 2, 2, 2, 2429, 2440, 3, 2, 2, 2, 2430, 2431, 7, 404, 2,
	2, 2431, 2432, 7, 423, 2, 2, 2432, 2437, 5, 240, 121, 2, 2433, 2435, 5,
	246, 124, 2, 2434, 2436, 5, 258, 130, 2, 2435, 2434, 3, 2, 2, 2, 2435,
	2436, 3, 2, 2, 2, 2436, 2438, 3, 2, 2, 2, 2437, 2433, 3, 2, 2, 2, 2437,
	2438, 3, 2, 2, 2, 2438, 2440, 3, 2, 2, 2, 2439, 2404, 3, 2, 2, 2, 2439,
	2408, 3, 2, 2, 2, 2439, 2412, 3, 2, 2, 2, 2439, 2419, 3, 2, 2, 2, 2439,
	2422, 3, 2, 2, 2, 2439, 2426, 3, 2, 2, 2, 2439, 2430, 3, 2, 2, 2, 2440,
	227, 3, 2, 2, 2, 2441, 2442, 7, 21, 2, 2, 2442, 2443, 7, 428, 2, 2, 2443,
	2444, 7, 22, 2, 2, 2444, 2445, 5, 296, 149, 2, 2445, 2446, 7, 430, 2, 2,
	2446, 2447, 9, 44, 2, 2, 2447, 2448, 7, 429, 2, 2, 2448, 229, 3, 2, 2,
	2, 2449, 2451, 7, 91, 2, 2, 2450, 2449, 3, 2, 2, 2, 2450, 2451, 3, 2, 2,
	2, 2451, 2457, 3, 2, 2, 2, 2452, 2454, 9, 45, 2, 2, 2453, 2455, 7, 124,
	2, 2, 2454, 2453, 3, 2, 2, 2, 2454, 2455, 3, 2, 2, 2, 2455, 2457, 3, 2,
	2, 2, 2456, 2450, 3, 2, 2, 2, 2456, 2452, 3, 2, 2, 2, 2457, 2459, 3, 2,
	2, 2, 2458, 2460, 9, 46, 2, 2, 2459, 2458, 3, 2, 2, 2, 2459, 2460, 3, 2,
	2, 2, 2460, 2461, 3, 2, 2, 2, 2461, 2462, 7, 96, 2, 2, 2462, 2463, 5, 222,
	112, 2, 2463, 2464, 7, 115, 2, 2, 2464, 2465, 5, 186, 94, 2, 2465, 2476,
	3, 2, 2, 2, 2466, 2467, 7, 39, 2, 2, 2467, 2468, 7, 96, 2, 2, 2468, 2476,
	5, 222, 112, 2, 2469, 2470, 7, 39, 2, 2, 2470, 2471, 7, 203, 2, 2, 2471,
	2476, 5, 222, 112, 2, 2472, 2473, 7, 124, 2, 2, 2473, 2474, 7, 203, 2,
	2, 2474, 2476, 5, 222, 112, 2, 2475, 2456, 3, 2, 2, 2, 2475, 2466, 3, 2,
	2, 2, 2475, 2469, 3, 2, 2, 2, 2475, 2472, 3, 2, 2, 2, 2476, 231, 3, 2,
	2, 2, 2477, 2479, 5, 296, 149, 2, 2478, 2480, 5, 250, 126, 2, 2479, 2478,
	3, 2, 2, 2, 2479, 2480, 3, 2, 2, 2, 2480, 233, 3, 2, 2, 2, 2481, 2482,
	7, 119, 2, 2, 2482, 2483, 7, 428, 2, 2, 2483, 2484, 7, 407, 2, 2, 2484,
	2485, 7, 430, 2, 2, 2485, 2486, 7, 407, 2, 2, 2486, 2487, 7, 430, 2, 2,
	2487, 2488, 7, 407, 2, 2, 2488, 2508, 7, 429, 2, 2, 2489, 2490, 7, 119,
	2, 2, 2490, 2491, 7, 428, 2, 2, 2491, 2492, 7, 17, 2, 2, 2492, 2493, 7,
	407, 2, 2, 2493, 2503, 7, 430, 2, 2, 2494, 2499, 5, 236, 119, 2, 2495,
	2496, 7, 430, 2, 2, 2496, 2498, 5, 236, 119, 2, 2497, 2495, 3, 2, 2, 2,
	2498, 2501, 3, 2, 2, 2, 2499, 2497, 3, 2, 2, 2, 2499, 2500, 3, 2, 2, 2,
	2500, 2504, 3, 2, 2, 2, 2501, 2499, 3, 2, 2, 2, 2502, 2504, 5, 326, 164,
	2, 2503, 2494, 3, 2, 2, 2, 2503, 2502, 3, 2, 2, 2, 2504, 2505, 3, 2, 2,
	2, 2505, 2506, 7, 429, 2, 2, 2506, 2508, 3, 2, 2, 2, 2507, 2481, 3, 2,
	2, 2, 2507, 2489, 3, 2, 2, 2, 2508, 235, 3, 2, 2, 2, 2509, 2510, 5, 326,
	164, 2, 2510, 2511, 7, 411, 2, 2, 2511, 2512, 9, 47, 2, 2, 2512, 237, 3,
	2, 2, 2, 2513, 2519, 5, 176, 89, 2, 2514, 2515, 7, 428, 2, 2, 2515, 2516,
	5, 176, 89, 2, 2516, 2517, 7, 429, 2, 2, 2517, 2519, 3, 2, 2, 2, 2518,
	2513, 3, 2, 2, 2, 2518, 2514, 3, 2, 2, 2, 2519, 239, 3, 2, 2, 2, 2520,
	2618, 5, 266, 134, 2, 2521, 2618, 5, 268, 135, 2, 2522, 2523, 5, 316, 159,
	2, 2523, 2525, 7, 428, 2, 2, 2524, 2526, 5, 264, 133, 2, 2525, 2524, 3,
	2, 2, 2, 2525, 2526, 3, 2, 2, 2, 2526, 2527, 3, 2, 2, 2, 2527, 2528, 7,
	429, 2, 2, 2528, 2618, 3, 2, 2, 2, 2529, 2530, 7, 214, 2, 2, 2530, 2531,
	7, 428, 2, 2, 2531, 2532, 7, 433, 2, 2, 2532, 2618, 7, 429, 2, 2, 2533,
	2534, 7, 217, 2, 2, 2534, 2535, 7, 428, 2, 2, 2535, 2536, 5, 172, 87, 2,
	2536, 2537, 7, 9, 2, 2, 2537, 2538, 5, 318, 160, 2, 2538, 2539, 7, 429,
	2, 2, 2539, 2618, 3, 2, 2, 2, 2540, 2541, 7, 37, 2, 2, 2541, 2542, 7, 428,
	2, 2, 2542, 2543, 5, 318, 160, 2, 2543, 2544, 7, 430, 2, 2, 2544, 2547,
	5, 172, 87, 2, 2545, 2546, 7, 430, 2, 2, 2546, 2548, 5, 172, 87, 2, 2547,
	2545, 3, 2, 2, 2, 2547, 2548, 3, 2, 2, 2, 2548, 2549, 3, 2, 2, 2, 2549,
	2550, 7, 429, 2, 2, 2550, 2618, 3, 2, 2, 2, 2551, 2552, 7, 221, 2, 2, 2552,
	2553, 7, 428, 2, 2, 2553, 2554, 7, 433, 2, 2, 2554, 2618, 7, 429, 2, 2,
	2555, 2556, 7, 27, 2, 2, 2556, 2557, 7, 428, 2, 2, 2557, 2558, 5, 264,
	133, 2, 2558, 2559, 7, 429, 2, 2, 2559, 2618, 3, 2, 2, 2, 2560, 2618, 7,
	43, 2, 2, 2561, 2618, 7, 44, 2, 2, 2562, 2563, 7, 233, 2, 2, 2563, 2564,
	7, 428, 2, 2, 2564, 2565, 7, 406, 2, 2, 2565, 2566, 7, 430, 2, 2, 2566,
	2567, 5, 172, 87, 2, 2567, 2568, 7, 430, 2, 2, 2568, 2569, 5, 172, 87,
	2, 2569, 2570, 7, 429, 2, 2, 2570, 2618, 3, 2, 2, 2, 2571, 2572, 7, 234,
	2, 2, 2572, 2573, 7, 428, 2, 2, 2573, 2574, 7, 406, 2, 2, 2574, 2575, 7,
	430, 2, 2, 2575, 2576, 5, 172, 87, 2, 2576, 2577, 7, 430, 2, 2, 2577, 2578,
	5, 172, 87, 2, 2578, 2579, 7, 429, 2, 2, 2579, 2618, 3, 2, 2, 2, 2580,
	2581, 7, 235, 2, 2, 2581, 2582, 7, 428, 2, 2, 2582, 2583, 7, 406, 2, 2,
	2583, 2584, 7, 430, 2, 2, 2584, 2585, 5, 172, 87, 2, 2585, 2586, 7, 429,
	2, 2, 2586, 2618, 3, 2, 2, 2, 2587, 2588, 7, 236, 2, 2, 2588, 2589, 7,
	428, 2, 2, 2589, 2590, 7, 406, 2, 2, 2590, 2591, 7, 430, 2, 2, 2591, 2592,
	5, 172, 87, 2, 2592, 2593, 7, 429, 2, 2, 2593, 2618, 3, 2, 2, 2, 2594,
	2595, 7, 85, 2, 2, 2595, 2596, 7, 428, 2, 2, 2596, 2599, 5, 318, 160, 2,
	2597, 2598, 7, 430, 2, 2, 2598, 2600, 7, 405, 2, 2, 2599, 2597, 3, 2, 2,
	2, 2599, 2600, 3, 2, 2, 2, 2600, 2603, 3, 2, 2, 2, 2601, 2602, 7, 430,
	2, 2, 2602, 2604, 7, 405, 2, 2, 2603, 2601, 3, 2, 2, 2, 2603, 2604, 3,
	2, 2, 2, 2604, 2605, 3, 2, 2, 2, 2605, 2606, 7, 429, 2, 2, 2606, 2618,
	3, 2, 2, 2, 2607, 2618, 7, 302, 2, 2, 2608, 2609, 7, 111, 2, 2, 2609, 2610,
	7, 428, 2, 2, 2610, 2611, 5, 172, 87, 2, 2611, 2612, 7, 430, 2, 2, 2612,
	2613, 5, 172, 87, 2, 2613, 2614, 7, 429, 2, 2, 2614, 2618, 3, 2, 2, 2,
	2615, 2618, 7, 159, 2, 2, 2616, 2618, 7, 165, 2, 2, 2617, 2520, 3, 2, 2,
	2, 2617, 2521, 3, 2, 2, 2, 2617, 2522, 3, 2, 2, 2, 2617, 2529, 3, 2, 2,
	2, 2617, 2533, 3, 2, 2, 2, 2617, 2540, 3, 2, 2, 2, 2617, 2551, 3, 2, 2,
	2, 2617, 2555, 3, 2, 2, 2, 2617, 2560, 3, 2, 2, 2, 2617, 2561, 3, 2, 2,
	2, 2617, 2562, 3, 2, 2, 2, 2617, 2571, 3, 2, 2, 2, 2617, 2580, 3, 2, 2,
	2, 2617, 2587, 3, 2, 2, 2, 2617, 2594, 3, 2, 2, 2, 2617, 2607, 3, 2, 2,
	2, 2617, 2608, 3, 2, 2, 2, 2617, 2615, 3, 2, 2, 2, 2617, 2616, 3, 2, 2,
	2, 2618, 241, 3, 2, 2, 2, 2619, 2620, 7, 189, 2, 2, 2620, 2621, 5, 172,
	87, 2, 2621, 2622, 7, 169, 2, 2, 2622, 2623, 5, 172, 87, 2, 2623, 243,
	3, 2, 2, 2, 2624, 2625, 7, 189, 2, 2, 2625, 2626, 5, 186, 94, 2, 2626,
	2627, 7, 169, 2, 2, 2627, 2628, 5, 172, 87, 2, 2628, 245, 3, 2, 2, 2, 2629,
	2631, 7, 9, 2, 2, 2630, 2629, 3, 2, 2, 2, 2630, 2631, 3, 2, 2, 2, 2631,
	2632, 3, 2, 2, 2, 2632, 2633, 5, 248, 125, 2, 2633, 247, 3, 2, 2, 2, 2634,
	2636, 5, 326, 164, 2, 2635, 2637, 5, 250, 126, 2, 2636, 2635, 3, 2, 2,
	2, 2636, 2637, 3, 2, 2, 2, 2637, 249, 3, 2, 2, 2, 2638, 2640, 7, 192, 2,
	2, 2639, 2638, 3, 2, 2, 2, 2639, 2640, 3, 2, 2, 2, 2640, 2641, 3, 2, 2,
	2, 2641, 2642, 7, 428, 2, 2, 2642, 2647, 5, 254, 128, 2, 2643, 2644, 7,
	430, 2, 2, 2644, 2646, 5, 254, 128, 2, 2645, 2643, 3, 2, 2, 2, 2646, 2649,
	3, 2, 2, 2, 2647, 2645, 3, 2, 2, 2, 2647, 2648, 3, 2, 2, 2, 2648, 2650,
	3, 2, 2, 2, 2649, 2647, 3, 2, 2, 2, 2650, 2651, 7, 429, 2, 2, 2651, 251,
	3, 2, 2, 2, 2652, 2653, 7, 192, 2, 2, 2653, 2654, 7, 428, 2, 2, 2654, 2659,
	5, 254, 128, 2, 2655, 2656, 7, 430, 2, 2, 2656, 2658, 5, 254, 128, 2, 2657,
	2655, 3, 2, 2, 2, 2658, 2661, 3, 2, 2, 2, 2659, 2657, 3, 2, 2, 2, 2659,
	2660, 3, 2, 2, 2, 2660, 2662, 3, 2, 2, 2, 2661, 2659, 3, 2, 2, 2, 2662,
	2663, 7, 429, 2, 2, 2663, 253, 3, 2, 2, 2, 2664, 2666, 7, 311, 2, 2, 2665,
	2664, 3, 2, 2, 2, 2665, 2666, 3, 2, 2, 2, 2666, 2705, 3, 2, 2, 2, 2667,
	2668, 7, 90, 2, 2, 2668, 2669, 7, 428, 2, 2, 2669, 2674, 5, 256, 129, 2,
	2670, 2671, 7, 430, 2, 2, 2671, 2673, 5, 256, 129, 2, 2672, 2670, 3, 2,
	2, 2, 2673, 2676, 3, 2, 2, 2, 2674, 2672, 3, 2, 2, 2, 2674, 2675, 3, 2,
	2, 2, 2675, 2677, 3, 2, 2, 2, 2676, 2674, 3, 2, 2, 2, 2677, 2678, 7, 429,
	2, 2, 2678, 2706, 3, 2, 2, 2, 2679, 2680, 7, 90, 2, 2, 2680, 2681, 7, 411,
	2, 2, 2681, 2706, 5, 256, 129, 2, 2682, 2697, 7, 74, 2, 2, 2683, 2684,
	7, 428, 2, 2, 2684, 2685, 5, 256, 129, 2, 2685, 2686, 7, 428, 2, 2, 2686,
	2691, 7, 406, 2, 2, 2687, 2688, 7, 430, 2, 2, 2688, 2690, 7, 406, 2, 2,
	2689, 2687, 3, 2, 2, 2, 2690, 2693, 3, 2, 2, 2, 2691, 2689, 3, 2, 2, 2,
	2691, 2692, 3, 2, 2, 2, 2692, 2694, 3, 2, 2, 2, 2693, 2691, 3, 2, 2, 2,
	2694, 2695, 7, 429, 2, 2, 2695, 2696, 7, 429, 2, 2, 2696, 2698, 3, 2, 2,
	2, 2697, 2683, 3, 2, 2, 2, 2697, 2698, 3, 2, 2, 2, 2698, 2706, 3, 2, 2,
	2, 2699, 2706, 7, 360, 2, 2, 2700, 2706, 7, 365, 2, 2, 2701, 2702, 7, 366,
	2, 2, 2702, 2703, 7, 411, 2, 2, 2703, 2706, 7, 405, 2, 2, 2704, 2706, 7,
	406, 2, 2, 2705, 2667, 3, 2, 2, 2, 2705, 2679, 3, 2, 2, 2, 2705, 2682,
	3, 2, 2, 2, 2705, 2699, 3, 2, 2, 2, 2705, 2700, 3, 2, 2, 2, 2705, 2701,
	3, 2, 2, 2, 2705, 2704, 3, 2, 2, 2, 2705, 2706, 3, 2, 2, 2, 2706, 255,
	3, 2, 2, 2, 2707, 2710, 5, 326, 164, 2, 2708, 2710, 7, 405, 2, 2, 2709,
	2707, 3, 2, 2, 2, 2709, 2708, 3, 2, 2, 2, 2710, 257, 3, 2, 2, 2, 2711,
	2712, 7, 428, 2, 2, 2712, 2717, 5, 260, 131, 2, 2713, 2714, 7, 430, 2,
	2, 2714, 2716, 5, 260, 131, 2, 2715, 2713, 3, 2, 2, 2, 2716, 2719, 3, 2,
	2, 2, 2717, 2715, 3, 2, 2, 2, 2717, 2718, 3, 2, 2, 2, 2718, 2720, 3, 2,
	2, 2, 2719, 2717, 3, 2, 2, 2, 2720, 2721, 7, 429, 2, 2, 2721, 259, 3, 2,
	2, 2, 2722, 2725, 5, 326, 164, 2, 2723, 2725, 7, 407, 2, 2, 2724, 2722,
	3, 2, 2, 2, 2724, 2723, 3, 2, 2, 2, 2725, 261, 3, 2, 2, 2, 2726, 2727,
	7, 185, 2, 2, 2727, 2728, 7, 428, 2, 2, 2728, 2729, 5, 264, 133, 2, 2729,
	2737, 7, 429, 2, 2, 2730, 2731, 7, 430, 2, 2, 2731, 2732, 7, 428, 2, 2,
	2732, 2733, 5, 264, 133, 2, 2733, 2734, 7, 429, 2, 2, 2734, 2736, 3, 2,
	2, 2, 2735, 2730, 3, 2, 2, 2, 2736, 2739, 3, 2, 2, 2, 2737, 2735, 3, 2,
	2, 2, 2737, 2738, 3, 2, 2, 2, 2738, 263, 3, 2, 2, 2, 2739, 2737, 3, 2,
	2, 2, 2740, 2745, 5, 172, 87, 2, 2741, 2742, 7, 430, 2, 2, 2742, 2744,
	5, 172, 87, 2, 2743, 2741, 3, 2, 2, 2, 2744, 2747, 3, 2, 2, 2, 2745, 2743,
	3, 2, 2, 2, 2745, 2746, 3, 2, 2, 2, 2746, 265, 3, 2, 2, 2, 2747, 2745,
	3, 2, 2, 2, 2748, 2749, 9, 48, 2, 2, 2749, 2750, 7, 428, 2, 2, 2750, 2751,
	7, 429, 2, 2, 2751, 2759, 5, 272, 137, 2, 2752, 2753, 7, 315, 2, 2, 2753,
	2754, 7, 428, 2, 2, 2754, 2755, 5, 172, 87, 2, 2755, 2756, 7, 429, 2, 2,
	2756, 2757, 5, 272, 137, 2, 2757, 2759, 3, 2, 2, 2, 2758, 2748, 3, 2, 2,
	2, 2758, 2752, 3, 2, 2, 2, 2759, 267, 3, 2, 2, 2, 2760, 2761, 9, 49, 2,
	2, 2761, 2762, 7, 428, 2, 2, 2762, 2763, 5, 270, 136, 2, 2763, 2765, 7,
	429, 2, 2, 2764, 2766, 5, 272, 137, 2, 2765, 2764, 3, 2, 2, 2, 2765, 2766,
	3, 2, 2, 2, 2766, 2793, 3, 2, 2, 2, 2767, 2768, 9, 50, 2, 2, 2768, 2771,
	7, 428, 2, 2, 2769, 2772, 7, 433, 2, 2, 2770, 2772, 5, 270, 136, 2, 2771,
	2769, 3, 2, 2, 2, 2771, 2770, 3, 2, 2, 2, 2772, 2773, 3, 2, 2, 2, 2773,
	2775, 7, 429, 2, 2, 2774, 2776, 5, 272, 137, 2, 2775, 2774, 3, 2, 2, 2,
	2775, 2776, 3, 2, 2, 2, 2776, 2793, 3, 2, 2, 2, 2777, 2778, 7, 222, 2,
	2, 2778, 2779, 7, 428, 2, 2, 2779, 2780, 5, 270, 136, 2, 2780, 2781, 7,
	429, 2, 2, 2781, 2793, 3, 2, 2, 2, 2782, 2783, 7, 270, 2, 2, 2783, 2784,
	7, 428, 2, 2, 2784, 2785, 5, 172, 87, 2, 2785, 2786, 7, 429, 2, 2, 2786,
	2793, 3, 2, 2, 2, 2787, 2788, 7, 271, 2, 2, 2788, 2789, 7, 428, 2, 2, 2789,
	2790, 5, 264, 133, 2, 2790, 2791, 7, 429, 2, 2, 2791, 2793, 3, 2, 2, 2,
	2792, 2760, 3, 2, 2, 2, 2792, 2767, 3, 2, 2, 2, 2792, 2777, 3, 2, 2, 2,
	2792, 2782, 3, 2, 2, 2, 2792, 2787, 3, 2, 2, 2, 2793, 269, 3, 2, 2, 2,
	2794, 2796, 9, 37, 2, 2, 2795, 2794, 3, 2, 2, 2, 2795, 2796, 3, 2, 2, 2,
	2796, 2797, 3, 2, 2, 2, 2797, 2798, 5, 172, 87, 2, 2798, 271, 3, 2, 2,
	2, 2799, 2800, 7, 125, 2, 2, 2800, 2804, 7, 428, 2, 2, 2801, 2802, 7, 329,
	2, 2, 2802, 2803, 7, 18, 2, 2, 2803, 2805, 5, 264, 133, 2, 2804, 2801,
	3, 2, 2, 2, 2804, 2805, 3, 2, 2, 2, 2805, 2807, 3, 2, 2, 2, 2806, 2808,
	5, 200, 101, 2, 2807, 2806, 3, 2, 2, 2, 2807, 2808, 3, 2, 2, 2, 2808, 2810,
	3, 2, 2, 2, 2809, 2811, 5, 274, 138, 2, 2810, 2809, 3, 2, 2, 2, 2810, 2811,
	3, 2, 2, 2, 2811, 2812, 3, 2, 2, 2, 2812, 2813, 7, 429, 2, 2, 2813, 273,
	3, 2, 2, 2, 2814, 2815, 9, 51, 2, 2, 2815, 2816, 5, 276, 139, 2, 2816,
	275, 3, 2, 2, 2, 2817, 2824, 5, 280, 141, 2, 2818, 2819, 7, 14, 2, 2, 2819,
	2820, 5, 278, 140, 2, 2820, 2821, 7, 7, 2, 2, 2821, 2822, 5, 278, 140,
	2, 2822, 2824, 3, 2, 2, 2, 2823, 2817, 3, 2, 2, 2, 2823, 2818, 3, 2, 2,
	2, 2824, 277, 3, 2, 2, 2, 2825, 2828, 5, 280, 141, 2, 2826, 2828, 5, 282,
	142, 2, 2827, 2825, 3, 2, 2, 2, 2827, 2826, 3, 2, 2, 2, 2828, 279, 3, 2,
	2, 2, 2829, 2830, 7, 386, 2, 2, 2830, 2836, 7, 331, 2, 2, 2831, 2832, 7,
	405, 2, 2, 2832, 2836, 7, 331, 2, 2, 2833, 2834, 7, 40, 2, 2, 2834, 2836,
	7, 350, 2, 2, 2835, 2829, 3, 2, 2, 2, 2835, 2831, 3, 2, 2, 2, 2835, 2833,
	3, 2, 2, 2, 2836, 281, 3, 2, 2, 2, 2837, 2838, 7, 386, 2, 2, 2838, 2842,
	7, 262, 2, 2, 2839, 2840, 7, 405, 2, 2, 2840, 2842, 7, 262, 2, 2, 2841,
	2837, 3, 2, 2, 2, 2841, 2839, 3, 2, 2, 2, 2842, 283, 3, 2, 2, 2, 2843,
	2844, 7, 260, 2, 2, 2844, 2849, 5, 286, 144, 2, 2845, 2846, 7, 430, 2,
	2, 2846, 2848, 5, 286, 144, 2, 2847, 2845, 3, 2, 2, 2, 2848, 2851, 3, 2,
	2, 2, 2849, 2847, 3, 2, 2, 2, 2849, 2850, 3, 2, 2, 2, 2850, 2878, 3, 2,
	2, 2, 2851, 2849, 3, 2, 2, 2, 2852, 2853, 7, 241, 2, 2, 2853, 2856, 7,
	411, 2, 2, 2854, 2857, 5, 326, 164, 2, 2855, 2857, 7, 407, 2, 2, 2856,
	2854, 3, 2, 2, 2, 2856, 2855, 3, 2, 2, 2, 2857, 2878, 3, 2, 2, 2, 2858,
	2859, 7, 240, 2, 2, 2859, 2862, 7, 411, 2, 2, 2860, 2863, 5, 326, 164,
	2, 2861, 2863, 7, 407, 2, 2, 2862, 2860, 3, 2, 2, 2, 2862, 2861, 3, 2,
	2, 2, 2863, 2878, 3, 2, 2, 2, 2864, 2865, 7, 307, 2, 2, 2865, 2866, 7,
	411, 2, 2, 2866, 2878, 9, 13, 2, 2, 2867, 2868, 7, 380, 2, 2, 2868, 2869,
	7, 411, 2, 2, 2869, 2878, 9, 13, 2, 2, 2870, 2871, 7, 383, 2, 2, 2871,
	2872, 7, 411, 2, 2, 2872, 2878, 7, 405, 2, 2, 2873, 2874, 7, 239, 2, 2,
	2874, 2878, 9, 13, 2, 2, 2875, 2876, 7, 381, 2, 2, 2876, 2878, 9, 13, 2,
	2, 2877, 2843, 3, 2, 2, 2, 2877, 2852, 3, 2, 2, 2, 2877, 2858, 3, 2, 2,
	2, 2877, 2864, 3, 2, 2, 2, 2877, 2867, 3, 2, 2, 2, 2877, 2870, 3, 2, 2,
	2, 2877, 2873, 3, 2, 2, 2, 2877, 2875, 3, 2, 2, 2, 2878, 285, 3, 2, 2,
	2, 2879, 2886, 7, 428, 2, 2, 2880, 2881, 7, 312, 2, 2, 2881, 2882, 7, 411,
	2, 2, 2882, 2887, 9, 52, 2, 2, 2883, 2884, 7, 246, 2, 2, 2884, 2885, 7,
	411, 2, 2, 2885, 2887, 7, 407, 2, 2, 2886, 2880, 3, 2, 2, 2, 2886, 2883,
	3, 2, 2, 2, 2887, 2888, 3, 2, 2, 2, 2888, 2889, 7, 429, 2, 2, 2889, 287,
	3, 2, 2, 2, 2890, 2893, 5, 290, 146, 2, 2891, 2893, 5, 292, 147, 2, 2892,
	2890, 3, 2, 2, 2, 2892, 2891, 3, 2, 2, 2, 2893, 289, 3, 2, 2, 2, 2894,
	2895, 7, 258, 2, 2, 2895, 2898, 5, 326, 164, 2, 2896, 2897, 7, 34, 2, 2,
	2897, 2899, 7, 260, 2, 2, 2898, 2896, 3, 2, 2, 2, 2898, 2899, 3, 2, 2,
	2, 2899, 2901, 3, 2, 2, 2, 2900, 2902, 7, 50, 2, 2, 2901, 2900, 3, 2, 2,
	2, 2901, 2902, 3, 2, 2, 2, 2902, 2905, 3, 2, 2, 2, 2903, 2904, 7, 34, 2,
	2, 2904, 2906, 7, 299, 2, 2, 2905, 2903, 3, 2, 2, 2, 2905, 2906, 3, 2,
	2, 2, 2906, 2907, 3, 2, 2, 2, 2907, 2912, 5, 292, 147, 2, 2908, 2909, 7,
	430, 2, 2, 2909, 2911, 5, 292, 147, 2, 2910, 2908, 3, 2, 2, 2, 2911, 2914,
	3, 2, 2, 2, 2912, 2910, 3, 2, 2, 2, 2912, 2913, 3, 2, 2, 2, 2913, 291,
	3, 2, 2, 2, 2914, 2912, 3, 2, 2, 2, 2915, 2916, 7, 428, 2, 2, 2916, 2917,
	7, 306, 2, 2, 2917, 2920, 7, 411, 2, 2, 2918, 2921, 5, 326, 164, 2, 2919,
	2921, 7, 407, 2, 2, 2920, 2918, 3, 2, 2, 2, 2920, 2919, 3, 2, 2, 2, 2921,
	2923, 3, 2, 2, 2, 2922, 2924, 7, 430, 2, 2, 2923, 2922, 3, 2, 2, 2, 2923,
	2924, 3, 2, 2, 2, 2924, 2925, 3, 2, 2, 2, 2925, 2926, 7, 71, 2, 2, 2926,
	2927, 7, 411, 2, 2, 2927, 2929, 7, 407, 2, 2, 2928, 2930, 7, 430, 2, 2,
	2929, 2928, 3, 2, 2, 2, 2929, 2930, 3, 2, 2, 2, 2930, 2937, 3, 2, 2, 2,
	2931, 2932, 7, 364, 2, 2, 2932, 2933, 7, 411, 2, 2, 2933, 2935, 5, 334,
	168, 2, 2934, 2936, 7, 430, 2, 2, 2935, 2934, 3, 2, 2, 2, 2935, 2936, 3,
	2, 2, 2, 2936, 2938, 3, 2, 2, 2, 2937, 2931, 3, 2, 2, 2, 2937, 2938, 3,
	2, 2, 2, 2938, 2948, 3, 2, 2, 2, 2939, 2940, 7, 297, 2, 2, 2940, 2943,
	7, 411, 2, 2, 2941, 2944, 5, 334, 168, 2, 2942, 2944, 7, 389, 2, 2, 2943,
	2941, 3, 2, 2, 2, 2943, 2942, 3, 2, 2, 2, 2944, 2946, 3, 2, 2, 2, 2945,
	2947, 7, 430, 2, 2, 2946, 2945, 3, 2, 2, 2, 2946, 2947, 3, 2, 2, 2, 2947,
	2949, 3, 2, 2, 2, 2948, 2939, 3, 2, 2, 2, 2948, 2949, 3, 2, 2, 2, 2949,
	2956, 3, 2, 2, 2, 2950, 2951, 7, 259, 2, 2, 2951, 2952, 7, 411, 2, 2, 2952,
	2954, 5, 334, 168, 2, 2953, 2955, 7, 430, 2, 2, 2954, 2953, 3, 2, 2, 2,
	2954, 2955, 3, 2, 2, 2, 2955, 2957, 3, 2, 2, 2, 2956, 2950, 3, 2, 2, 2,
	2956, 2957, 3, 2, 2, 2, 2957, 2958, 3, 2, 2, 2, 2958, 2959, 7, 429, 2,
	2, 2959, 293, 3, 2, 2, 2, 2960, 2961, 5, 326, 164, 2, 2961, 2962, 7, 423,
	2, 2, 2962, 2963, 5, 326, 164, 2, 2963, 2964, 7, 423, 2, 2, 2964, 2965,
	5, 326, 164, 2, 2965, 2966, 7, 423, 2, 2, 2966, 2978, 3, 2, 2, 2, 2967,
	2968, 5, 326, 164, 2, 2968, 2970, 7, 423, 2, 2, 2969, 2971, 5, 326, 164,
	2, 2970, 2969, 3, 2, 2, 2, 2970, 2971, 3, 2, 2, 2, 2971, 2972, 3, 2, 2,
	2, 2972, 2973, 7, 423, 2, 2, 2973, 2978, 3, 2, 2, 2, 2974, 2975, 5, 326,
	164, 2, 2975, 2976, 7, 423, 2, 2, 2976, 2978, 3, 2, 2, 2, 2977, 2960, 3,
	2, 2, 2, 2977, 2967, 3, 2, 2, 2, 2977, 2974, 3, 2, 2, 2, 2977, 2978, 3,
	2, 2, 2, 2978, 2979, 3, 2, 2, 2, 2979, 2980, 5, 326, 164, 2, 2980, 295,
	3, 2, 2, 2, 2981, 2982, 5, 326, 164, 2, 2982, 2984, 7, 423, 2, 2, 2983,
	2985, 5, 326, 164, 2, 2984, 2983, 3, 2, 2, 2, 2984, 2985, 3, 2, 2, 2, 2985,
	2986, 3, 2, 2, 2, 2986, 2987, 7, 423, 2, 2, 2987, 2992, 3, 2, 2, 2, 2988,
	2989, 5, 326, 164, 2, 2989, 2990, 7, 423, 2, 2, 2990, 2992, 3, 2, 2, 2,
	2991, 2981, 3, 2, 2, 2, 2991, 2988, 3, 2, 2, 2, 2991, 2992, 3, 2, 2, 2,
	2992, 2993, 3, 2, 2, 2, 2993, 2994, 5, 326, 164, 2, 2994, 297, 3, 2, 2,
	2, 2995, 2996, 5, 326, 164, 2, 2996, 2997, 7, 423, 2, 2, 2997, 2999, 3,
	2, 2, 2, 2998, 2995, 3, 2, 2, 2, 2998, 2999, 3, 2, 2, 2, 2999, 3000, 3,
	2, 2, 2, 3000, 3001, 5, 326, 164, 2, 3001, 299, 3, 2, 2, 2, 3002, 3003,
	5, 326, 164, 2, 3003, 3005, 7, 423, 2, 2, 3004, 3006, 5, 326, 164, 2, 3005,
	3004, 3, 2, 2, 2, 3005, 3006, 3, 2, 2, 2, 3006, 3007, 3, 2, 2, 2, 3007,
	3008, 7, 423, 2, 2, 3008, 3013, 3, 2, 2, 2, 3009, 3010, 5, 326, 164, 2,
	3010, 3011, 7, 423, 2, 2, 3011, 3013, 3, 2, 2, 2, 3012, 3002, 3, 2, 2,
	2, 3012, 3009, 3, 2, 2, 2, 3012, 3013, 3, 2, 2, 2, 3013, 3014, 3, 2, 2,
	2, 3014, 3015, 5, 326, 164, 2, 3015, 301, 3, 2, 2, 2, 3016, 3019, 5, 294,
	148, 2, 3017, 3019, 7, 404, 2, 2, 3018, 3016, 3, 2, 2, 2, 3018, 3017, 3,
	2, 2, 2, 3019, 303, 3, 2, 2, 2, 3020, 3021, 5, 296, 149, 2, 3021, 3022,
	7, 423, 2, 2, 3022, 3024, 3, 2, 2, 2, 3023, 3020, 3, 2, 2, 2, 3023, 3024,
	3, 2, 2, 2, 3024, 3025, 3, 2, 2, 2, 3025, 3026, 5, 326, 164, 2, 3026, 305,
	3, 2, 2, 2, 3027, 3032, 5, 326, 164, 2, 3028, 3029, 7, 430, 2, 2, 3029,
	3031, 5, 326, 164, 2, 3030, 3028, 3, 2, 2, 2, 3031, 3034, 3, 2, 2, 2, 3032,
	3030, 3, 2, 2, 2, 3032, 3033, 3, 2, 2, 2, 3033, 307, 3, 2, 2, 2, 3034,
	3032, 3, 2, 2, 2, 3035, 3038, 5, 326, 164, 2, 3036, 3038, 7, 404, 2, 2,
	3037, 3035, 3, 2, 2, 2, 3037, 3036, 3, 2, 2, 2, 3038, 309, 3, 2, 2, 2,
	3039, 3040, 9, 13, 2, 2, 3040, 311, 3, 2, 2, 2, 3041, 3042, 9, 53, 2, 2,
	3042, 313, 3, 2, 2, 2, 3043, 3045, 7, 109, 2, 2, 3044, 3043, 3, 2, 2, 2,
	3044, 3045, 3, 2, 2, 2, 3045, 3046, 3, 2, 2, 2, 3046, 3047, 7, 110, 2,
	2, 3047, 315, 3, 2, 2, 2, 3048, 3054, 5, 300, 151, 2, 3049, 3054, 7, 147,
	2, 2, 3050, 3054, 7, 99, 2, 2, 3051, 3054, 7, 214, 2, 2, 3052, 3054, 7,
	221, 2, 2, 3053, 3048, 3, 2, 2, 2, 3053, 3049, 3, 2, 2, 2, 3053, 3050,
	3, 2, 2, 2, 3053, 3051, 3, 2, 2, 2, 3053, 3052, 3, 2, 2, 2, 3054, 317,
	3, 2, 2, 2, 3055, 3057, 5, 326, 164, 2, 3056, 3058, 7, 85, 2, 2, 3057,
	3056, 3, 2, 2, 2, 3057, 3058, 3, 2, 2, 2, 3058, 3066, 3, 2, 2, 2, 3059,
	3060, 7, 428, 2, 2, 3060, 3063, 9, 54, 2, 2, 3061, 3062, 7, 430, 2, 2,
	3062, 3064, 7, 405, 2, 2, 3063, 3061, 3, 2, 2, 2, 3063, 3064, 3, 2, 2,
	2, 3064, 3065, 3, 2, 2, 2, 3065, 3067, 7, 429, 2, 2, 3066, 3059, 3, 2,
	2, 2, 3066, 3067, 3, 2, 2, 2, 3067, 319, 3, 2, 2, 2, 3068, 3071, 7, 110,
	2, 2, 3069, 3071, 5, 322, 162, 2, 3070, 3068, 3, 2, 2, 2, 3070, 3069, 3,
	2, 2, 2, 3071, 321, 3, 2, 2, 2, 3072, 3088, 7, 407, 2, 2, 3073, 3088, 7,
	408, 2, 2, 3074, 3076, 5, 324, 163, 2, 3075, 3074, 3, 2, 2, 2, 3075, 3076,
	3, 2, 2, 2, 3076, 3077, 3, 2, 2, 2, 3077, 3088, 7, 405, 2, 2, 3078, 3080,
	5, 324, 163, 2, 3079, 3078, 3, 2, 2, 2, 3079, 3080, 3, 2, 2, 2, 3080, 3081,
	3, 2, 2, 2, 3081, 3088, 9, 55, 2, 2, 3082, 3084, 5, 324, 163, 2, 3083,
	3082, 3, 2, 2, 2, 3083, 3084, 3, 2, 2, 2, 3084, 3085, 3, 2, 2, 2, 3085,
	3086, 7, 427, 2, 2, 3086, 3088, 9, 56, 2, 2, 3087, 3072, 3, 2, 2, 2, 3087,
	3073, 3, 2, 2, 2, 3087, 3075, 3, 2, 2, 2, 3087, 3079, 3, 2, 2, 2, 3087,
	3083, 3, 2, 2, 2, 3088, 323, 3, 2, 2, 2, 3089, 3090, 9, 33, 2, 2, 3090,
	325, 3, 2, 2, 2, 3091, 3095, 5, 328, 165, 2, 3092, 3095, 7, 402, 2, 2,
	3093, 3095, 7, 403, 2, 2, 3094, 3091, 3, 2, 2, 2, 3094, 3092, 3, 2, 2,
	2, 3094, 3093, 3, 2, 2, 2, 3095, 327, 3, 2, 2, 2, 3096, 3097, 9, 57, 2,
	2, 3097, 329, 3, 2, 2, 2, 3098, 3114, 7, 411, 2, 2, 3099, 3114, 7, 412,
	2, 2, 3100, 3114, 7, 413, 2, 2, 3101, 3102, 7, 413, 2, 2, 3102, 3114, 7,
	411, 2, 2, 3103, 3104, 7, 412, 2, 2, 3104, 3114, 7, 411, 2, 2, 3105, 3106,
	7, 413, 2, 2, 3106, 3114, 7, 412, 2, 2, 3107, 3108, 7, 414, 2, 2, 3108,
	3114, 7, 411, 2, 2, 3109, 3110, 7, 414, 2, 2, 3110, 3114, 7, 412, 2, 2,
	3111, 3112, 7, 414, 2, 2, 3112, 3114, 7, 413, 2, 2, 3113, 3098, 3, 2, 2,
	2, 3113, 3099, 3, 2, 2, 2, 3113, 3100, 3, 2, 2, 2, 3113, 3101, 3, 2, 2,
	2, 3113, 3103, 3, 2, 2, 2, 3113, 3105, 3, 2, 2, 2, 3113, 3107, 3, 2, 2,
	2, 3113, 3109, 3, 2, 2, 2, 3113, 3111, 3, 2, 2, 2, 3114, 331, 3, 2, 2,
	2, 3115, 3116, 9, 58, 2, 2, 3116, 333, 3, 2, 2, 2, 3117, 3119, 7, 405,
	2, 2, 3118, 3120, 9, 59, 2, 2, 3119, 3118, 3, 2, 2, 2, 3119, 3120, 3, 2,
	2, 2, 3120, 335, 3, 2, 2, 2, 461, 339, 346, 350, 354, 360, 366, 383, 387,
	390, 394, 398, 402, 407, 412, 419, 422, 426, 429, 437, 440, 445, 448, 453,
	458, 461, 466, 472, 479, 483, 485, 490, 503, 508, 510, 519, 522, 530, 532,
	535, 539, 542, 546, 553, 557, 559, 561, 564, 567, 570, 576, 579, 587, 589,
	592, 596, 599, 605, 608, 612, 615, 618, 625, 628, 632, 635, 638, 641, 644,
	652, 654, 658, 661, 669, 673, 677, 684, 688, 690, 692, 695, 698, 701, 709,
	715, 721, 723, 727, 730, 733, 738, 743, 746, 754, 758, 765, 768, 777, 780,
	784, 792, 795, 799, 802, 811, 815, 819, 822, 829, 832, 839, 843, 845, 853,
	856, 860, 869, 872, 876, 880, 883, 888, 904, 908, 914, 916, 919, 927, 933,
	938, 941, 950, 958, 961, 968, 971, 1008, 1011, 1017, 1029, 1031, 1034,
	1058, 1069, 1077, 1088, 1093, 1096, 1104, 1114, 1140, 1146, 1157, 1171,
	1179, 1186, 1209, 1222, 1228, 1233, 1236, 1242, 1246, 1253, 1262, 1266,
	1272, 1279, 1283, 1296, 1302, 1319, 1323, 1331, 1335, 1343, 1347, 1349,
	1353, 1357, 1361, 1365, 1371, 1375, 1377, 1382, 1390, 1393, 1396, 1405,
	1410, 1415, 1418, 1420, 1424, 1428, 1431, 1435, 1441, 1446, 1453, 1455,
	1459, 1466, 1470, 1473, 1482, 1485, 1487, 1496, 1507, 1511, 1513, 1515,
	1521, 1526, 1533, 1546, 1548, 1550, 1553, 1556, 1563, 1566, 1572, 1577,
	1579, 1582, 1588, 1596, 1598, 1601, 1605, 1608, 1614, 1617, 1621, 1624,
	1630, 1633, 1635, 1639, 1644, 1652, 1657, 1666, 1671, 1676, 1682, 1686,
	1689, 1693, 1699, 1707, 1712, 1714, 1717, 1722, 1727, 1730, 1735, 1738,
	1741, 1747, 1753, 1757, 1762, 1765, 1770, 1774, 1778, 1784, 1790, 1799,
	1809, 1819, 1821, 1823, 1826, 1829, 1840, 1842, 1844, 1847, 1850, 1853,
	1856, 1859, 1862, 1874, 1877, 1880, 1889, 1892, 1895, 1902, 1905, 1919,
	1922, 1929, 1940, 1944, 1957, 1961, 1969, 1973, 1991, 2006, 2008, 2019,
	2026, 2033, 2041, 2050, 2054, 2064, 2071, 2079, 2087, 2091, 2113, 2122,
	2128, 2134, 2140, 2151, 2158, 2163, 2168, 2172, 2181, 2183, 2187, 2192,
	2196, 2198, 2203, 2207, 2211, 2220, 2223, 2227, 2236, 2248, 2250, 2258,
	2266, 2269, 2271, 2278, 2282, 2293, 2327, 2343, 2349, 2356, 2362, 2367,
	2375, 2378, 2380, 2387, 2395, 2401, 2406, 2410, 2415, 2417, 2424, 2428,
	2435, 2437, 2439, 2450, 2454, 2456, 2459, 2475, 2479, 2499, 2503, 2507,
	2518, 2525, 2547, 2599, 2603, 2617, 2630, 2636, 2639, 2647, 2659, 2665,
	2674, 2691, 2697, 2705, 2709, 2717, 2724, 2737, 2745, 2758, 2765, 2771,
	2775, 2792, 2795, 2804, 2807, 2810, 2823, 2827, 2835, 2841, 2849, 2856,
	2862, 2877, 2886, 2892, 2898, 2901, 2905, 2912, 2920, 2923, 2929, 2935,
	2937, 2943, 2946, 2948, 2954, 2956, 2970, 2977, 2984, 2991, 2998, 3005,
	3012, 3018, 3023, 3032, 3037, 3044, 3053, 3057, 3063, 3066, 3070, 3075,
	3079, 3083, 3087, 3094, 3113, 3119,
}

var deserializer = antlr.NewATNDeserializer(nil)

var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "'='", "'>'", "'<'",
	"'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='",
	"'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'",
	"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'",
}

var symbolicNames = []string{
	"", "HADR_options", "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION",
	"BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", "CASCADE",
	"CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED",
	"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT",
	"CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", "CROSS",
	"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
	"CURSOR", "DATABASE", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE",
	"DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DUMP",
	"ELSE", "END", "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT",
	"EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", "FOR", "FORCESEEK",
	"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GOTO",
	"GRANT", "GROUP", "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT",
	"IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", "IS", "JOIN",
	"KEY", "KILL", "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "MERGE", "NATIONAL",
	"NOCHECK", "NONCLUSTERED", "NONE", "NOT", "NULL", "NULLIF", "OF", "OFF",
	"OFFSETS", "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML",
	"OPTION", "OR", "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT",
	"PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC",
	"RAISERROR", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION",
	"RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", "RIGHT", "ROLLBACK",
	"ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT",
	"SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE",
	"SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER",
	"TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION",
	"TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT",
	"UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", "VARYING", "VIEW", "WAITFOR",
	"WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", "AFTER",
	"ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT",
	"ANSI_PADDING", "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP",
	"AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS",
	"AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BINARY_CHECKSUM", "BULK_LOGGED",
	"CALLER", "CAST", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM",
	"CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL",
	"CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT",
	"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION",
	"DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE",
	"DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DIRECTORY_NAME",
	"DISABLE", "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", "ENABLE_BROKER",
	"ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", "EXPAND", "FAST", "FAST_FORWARD",
	"FILEGROUP", "FILEGROWTH", "FILESTREAM", "FIRST", "FOLLOWING", "FORCE",
	"FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING",
	"GROUPING_ID", "HADR", "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX",
	"IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", "INSERTED", "ISOLATION",
	"KB", "KEEP", "KEEPFIXED", "KEYSET", "LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION",
	"LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB",
	"MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION",
	"MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_BROKER", "NEXT",
	"NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO_WAIT",
	"NTILE", "NUMBER", "NUMERIC_ROUNDABORT", "OFFLINE", "OFFSET", "ONLINE",
	"ONLY", "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY",
	"PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", "PRIOR", "PRIVILEGES",
	"QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT",
	"READ_ONLY", "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS",
	"RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", "ROBUST", "ROOT",
	"ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", "SCROLL",
	"SCROLL_LOCKS", "SECONDS", "SELF", "SERIALIZABLE", "SHOWPLAN", "SIMPLE",
	"SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STATIC",
	"STATS_STREAM", "STDEV", "STDEVP", "SUM", "TAKE", "TARGET_RECOVERY_TIME",
	"TB", "TEXTIMAGE_ON", "THROW", "TIES", "TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS",
	"TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING",
	"UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VAR", "VARP",
	"VIEWS", "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION",
	"SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID",
	"LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL",
	"GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN",
	"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT",
	"UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA",
	"SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT",
	"BIT_OR", "BIT_AND", "BIT_XOR",
}

var ruleNames = []string{
	"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause",
	"cfl_statement", "another_statement", "delete_statement", "delete_statement_from",
	"insert_statement", "insert_statement_value", "select_statement", "update_statement",
	"output_clause", "output_dml_list_elem", "output_column_name", "create_database",
	"create_index", "create_procedure", "procedure_param", "procedure_option",
	"create_statistics", "create_table", "create_view", "view_attribute", "alter_table",
	"alter_database", "database_optionspec", "auto_option", "change_tracking_option",
	"change_tracking_option_list", "containment_option", "cursor_option", "date_correlation_optimization_option",
	"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option",
	"delayed_durability_option", "external_access_option", "mixed_page_allocation_option",
	"parameterization_option", "recovery_option", "service_broker_option",
	"snapshot_option", "sql_option", "target_recovery_time_option", "termination",
	"drop_index", "drop_procedure", "drop_statistics", "drop_table", "drop_view",
	"create_type", "drop_type", "rowset_function_limited", "openquery", "opendatasource",
	"declare_statement", "cursor_statement", "execute_statement", "execute_statement_arg",
	"execute_var_string", "security_statement", "grant_permission", "set_statement",
	"transaction_statement", "go_statement", "use_statement", "execute_clause",
	"declare_local", "table_type_definition", "column_def_table_constraints",
	"column_def_table_constraint", "column_definition", "column_constraint",
	"table_constraint", "index_options", "index_option", "declare_cursor",
	"declare_set_cursor_common", "fetch_cursor", "set_special", "constant_LOCAL_ID",
	"expression", "constant_expression", "subquery", "with_expression", "common_table_expression",
	"update_elem", "search_condition_list", "search_condition", "search_condition_and",
	"search_condition_not", "predicate", "query_expression", "union", "query_specification",
	"order_by_clause", "for_clause", "xml_common_directives", "order_by_expression",
	"group_by_item", "option_clause", "option", "optimize_for_arg", "select_list",
	"select_list_elem", "table_sources", "table_source", "table_source_item_joined",
	"table_source_item", "change_table", "join_part", "table_name_with_hint",
	"rowset_function", "bulk_option", "derived_table", "function_call", "switch_section",
	"switch_search_condition_section", "as_table_alias", "table_alias", "with_table_hints",
	"insert_with_table_hints", "table_hint", "index_value", "column_alias_list",
	"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function",
	"aggregate_windowed_function", "all_distinct_expression", "over_clause",
	"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding",
	"window_frame_following", "create_database_option", "database_filestream_option",
	"database_file_spec", "file_group", "file_spec", "full_table_name", "table_name",
	"simple_name", "func_proc_name", "ddl_object", "full_column_name", "column_name_list",
	"cursor_name", "on_off", "clustered", "null_notnull", "scalar_function_name",
	"data_type", "default_value", "constant", "sign", "id", "simple_id", "comparison_operator",
	"assignment_operator", "file_size",
}

type tsqlParser struct {
	*antlr.BaseParser
}

func NewtsqlParser(input antlr.TokenStream) *tsqlParser {
	var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	var sharedContextCache = antlr.NewPredictionContextCache()

	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}

	this := new(tsqlParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, sharedContextCache)
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "tsql.g4"

	return this
}

// tsqlParser tokens.
const (
	tsqlParserEOF                                   = antlr.TokenEOF
	tsqlParserHADR_options                          = 1
	tsqlParserADD                                   = 2
	tsqlParserALL                                   = 3
	tsqlParserALTER                                 = 4
	tsqlParserAND                                   = 5
	tsqlParserANY                                   = 6
	tsqlParserAS                                    = 7
	tsqlParserASC                                   = 8
	tsqlParserAUTHORIZATION                         = 9
	tsqlParserBACKUP                                = 10
	tsqlParserBEGIN                                 = 11
	tsqlParserBETWEEN                               = 12
	tsqlParserBREAK                                 = 13
	tsqlParserBROWSE                                = 14
	tsqlParserBULK                                  = 15
	tsqlParserBY                                    = 16
	tsqlParserCASCADE                               = 17
	tsqlParserCASE                                  = 18
	tsqlParserCHANGETABLE                           = 19
	tsqlParserCHANGES                               = 20
	tsqlParserCHECK                                 = 21
	tsqlParserCHECKPOINT                            = 22
	tsqlParserCLOSE                                 = 23
	tsqlParserCLUSTERED                             = 24
	tsqlParserCOALESCE                              = 25
	tsqlParserCOLLATE                               = 26
	tsqlParserCOLUMN                                = 27
	tsqlParserCOMMIT                                = 28
	tsqlParserCOMPUTE                               = 29
	tsqlParserCONSTRAINT                            = 30
	tsqlParserCONTAINMENT                           = 31
	tsqlParserCONTAINS                              = 32
	tsqlParserCONTAINSTABLE                         = 33
	tsqlParserCONTINUE                              = 34
	tsqlParserCONVERT                               = 35
	tsqlParserCREATE                                = 36
	tsqlParserCROSS                                 = 37
	tsqlParserCURRENT                               = 38
	tsqlParserCURRENT_DATE                          = 39
	tsqlParserCURRENT_TIME                          = 40
	tsqlParserCURRENT_TIMESTAMP                     = 41
	tsqlParserCURRENT_USER                          = 42
	tsqlParserCURSOR                                = 43
	tsqlParserDATABASE                              = 44
	tsqlParserDBCC                                  = 45
	tsqlParserDEALLOCATE                            = 46
	tsqlParserDECLARE                               = 47
	tsqlParserDEFAULT                               = 48
	tsqlParserDELETE                                = 49
	tsqlParserDENY                                  = 50
	tsqlParserDESC                                  = 51
	tsqlParserDISK                                  = 52
	tsqlParserDISTINCT                              = 53
	tsqlParserDISTRIBUTED                           = 54
	tsqlParserDOUBLE                                = 55
	tsqlParserDROP                                  = 56
	tsqlParserDUMP                                  = 57
	tsqlParserELSE                                  = 58
	tsqlParserEND                                   = 59
	tsqlParserERRLVL                                = 60
	tsqlParserESCAPE                                = 61
	tsqlParserEXCEPT                                = 62
	tsqlParserEXECUTE                               = 63
	tsqlParserEXISTS                                = 64
	tsqlParserEXIT                                  = 65
	tsqlParserEXTERNAL                              = 66
	tsqlParserFETCH                                 = 67
	tsqlParserFILE                                  = 68
	tsqlParserFILENAME                              = 69
	tsqlParserFILLFACTOR                            = 70
	tsqlParserFOR                                   = 71
	tsqlParserFORCESEEK                             = 72
	tsqlParserFOREIGN                               = 73
	tsqlParserFREETEXT                              = 74
	tsqlParserFREETEXTTABLE                         = 75
	tsqlParserFROM                                  = 76
	tsqlParserFULL                                  = 77
	tsqlParserFUNCTION                              = 78
	tsqlParserGOTO                                  = 79
	tsqlParserGRANT                                 = 80
	tsqlParserGROUP                                 = 81
	tsqlParserHAVING                                = 82
	tsqlParserIDENTITY                              = 83
	tsqlParserIDENTITYCOL                           = 84
	tsqlParserIDENTITY_INSERT                       = 85
	tsqlParserIF                                    = 86
	tsqlParserIN                                    = 87
	tsqlParserINDEX                                 = 88
	tsqlParserINNER                                 = 89
	tsqlParserINSERT                                = 90
	tsqlParserINTERSECT                             = 91
	tsqlParserINTO                                  = 92
	tsqlParserIS                                    = 93
	tsqlParserJOIN                                  = 94
	tsqlParserKEY                                   = 95
	tsqlParserKILL                                  = 96
	tsqlParserLEFT                                  = 97
	tsqlParserLIKE                                  = 98
	tsqlParserLINENO                                = 99
	tsqlParserLOAD                                  = 100
	tsqlParserLOG                                   = 101
	tsqlParserMERGE                                 = 102
	tsqlParserNATIONAL                              = 103
	tsqlParserNOCHECK                               = 104
	tsqlParserNONCLUSTERED                          = 105
	tsqlParserNONE                                  = 106
	tsqlParserNOT                                   = 107
	tsqlParserNULL                                  = 108
	tsqlParserNULLIF                                = 109
	tsqlParserOF                                    = 110
	tsqlParserOFF                                   = 111
	tsqlParserOFFSETS                               = 112
	tsqlParserON                                    = 113
	tsqlParserOPEN                                  = 114
	tsqlParserOPENDATASOURCE                        = 115
	tsqlParserOPENQUERY                             = 116
	tsqlParserOPENROWSET                            = 117
	tsqlParserOPENXML                               = 118
	tsqlParserOPTION                                = 119
	tsqlParserOR                                    = 120
	tsqlParserORDER                                 = 121
	tsqlParserOUTER                                 = 122
	tsqlParserOVER                                  = 123
	tsqlParserPARTIAL                               = 124
	tsqlParserPERCENT                               = 125
	tsqlParserPIVOT                                 = 126
	tsqlParserPLAN                                  = 127
	tsqlParserPRECISION                             = 128
	tsqlParserPRIMARY                               = 129
	tsqlParserPRINT                                 = 130
	tsqlParserPROC                                  = 131
	tsqlParserPROCEDURE                             = 132
	tsqlParserPUBLIC                                = 133
	tsqlParserRAISERROR                             = 134
	tsqlParserREAD                                  = 135
	tsqlParserREADTEXT                              = 136
	tsqlParserRECONFIGURE                           = 137
	tsqlParserREFERENCES                            = 138
	tsqlParserREPLICATION                           = 139
	tsqlParserRESTORE                               = 140
	tsqlParserRESTRICT                              = 141
	tsqlParserRETURN                                = 142
	tsqlParserREVERT                                = 143
	tsqlParserREVOKE                                = 144
	tsqlParserRIGHT                                 = 145
	tsqlParserROLLBACK                              = 146
	tsqlParserROWCOUNT                              = 147
	tsqlParserROWGUIDCOL                            = 148
	tsqlParserRULE                                  = 149
	tsqlParserSAVE                                  = 150
	tsqlParserSCHEMA                                = 151
	tsqlParserSECURITYAUDIT                         = 152
	tsqlParserSELECT                                = 153
	tsqlParserSEMANTICKEYPHRASETABLE                = 154
	tsqlParserSEMANTICSIMILARITYDETAILSTABLE        = 155
	tsqlParserSEMANTICSIMILARITYTABLE               = 156
	tsqlParserSESSION_USER                          = 157
	tsqlParserSET                                   = 158
	tsqlParserSETUSER                               = 159
	tsqlParserSHUTDOWN                              = 160
	tsqlParserSOME                                  = 161
	tsqlParserSTATISTICS                            = 162
	tsqlParserSYSTEM_USER                           = 163
	tsqlParserTABLE                                 = 164
	tsqlParserTABLESAMPLE                           = 165
	tsqlParserTEXTSIZE                              = 166
	tsqlParserTHEN                                  = 167
	tsqlParserTO                                    = 168
	tsqlParserTOP                                   = 169
	tsqlParserTRAN                                  = 170
	tsqlParserTRANSACTION                           = 171
	tsqlParserTRIGGER                               = 172
	tsqlParserTRUNCATE                              = 173
	tsqlParserTRY_CONVERT                           = 174
	tsqlParserTSEQUAL                               = 175
	tsqlParserUNION                                 = 176
	tsqlParserUNIQUE                                = 177
	tsqlParserUNPIVOT                               = 178
	tsqlParserUPDATE                                = 179
	tsqlParserUPDATETEXT                            = 180
	tsqlParserUSE                                   = 181
	tsqlParserUSER                                  = 182
	tsqlParserVALUES                                = 183
	tsqlParserVARYING                               = 184
	tsqlParserVIEW                                  = 185
	tsqlParserWAITFOR                               = 186
	tsqlParserWHEN                                  = 187
	tsqlParserWHERE                                 = 188
	tsqlParserWHILE                                 = 189
	tsqlParserWITH                                  = 190
	tsqlParserWITHIN                                = 191
	tsqlParserWRITETEXT                             = 192
	tsqlParserABSOLUTE                              = 193
	tsqlParserAFTER                                 = 194
	tsqlParserALLOWED                               = 195
	tsqlParserALLOW_SNAPSHOT_ISOLATION              = 196
	tsqlParserANSI_NULLS                            = 197
	tsqlParserANSI_NULL_DEFAULT                     = 198
	tsqlParserANSI_PADDING                          = 199
	tsqlParserANSI_WARNINGS                         = 200
	tsqlParserAPPLY                                 = 201
	tsqlParserARITHABORT                            = 202
	tsqlParserAUTO                                  = 203
	tsqlParserAUTO_CLEANUP                          = 204
	tsqlParserAUTO_CLOSE                            = 205
	tsqlParserAUTO_CREATE_STATISTICS                = 206
	tsqlParserAUTO_SHRINK                           = 207
	tsqlParserAUTO_UPDATE_STATISTICS                = 208
	tsqlParserAUTO_UPDATE_STATISTICS_ASYNC          = 209
	tsqlParserAVG                                   = 210
	tsqlParserBASE64                                = 211
	tsqlParserBINARY_CHECKSUM                       = 212
	tsqlParserBULK_LOGGED                           = 213
	tsqlParserCALLER                                = 214
	tsqlParserCAST                                  = 215
	tsqlParserCATCH                                 = 216
	tsqlParserCHANGE_RETENTION                      = 217
	tsqlParserCHANGE_TRACKING                       = 218
	tsqlParserCHECKSUM                              = 219
	tsqlParserCHECKSUM_AGG                          = 220
	tsqlParserCOMMITTED                             = 221
	tsqlParserCOMPATIBILITY_LEVEL                   = 222
	tsqlParserCONCAT                                = 223
	tsqlParserCONCAT_NULL_YIELDS_NULL               = 224
	tsqlParserCONTROL                               = 225
	tsqlParserCOOKIE                                = 226
	tsqlParserCOUNT                                 = 227
	tsqlParserCOUNT_BIG                             = 228
	tsqlParserCURSOR_CLOSE_ON_COMMIT                = 229
	tsqlParserCURSOR_DEFAULT                        = 230
	tsqlParserDATEADD                               = 231
	tsqlParserDATEDIFF                              = 232
	tsqlParserDATENAME                              = 233
	tsqlParserDATEPART                              = 234
	tsqlParserDATE_CORRELATION_OPTIMIZATION         = 235
	tsqlParserDAYS                                  = 236
	tsqlParserDB_CHAINING                           = 237
	tsqlParserDEFAULT_FULLTEXT_LANGUAGE             = 238
	tsqlParserDEFAULT_LANGUAGE                      = 239
	tsqlParserDELAY                                 = 240
	tsqlParserDELAYED_DURABILITY                    = 241
	tsqlParserDELETED                               = 242
	tsqlParserDENSE_RANK                            = 243
	tsqlParserDIRECTORY_NAME                        = 244
	tsqlParserDISABLE                               = 245
	tsqlParserDISABLED                              = 246
	tsqlParserDISABLE_BROKER                        = 247
	tsqlParserDYNAMIC                               = 248
	tsqlParserEMERGENCY                             = 249
	tsqlParserENABLE_BROKER                         = 250
	tsqlParserENCRYPTION                            = 251
	tsqlParserERROR_BROKER_CONVERSATIONS            = 252
	tsqlParserEXPAND                                = 253
	tsqlParserFAST                                  = 254
	tsqlParserFAST_FORWARD                          = 255
	tsqlParserFILEGROUP                             = 256
	tsqlParserFILEGROWTH                            = 257
	tsqlParserFILESTREAM                            = 258
	tsqlParserFIRST                                 = 259
	tsqlParserFOLLOWING                             = 260
	tsqlParserFORCE                                 = 261
	tsqlParserFORCED                                = 262
	tsqlParserFORWARD_ONLY                          = 263
	tsqlParserFULLSCAN                              = 264
	tsqlParserGB                                    = 265
	tsqlParserGLOBAL                                = 266
	tsqlParserGO                                    = 267
	tsqlParserGROUPING                              = 268
	tsqlParserGROUPING_ID                           = 269
	tsqlParserHADR                                  = 270
	tsqlParserHASH                                  = 271
	tsqlParserHONOR_BROKER_PRIORITY                 = 272
	tsqlParserHOURS                                 = 273
	tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 274
	tsqlParserIMMEDIATE                             = 275
	tsqlParserIMPERSONATE                           = 276
	tsqlParserINCREMENTAL                           = 277
	tsqlParserINSENSITIVE                           = 278
	tsqlParserINSERTED                              = 279
	tsqlParserISOLATION                             = 280
	tsqlParserKB                                    = 281
	tsqlParserKEEP                                  = 282
	tsqlParserKEEPFIXED                             = 283
	tsqlParserKEYSET                                = 284
	tsqlParserLAST                                  = 285
	tsqlParserLEVEL                                 = 286
	tsqlParserLOCAL                                 = 287
	tsqlParserLOCK_ESCALATION                       = 288
	tsqlParserLOGIN                                 = 289
	tsqlParserLOOP                                  = 290
	tsqlParserMARK                                  = 291
	tsqlParserMAX                                   = 292
	tsqlParserMAXDOP                                = 293
	tsqlParserMAXRECURSION                          = 294
	tsqlParserMAXSIZE                               = 295
	tsqlParserMB                                    = 296
	tsqlParserMEMORY_OPTIMIZED_DATA                 = 297
	tsqlParserMIN                                   = 298
	tsqlParserMINUTES                               = 299
	tsqlParserMIN_ACTIVE_ROWVERSION                 = 300
	tsqlParserMIXED_PAGE_ALLOCATION                 = 301
	tsqlParserMODIFY                                = 302
	tsqlParserMULTI_USER                            = 303
	tsqlParserNAME                                  = 304
	tsqlParserNESTED_TRIGGERS                       = 305
	tsqlParserNEW_BROKER                            = 306
	tsqlParserNEXT                                  = 307
	tsqlParserNOCOUNT                               = 308
	tsqlParserNOEXPAND                              = 309
	tsqlParserNON_TRANSACTED_ACCESS                 = 310
	tsqlParserNORECOMPUTE                           = 311
	tsqlParserNO_WAIT                               = 312
	tsqlParserNTILE                                 = 313
	tsqlParserNUMBER                                = 314
	tsqlParserNUMERIC_ROUNDABORT                    = 315
	tsqlParserOFFLINE                               = 316
	tsqlParserOFFSET                                = 317
	tsqlParserONLINE                                = 318
	tsqlParserONLY                                  = 319
	tsqlParserOPTIMISTIC                            = 320
	tsqlParserOPTIMIZE                              = 321
	tsqlParserOUT                                   = 322
	tsqlParserOUTPUT                                = 323
	tsqlParserOWNER                                 = 324
	tsqlParserPAGE_VERIFY                           = 325
	tsqlParserPARAMETERIZATION                      = 326
	tsqlParserPARTITION                             = 327
	tsqlParserPATH                                  = 328
	tsqlParserPRECEDING                             = 329
	tsqlParserPRIOR                                 = 330
	tsqlParserPRIVILEGES                            = 331
	tsqlParserQUOTED_IDENTIFIER                     = 332
	tsqlParserRANGE                                 = 333
	tsqlParserRANK                                  = 334
	tsqlParserREADONLY                              = 335
	tsqlParserREAD_COMMITTED_SNAPSHOT               = 336
	tsqlParserREAD_ONLY                             = 337
	tsqlParserREAD_WRITE                            = 338
	tsqlParserRECOMPILE                             = 339
	tsqlParserRECOVERY                              = 340
	tsqlParserRECURSIVE_TRIGGERS                    = 341
	tsqlParserRELATIVE                              = 342
	tsqlParserREMOTE                                = 343
	tsqlParserREPEATABLE                            = 344
	tsqlParserRESTRICTED_USER                       = 345
	tsqlParserROBUST                                = 346
	tsqlParserROOT                                  = 347
	tsqlParserROW                                   = 348
	tsqlParserROWGUID                               = 349
	tsqlParserROWS                                  = 350
	tsqlParserROW_NUMBER                            = 351
	tsqlParserSAMPLE                                = 352
	tsqlParserSCHEMABINDING                         = 353
	tsqlParserSCROLL                                = 354
	tsqlParserSCROLL_LOCKS                          = 355
	tsqlParserSECONDS                               = 356
	tsqlParserSELF                                  = 357
	tsqlParserSERIALIZABLE                          = 358
	tsqlParserSHOWPLAN                              = 359
	tsqlParserSIMPLE                                = 360
	tsqlParserSINGLE_USER                           = 361
	tsqlParserSIZE                                  = 362
	tsqlParserSNAPSHOT                              = 363
	tsqlParserSPATIAL_WINDOW_MAX_CELLS              = 364
	tsqlParserSTATIC                                = 365
	tsqlParserSTATS_STREAM                          = 366
	tsqlParserSTDEV                                 = 367
	tsqlParserSTDEVP                                = 368
	tsqlParserSUM                                   = 369
	tsqlParserTAKE                                  = 370
	tsqlParserTARGET_RECOVERY_TIME                  = 371
	tsqlParserTB                                    = 372
	tsqlParserTEXTIMAGE_ON                          = 373
	tsqlParserTHROW                                 = 374
	tsqlParserTIES                                  = 375
	tsqlParserTIME                                  = 376
	tsqlParserTORN_PAGE_DETECTION                   = 377
	tsqlParserTRANSFORM_NOISE_WORDS                 = 378
	tsqlParserTRUSTWORTHY                           = 379
	tsqlParserTRY                                   = 380
	tsqlParserTWO_DIGIT_YEAR_CUTOFF                 = 381
	tsqlParserTYPE                                  = 382
	tsqlParserTYPE_WARNING                          = 383
	tsqlParserUNBOUNDED                             = 384
	tsqlParserUNCOMMITTED                           = 385
	tsqlParserUNKNOWN                               = 386
	tsqlParserUNLIMITED                             = 387
	tsqlParserUSING                                 = 388
	tsqlParserVAR                                   = 389
	tsqlParserVARP                                  = 390
	tsqlParserVIEWS                                 = 391
	tsqlParserVIEW_METADATA                         = 392
	tsqlParserWORK                                  = 393
	tsqlParserXML                                   = 394
	tsqlParserXMLNAMESPACES                         = 395
	tsqlParserDOLLAR_ACTION                         = 396
	tsqlParserSPACE                                 = 397
	tsqlParserCOMMENT                               = 398
	tsqlParserLINE_COMMENT                          = 399
	tsqlParserDOUBLE_QUOTE_ID                       = 400
	tsqlParserSQUARE_BRACKET_ID                     = 401
	tsqlParserLOCAL_ID                              = 402
	tsqlParserDECIMAL                               = 403
	tsqlParserID                                    = 404
	tsqlParserSTRING                                = 405
	tsqlParserBINARY                                = 406
	tsqlParserFLOAT                                 = 407
	tsqlParserREAL                                  = 408
	tsqlParserEQUAL                                 = 409
	tsqlParserGREATER                               = 410
	tsqlParserLESS                                  = 411
	tsqlParserEXCLAMATION                           = 412
	tsqlParserPLUS_ASSIGN                           = 413
	tsqlParserMINUS_ASSIGN                          = 414
	tsqlParserMULT_ASSIGN                           = 415
	tsqlParserDIV_ASSIGN                            = 416
	tsqlParserMOD_ASSIGN                            = 417
	tsqlParserAND_ASSIGN                            = 418
	tsqlParserXOR_ASSIGN                            = 419
	tsqlParserOR_ASSIGN                             = 420
	tsqlParserDOT                                   = 421
	tsqlParserUNDERLINE                             = 422
	tsqlParserAT                                    = 423
	tsqlParserSHARP                                 = 424
	tsqlParserDOLLAR                                = 425
	tsqlParserLR_BRACKET                            = 426
	tsqlParserRR_BRACKET                            = 427
	tsqlParserCOMMA                                 = 428
	tsqlParserSEMI                                  = 429
	tsqlParserCOLON                                 = 430
	tsqlParserSTAR                                  = 431
	tsqlParserDIVIDE                                = 432
	tsqlParserMODULE                                = 433
	tsqlParserPLUS                                  = 434
	tsqlParserMINUS                                 = 435
	tsqlParserBIT_NOT                               = 436
	tsqlParserBIT_OR                                = 437
	tsqlParserBIT_AND                               = 438
	tsqlParserBIT_XOR                               = 439
)

// tsqlParser rules.
const (
	tsqlParserRULE_tsql_file                            = 0
	tsqlParserRULE_batch                                = 1
	tsqlParserRULE_sql_clauses                          = 2
	tsqlParserRULE_sql_clause                           = 3
	tsqlParserRULE_dml_clause                           = 4
	tsqlParserRULE_ddl_clause                           = 5
	tsqlParserRULE_cfl_statement                        = 6
	tsqlParserRULE_another_statement                    = 7
	tsqlParserRULE_delete_statement                     = 8
	tsqlParserRULE_delete_statement_from                = 9
	tsqlParserRULE_insert_statement                     = 10
	tsqlParserRULE_insert_statement_value               = 11
	tsqlParserRULE_select_statement                     = 12
	tsqlParserRULE_update_statement                     = 13
	tsqlParserRULE_output_clause                        = 14
	tsqlParserRULE_output_dml_list_elem                 = 15
	tsqlParserRULE_output_column_name                   = 16
	tsqlParserRULE_create_database                      = 17
	tsqlParserRULE_create_index                         = 18
	tsqlParserRULE_create_procedure                     = 19
	tsqlParserRULE_procedure_param                      = 20
	tsqlParserRULE_procedure_option                     = 21
	tsqlParserRULE_create_statistics                    = 22
	tsqlParserRULE_create_table                         = 23
	tsqlParserRULE_create_view                          = 24
	tsqlParserRULE_view_attribute                       = 25
	tsqlParserRULE_alter_table                          = 26
	tsqlParserRULE_alter_database                       = 27
	tsqlParserRULE_database_optionspec                  = 28
	tsqlParserRULE_auto_option                          = 29
	tsqlParserRULE_change_tracking_option               = 30
	tsqlParserRULE_change_tracking_option_list          = 31
	tsqlParserRULE_containment_option                   = 32
	tsqlParserRULE_cursor_option                        = 33
	tsqlParserRULE_date_correlation_optimization_option = 34
	tsqlParserRULE_db_encryption_option                 = 35
	tsqlParserRULE_db_state_option                      = 36
	tsqlParserRULE_db_update_option                     = 37
	tsqlParserRULE_db_user_access_option                = 38
	tsqlParserRULE_delayed_durability_option            = 39
	tsqlParserRULE_external_access_option               = 40
	tsqlParserRULE_mixed_page_allocation_option         = 41
	tsqlParserRULE_parameterization_option              = 42
	tsqlParserRULE_recovery_option                      = 43
	tsqlParserRULE_service_broker_option                = 44
	tsqlParserRULE_snapshot_option                      = 45
	tsqlParserRULE_sql_option                           = 46
	tsqlParserRULE_target_recovery_time_option          = 47
	tsqlParserRULE_termination                          = 48
	tsqlParserRULE_drop_index                           = 49
	tsqlParserRULE_drop_procedure                       = 50
	tsqlParserRULE_drop_statistics                      = 51
	tsqlParserRULE_drop_table                           = 52
	tsqlParserRULE_drop_view                            = 53
	tsqlParserRULE_create_type                          = 54
	tsqlParserRULE_drop_type                            = 55
	tsqlParserRULE_rowset_function_limited              = 56
	tsqlParserRULE_openquery                            = 57
	tsqlParserRULE_opendatasource                       = 58
	tsqlParserRULE_declare_statement                    = 59
	tsqlParserRULE_cursor_statement                     = 60
	tsqlParserRULE_execute_statement                    = 61
	tsqlParserRULE_execute_statement_arg                = 62
	tsqlParserRULE_execute_var_string                   = 63
	tsqlParserRULE_security_statement                   = 64
	tsqlParserRULE_grant_permission                     = 65
	tsqlParserRULE_set_statement                        = 66
	tsqlParserRULE_transaction_statement                = 67
	tsqlParserRULE_go_statement                         = 68
	tsqlParserRULE_use_statement                        = 69
	tsqlParserRULE_execute_clause                       = 70
	tsqlParserRULE_declare_local                        = 71
	tsqlParserRULE_table_type_definition                = 72
	tsqlParserRULE_column_def_table_constraints         = 73
	tsqlParserRULE_column_def_table_constraint          = 74
	tsqlParserRULE_column_definition                    = 75
	tsqlParserRULE_column_constraint                    = 76
	tsqlParserRULE_table_constraint                     = 77
	tsqlParserRULE_index_options                        = 78
	tsqlParserRULE_index_option                         = 79
	tsqlParserRULE_declare_cursor                       = 80
	tsqlParserRULE_declare_set_cursor_common            = 81
	tsqlParserRULE_fetch_cursor                         = 82
	tsqlParserRULE_set_special                          = 83
	tsqlParserRULE_constant_LOCAL_ID                    = 84
	tsqlParserRULE_expression                           = 85
	tsqlParserRULE_constant_expression                  = 86
	tsqlParserRULE_subquery                             = 87
	tsqlParserRULE_with_expression                      = 88
	tsqlParserRULE_common_table_expression              = 89
	tsqlParserRULE_update_elem                          = 90
	tsqlParserRULE_search_condition_list                = 91
	tsqlParserRULE_search_condition                     = 92
	tsqlParserRULE_search_condition_and                 = 93
	tsqlParserRULE_search_condition_not                 = 94
	tsqlParserRULE_predicate                            = 95
	tsqlParserRULE_query_expression                     = 96
	tsqlParserRULE_union                                = 97
	tsqlParserRULE_query_specification                  = 98
	tsqlParserRULE_order_by_clause                      = 99
	tsqlParserRULE_for_clause                           = 100
	tsqlParserRULE_xml_common_directives                = 101
	tsqlParserRULE_order_by_expression                  = 102
	tsqlParserRULE_group_by_item                        = 103
	tsqlParserRULE_option_clause                        = 104
	tsqlParserRULE_option                               = 105
	tsqlParserRULE_optimize_for_arg                     = 106
	tsqlParserRULE_select_list                          = 107
	tsqlParserRULE_select_list_elem                     = 108
	tsqlParserRULE_table_sources                        = 109
	tsqlParserRULE_table_source                         = 110
	tsqlParserRULE_table_source_item_joined             = 111
	tsqlParserRULE_table_source_item                    = 112
	tsqlParserRULE_change_table                         = 113
	tsqlParserRULE_join_part                            = 114
	tsqlParserRULE_table_name_with_hint                 = 115
	tsqlParserRULE_rowset_function                      = 116
	tsqlParserRULE_bulk_option                          = 117
	tsqlParserRULE_derived_table                        = 118
	tsqlParserRULE_function_call                        = 119
	tsqlParserRULE_switch_section                       = 120
	tsqlParserRULE_switch_search_condition_section      = 121
	tsqlParserRULE_as_table_alias                       = 122
	tsqlParserRULE_table_alias                          = 123
	tsqlParserRULE_with_table_hints                     = 124
	tsqlParserRULE_insert_with_table_hints              = 125
	tsqlParserRULE_table_hint                           = 126
	tsqlParserRULE_index_value                          = 127
	tsqlParserRULE_column_alias_list                    = 128
	tsqlParserRULE_column_alias                         = 129
	tsqlParserRULE_table_value_constructor              = 130
	tsqlParserRULE_expression_list                      = 131
	tsqlParserRULE_ranking_windowed_function            = 132
	tsqlParserRULE_aggregate_windowed_function          = 133
	tsqlParserRULE_all_distinct_expression              = 134
	tsqlParserRULE_over_clause                          = 135
	tsqlParserRULE_row_or_range_clause                  = 136
	tsqlParserRULE_window_frame_extent                  = 137
	tsqlParserRULE_window_frame_bound                   = 138
	tsqlParserRULE_window_frame_preceding               = 139
	tsqlParserRULE_window_frame_following               = 140
	tsqlParserRULE_create_database_option               = 141
	tsqlParserRULE_database_filestream_option           = 142
	tsqlParserRULE_database_file_spec                   = 143
	tsqlParserRULE_file_group                           = 144
	tsqlParserRULE_file_spec                            = 145
	tsqlParserRULE_full_table_name                      = 146
	tsqlParserRULE_table_name                           = 147
	tsqlParserRULE_simple_name                          = 148
	tsqlParserRULE_func_proc_name                       = 149
	tsqlParserRULE_ddl_object                           = 150
	tsqlParserRULE_full_column_name                     = 151
	tsqlParserRULE_column_name_list                     = 152
	tsqlParserRULE_cursor_name                          = 153
	tsqlParserRULE_on_off                               = 154
	tsqlParserRULE_clustered                            = 155
	tsqlParserRULE_null_notnull                         = 156
	tsqlParserRULE_scalar_function_name                 = 157
	tsqlParserRULE_data_type                            = 158
	tsqlParserRULE_default_value                        = 159
	tsqlParserRULE_constant                             = 160
	tsqlParserRULE_sign                                 = 161
	tsqlParserRULE_id                                   = 162
	tsqlParserRULE_simple_id                            = 163
	tsqlParserRULE_comparison_operator                  = 164
	tsqlParserRULE_assignment_operator                  = 165
	tsqlParserRULE_file_size                            = 166
)

// ITsql_fileContext is an interface to support dynamic dispatch.
type ITsql_fileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTsql_fileContext differentiates from other interfaces.
	IsTsql_fileContext()
}

type Tsql_fileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTsql_fileContext() *Tsql_fileContext {
	var p = new(Tsql_fileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_tsql_file
	return p
}

func (*Tsql_fileContext) IsTsql_fileContext() {}

func NewTsql_fileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tsql_fileContext {
	var p = new(Tsql_fileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_tsql_file

	return p
}

func (s *Tsql_fileContext) GetParser() antlr.Parser { return s.parser }

func (s *Tsql_fileContext) EOF() antlr.TerminalNode {
	return s.GetToken(tsqlParserEOF, 0)
}

func (s *Tsql_fileContext) AllBatch() []IBatchContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBatchContext)(nil)).Elem())
	var tst = make([]IBatchContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBatchContext)
		}
	}

	return tst
}

func (s *Tsql_fileContext) Batch(i int) IBatchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBatchContext)
}

func (s *Tsql_fileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tsql_fileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tsql_fileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTsql_file(s)
	}
}

func (s *Tsql_fileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTsql_file(s)
	}
}

func (p *tsqlParser) Tsql_file() (localctx ITsql_fileContext) {
	localctx = NewTsql_fileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, tsqlParserRULE_tsql_file)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(337)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(tsqlParserOPEN-114))|(1<<(tsqlParserPRINT-114))|(1<<(tsqlParserRAISERROR-114))|(1<<(tsqlParserRETURN-114))|(1<<(tsqlParserREVERT-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(tsqlParserROLLBACK-146))|(1<<(tsqlParserSAVE-146))|(1<<(tsqlParserSELECT-146))|(1<<(tsqlParserSET-146)))) != 0) || (((_la-179)&-(0x1f+1)) == 0 && ((1<<uint((_la-179)))&((1<<(tsqlParserUPDATE-179))|(1<<(tsqlParserUSE-179))|(1<<(tsqlParserWAITFOR-179))|(1<<(tsqlParserWHILE-179))|(1<<(tsqlParserWITH-179))|(1<<(tsqlParserABSOLUTE-179))|(1<<(tsqlParserAPPLY-179))|(1<<(tsqlParserAUTO-179))|(1<<(tsqlParserAVG-179)))) != 0) || (((_la-211)&-(0x1f+1)) == 0 && ((1<<uint((_la-211)))&((1<<(tsqlParserBASE64-211))|(1<<(tsqlParserCALLER-211))|(1<<(tsqlParserCAST-211))|(1<<(tsqlParserCATCH-211))|(1<<(tsqlParserCHECKSUM_AGG-211))|(1<<(tsqlParserCOMMITTED-211))|(1<<(tsqlParserCONCAT-211))|(1<<(tsqlParserCONTROL-211))|(1<<(tsqlParserCOOKIE-211))|(1<<(tsqlParserCOUNT-211))|(1<<(tsqlParserCOUNT_BIG-211))|(1<<(tsqlParserDELAY-211))|(1<<(tsqlParserDELETED-211)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(tsqlParserDENSE_RANK-243))|(1<<(tsqlParserDISABLE-243))|(1<<(tsqlParserDYNAMIC-243))|(1<<(tsqlParserENCRYPTION-243))|(1<<(tsqlParserEXPAND-243))|(1<<(tsqlParserFAST-243))|(1<<(tsqlParserFAST_FORWARD-243))|(1<<(tsqlParserFIRST-243))|(1<<(tsqlParserFOLLOWING-243))|(1<<(tsqlParserFORCE-243))|(1<<(tsqlParserFORCED-243))|(1<<(tsqlParserFORWARD_ONLY-243))|(1<<(tsqlParserFULLSCAN-243))|(1<<(tsqlParserGLOBAL-243))|(1<<(tsqlParserGO-243))|(1<<(tsqlParserGROUPING-243))|(1<<(tsqlParserGROUPING_ID-243))|(1<<(tsqlParserHASH-243))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(tsqlParserIMPERSONATE-276))|(1<<(tsqlParserINSENSITIVE-276))|(1<<(tsqlParserINSERTED-276))|(1<<(tsqlParserISOLATION-276))|(1<<(tsqlParserKEEP-276))|(1<<(tsqlParserKEEPFIXED-276))|(1<<(tsqlParserKEYSET-276))|(1<<(tsqlParserLAST-276))|(1<<(tsqlParserLEVEL-276))|(1<<(tsqlParserLOCAL-276))|(1<<(tsqlParserLOCK_ESCALATION-276))|(1<<(tsqlParserLOGIN-276))|(1<<(tsqlParserLOOP-276))|(1<<(tsqlParserMARK-276))|(1<<(tsqlParserMAX-276))|(1<<(tsqlParserMAXDOP-276))|(1<<(tsqlParserMAXRECURSION-276))|(1<<(tsqlParserMIN-276))|(1<<(tsqlParserMODIFY-276))|(1<<(tsqlParserNAME-276))|(1<<(tsqlParserNEXT-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(tsqlParserNOCOUNT-308))|(1<<(tsqlParserNOEXPAND-308))|(1<<(tsqlParserNORECOMPUTE-308))|(1<<(tsqlParserNTILE-308))|(1<<(tsqlParserNUMBER-308))|(1<<(tsqlParserOFFSET-308))|(1<<(tsqlParserONLINE-308))|(1<<(tsqlParserONLY-308))|(1<<(tsqlParserOPTIMISTIC-308))|(1<<(tsqlParserOPTIMIZE-308))|(1<<(tsqlParserOUT-308))|(1<<(tsqlParserOUTPUT-308))|(1<<(tsqlParserOWNER-308))|(1<<(tsqlParserPARAMETERIZATION-308))|(1<<(tsqlParserPARTITION-308))|(1<<(tsqlParserPATH-308))|(1<<(tsqlParserPRECEDING-308))|(1<<(tsqlParserPRIOR-308))|(1<<(tsqlParserPRIVILEGES-308))|(1<<(tsqlParserRANGE-308))|(1<<(tsqlParserRANK-308))|(1<<(tsqlParserREADONLY-308))|(1<<(tsqlParserREAD_ONLY-308))|(1<<(tsqlParserRECOMPILE-308)))) != 0) || (((_la-342)&-(0x1f+1)) == 0 && ((1<<uint((_la-342)))&((1<<(tsqlParserRELATIVE-342))|(1<<(tsqlParserREMOTE-342))|(1<<(tsqlParserREPEATABLE-342))|(1<<(tsqlParserROBUST-342))|(1<<(tsqlParserROOT-342))|(1<<(tsqlParserROW-342))|(1<<(tsqlParserROWGUID-342))|(1<<(tsqlParserROWS-342))|(1<<(tsqlParserROW_NUMBER-342))|(1<<(tsqlParserSAMPLE-342))|(1<<(tsqlParserSCHEMABINDING-342))|(1<<(tsqlParserSCROLL-342))|(1<<(tsqlParserSCROLL_LOCKS-342))|(1<<(tsqlParserSELF-342))|(1<<(tsqlParserSERIALIZABLE-342))|(1<<(tsqlParserSIMPLE-342))|(1<<(tsqlParserSNAPSHOT-342))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-342))|(1<<(tsqlParserSTATIC-342))|(1<<(tsqlParserSTATS_STREAM-342))|(1<<(tsqlParserSTDEV-342))|(1<<(tsqlParserSTDEVP-342))|(1<<(tsqlParserSUM-342))|(1<<(tsqlParserTEXTIMAGE_ON-342)))) != 0) || (((_la-374)&-(0x1f+1)) == 0 && ((1<<uint((_la-374)))&((1<<(tsqlParserTHROW-374))|(1<<(tsqlParserTIES-374))|(1<<(tsqlParserTIME-374))|(1<<(tsqlParserTRY-374))|(1<<(tsqlParserTYPE-374))|(1<<(tsqlParserTYPE_WARNING-374))|(1<<(tsqlParserUNBOUNDED-374))|(1<<(tsqlParserUNCOMMITTED-374))|(1<<(tsqlParserUNKNOWN-374))|(1<<(tsqlParserUSING-374))|(1<<(tsqlParserVAR-374))|(1<<(tsqlParserVARP-374))|(1<<(tsqlParserVIEWS-374))|(1<<(tsqlParserVIEW_METADATA-374))|(1<<(tsqlParserWORK-374))|(1<<(tsqlParserXML-374))|(1<<(tsqlParserXMLNAMESPACES-374))|(1<<(tsqlParserDOUBLE_QUOTE_ID-374))|(1<<(tsqlParserSQUARE_BRACKET_ID-374))|(1<<(tsqlParserID-374)))) != 0) || _la == tsqlParserLR_BRACKET {
		{
			p.SetState(334)
			p.Batch()
		}

		p.SetState(339)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(340)
		p.Match(tsqlParserEOF)
	}

	return localctx
}

// IBatchContext is an interface to support dynamic dispatch.
type IBatchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchContext differentiates from other interfaces.
	IsBatchContext()
}

type BatchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchContext() *BatchContext {
	var p = new(BatchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_batch
	return p
}

func (*BatchContext) IsBatchContext() {}

func NewBatchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchContext {
	var p = new(BatchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_batch

	return p
}

func (s *BatchContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *BatchContext) Go_statement() IGo_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGo_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGo_statementContext)
}

func (s *BatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBatch(s)
	}
}

func (s *BatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBatch(s)
	}
}

func (p *tsqlParser) Batch() (localctx IBatchContext) {
	localctx = NewBatchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, tsqlParserRULE_batch)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(342)
		p.Sql_clauses()
	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(343)
			p.Go_statement()
		}

	}

	return localctx
}

// ISql_clausesContext is an interface to support dynamic dispatch.
type ISql_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_clausesContext differentiates from other interfaces.
	IsSql_clausesContext()
}

type Sql_clausesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_clausesContext() *Sql_clausesContext {
	var p = new(Sql_clausesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sql_clauses
	return p
}

func (*Sql_clausesContext) IsSql_clausesContext() {}

func NewSql_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_clausesContext {
	var p = new(Sql_clausesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sql_clauses

	return p
}

func (s *Sql_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_clausesContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *Sql_clausesContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *Sql_clausesContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSEMI)
}

func (s *Sql_clausesContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSEMI, i)
}

func (s *Sql_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSql_clauses(s)
	}
}

func (s *Sql_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSql_clauses(s)
	}
}

func (p *tsqlParser) Sql_clauses() (localctx ISql_clausesContext) {
	localctx = NewSql_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, tsqlParserRULE_sql_clauses)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(350)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(346)
				p.Sql_clause()
			}
			p.SetState(348)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(347)
					p.Match(tsqlParserSEMI)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(352)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_clauseContext is an interface to support dynamic dispatch.
type ISql_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_clauseContext differentiates from other interfaces.
	IsSql_clauseContext()
}

type Sql_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_clauseContext() *Sql_clauseContext {
	var p = new(Sql_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sql_clause
	return p
}

func (*Sql_clauseContext) IsSql_clauseContext() {}

func NewSql_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_clauseContext {
	var p = new(Sql_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sql_clause

	return p
}

func (s *Sql_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_clauseContext) Dml_clause() IDml_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDml_clauseContext)
}

func (s *Sql_clauseContext) Ddl_clause() IDdl_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_clauseContext)
}

func (s *Sql_clauseContext) Cfl_statement() ICfl_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfl_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICfl_statementContext)
}

func (s *Sql_clauseContext) Another_statement() IAnother_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnother_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnother_statementContext)
}

func (s *Sql_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSql_clause(s)
	}
}

func (s *Sql_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSql_clause(s)
	}
}

func (p *tsqlParser) Sql_clause() (localctx ISql_clauseContext) {
	localctx = NewSql_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, tsqlParserRULE_sql_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(354)
			p.Dml_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(355)
			p.Ddl_clause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(356)
			p.Cfl_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(357)
			p.Another_statement()
		}

	}

	return localctx
}

// IDml_clauseContext is an interface to support dynamic dispatch.
type IDml_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_clauseContext differentiates from other interfaces.
	IsDml_clauseContext()
}

type Dml_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_clauseContext() *Dml_clauseContext {
	var p = new(Dml_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_dml_clause
	return p
}

func (*Dml_clauseContext) IsDml_clauseContext() {}

func NewDml_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_clauseContext {
	var p = new(Dml_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_dml_clause

	return p
}

func (s *Dml_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_clauseContext) Delete_statement() IDelete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Dml_clauseContext) Insert_statement() IInsert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Dml_clauseContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Dml_clauseContext) Update_statement() IUpdate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Dml_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDml_clause(s)
	}
}

func (s *Dml_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDml_clause(s)
	}
}

func (p *tsqlParser) Dml_clause() (localctx IDml_clauseContext) {
	localctx = NewDml_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, tsqlParserRULE_dml_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(364)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(360)
			p.Delete_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(361)
			p.Insert_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(362)
			p.Select_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(363)
			p.Update_statement()
		}

	}

	return localctx
}

// IDdl_clauseContext is an interface to support dynamic dispatch.
type IDdl_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_clauseContext differentiates from other interfaces.
	IsDdl_clauseContext()
}

type Ddl_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_clauseContext() *Ddl_clauseContext {
	var p = new(Ddl_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_ddl_clause
	return p
}

func (*Ddl_clauseContext) IsDdl_clauseContext() {}

func NewDdl_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_clauseContext {
	var p = new(Ddl_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_ddl_clause

	return p
}

func (s *Ddl_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_clauseContext) Create_database() ICreate_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_databaseContext)
}

func (s *Ddl_clauseContext) Create_index() ICreate_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_indexContext)
}

func (s *Ddl_clauseContext) Create_procedure() ICreate_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_procedureContext)
}

func (s *Ddl_clauseContext) Create_statistics() ICreate_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_statisticsContext)
}

func (s *Ddl_clauseContext) Create_table() ICreate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tableContext)
}

func (s *Ddl_clauseContext) Create_type() ICreate_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_typeContext)
}

func (s *Ddl_clauseContext) Create_view() ICreate_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_viewContext)
}

func (s *Ddl_clauseContext) Alter_table() IAlter_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tableContext)
}

func (s *Ddl_clauseContext) Alter_database() IAlter_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_databaseContext)
}

func (s *Ddl_clauseContext) Drop_index() IDrop_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_indexContext)
}

func (s *Ddl_clauseContext) Drop_procedure() IDrop_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_procedureContext)
}

func (s *Ddl_clauseContext) Drop_statistics() IDrop_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_statisticsContext)
}

func (s *Ddl_clauseContext) Drop_table() IDrop_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_tableContext)
}

func (s *Ddl_clauseContext) Drop_type() IDrop_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_typeContext)
}

func (s *Ddl_clauseContext) Drop_view() IDrop_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_viewContext)
}

func (s *Ddl_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDdl_clause(s)
	}
}

func (s *Ddl_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDdl_clause(s)
	}
}

func (p *tsqlParser) Ddl_clause() (localctx IDdl_clauseContext) {
	localctx = NewDdl_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, tsqlParserRULE_ddl_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(366)
			p.Create_database()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(367)
			p.Create_index()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(368)
			p.Create_procedure()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(369)
			p.Create_statistics()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(370)
			p.Create_table()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(371)
			p.Create_type()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(372)
			p.Create_view()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(373)
			p.Alter_table()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(374)
			p.Alter_database()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(375)
			p.Drop_index()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(376)
			p.Drop_procedure()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(377)
			p.Drop_statistics()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(378)
			p.Drop_table()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(379)
			p.Drop_type()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(380)
			p.Drop_view()
		}

	}

	return localctx
}

// ICfl_statementContext is an interface to support dynamic dispatch.
type ICfl_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCfl_statementContext differentiates from other interfaces.
	IsCfl_statementContext()
}

type Cfl_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCfl_statementContext() *Cfl_statementContext {
	var p = new(Cfl_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cfl_statement
	return p
}

func (*Cfl_statementContext) IsCfl_statementContext() {}

func NewCfl_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cfl_statementContext {
	var p = new(Cfl_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cfl_statement

	return p
}

func (s *Cfl_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cfl_statementContext) CopyFrom(ctx *Cfl_statementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Cfl_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cfl_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Waitfor_statementContext struct {
	*Cfl_statementContext
}

func NewWaitfor_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Waitfor_statementContext {
	var p = new(Waitfor_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Waitfor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Waitfor_statementContext) WAITFOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserWAITFOR, 0)
}

func (s *Waitfor_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Waitfor_statementContext) DELAY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAY, 0)
}

func (s *Waitfor_statementContext) TIME() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIME, 0)
}

func (s *Waitfor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWaitfor_statement(s)
	}
}

func (s *Waitfor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWaitfor_statement(s)
	}
}

type Print_statementContext struct {
	*Cfl_statementContext
}

func NewPrint_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Print_statementContext {
	var p = new(Print_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Print_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Print_statementContext) PRINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRINT, 0)
}

func (s *Print_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Print_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterPrint_statement(s)
	}
}

func (s *Print_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitPrint_statement(s)
	}
}

type Continue_statementContext struct {
	*Cfl_statementContext
}

func NewContinue_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Continue_statementContext {
	var p = new(Continue_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTINUE, 0)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

type If_statementContext struct {
	*Cfl_statementContext
}

func NewIf_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *If_statementContext {
	var p = new(If_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *If_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *If_statementContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *If_statementContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *If_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserELSE, 0)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

type Raiseerror_statementContext struct {
	*Cfl_statementContext
	msg      antlr.Token
	severity IConstant_LOCAL_IDContext
	state    IConstant_LOCAL_IDContext
}

func NewRaiseerror_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Raiseerror_statementContext {
	var p = new(Raiseerror_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Raiseerror_statementContext) GetMsg() antlr.Token { return s.msg }

func (s *Raiseerror_statementContext) SetMsg(v antlr.Token) { s.msg = v }

func (s *Raiseerror_statementContext) GetSeverity() IConstant_LOCAL_IDContext { return s.severity }

func (s *Raiseerror_statementContext) GetState() IConstant_LOCAL_IDContext { return s.state }

func (s *Raiseerror_statementContext) SetSeverity(v IConstant_LOCAL_IDContext) { s.severity = v }

func (s *Raiseerror_statementContext) SetState(v IConstant_LOCAL_IDContext) { s.state = v }

func (s *Raiseerror_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raiseerror_statementContext) RAISERROR() antlr.TerminalNode {
	return s.GetToken(tsqlParserRAISERROR, 0)
}

func (s *Raiseerror_statementContext) AllConstant_LOCAL_ID() []IConstant_LOCAL_IDContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem())
	var tst = make([]IConstant_LOCAL_IDContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_LOCAL_IDContext)
		}
	}

	return tst
}

func (s *Raiseerror_statementContext) Constant_LOCAL_ID(i int) IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Raiseerror_statementContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Raiseerror_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Raiseerror_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Raiseerror_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRaiseerror_statement(s)
	}
}

func (s *Raiseerror_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRaiseerror_statement(s)
	}
}

type Throw_statementContext struct {
	*Cfl_statementContext
	error_number antlr.Token
	message      antlr.Token
	state        antlr.Token
}

func NewThrow_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Throw_statementContext {
	var p = new(Throw_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Throw_statementContext) GetError_number() antlr.Token { return s.error_number }

func (s *Throw_statementContext) GetMessage() antlr.Token { return s.message }

func (s *Throw_statementContext) GetState() antlr.Token { return s.state }

func (s *Throw_statementContext) SetError_number(v antlr.Token) { s.error_number = v }

func (s *Throw_statementContext) SetMessage(v antlr.Token) { s.message = v }

func (s *Throw_statementContext) SetState(v antlr.Token) { s.state = v }

func (s *Throw_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_statementContext) THROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHROW, 0)
}

func (s *Throw_statementContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Throw_statementContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Throw_statementContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserLOCAL_ID)
}

func (s *Throw_statementContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, i)
}

func (s *Throw_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Throw_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterThrow_statement(s)
	}
}

func (s *Throw_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitThrow_statement(s)
	}
}

type Try_catch_statementContext struct {
	*Cfl_statementContext
	try_clauses   ISql_clausesContext
	catch_clauses ISql_clausesContext
}

func NewTry_catch_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Try_catch_statementContext {
	var p = new(Try_catch_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Try_catch_statementContext) GetTry_clauses() ISql_clausesContext { return s.try_clauses }

func (s *Try_catch_statementContext) GetCatch_clauses() ISql_clausesContext { return s.catch_clauses }

func (s *Try_catch_statementContext) SetTry_clauses(v ISql_clausesContext) { s.try_clauses = v }

func (s *Try_catch_statementContext) SetCatch_clauses(v ISql_clausesContext) { s.catch_clauses = v }

func (s *Try_catch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Try_catch_statementContext) AllBEGIN() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserBEGIN)
}

func (s *Try_catch_statementContext) BEGIN(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserBEGIN, i)
}

func (s *Try_catch_statementContext) AllTRY() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserTRY)
}

func (s *Try_catch_statementContext) TRY(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserTRY, i)
}

func (s *Try_catch_statementContext) AllEND() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserEND)
}

func (s *Try_catch_statementContext) END(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserEND, i)
}

func (s *Try_catch_statementContext) AllCATCH() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserCATCH)
}

func (s *Try_catch_statementContext) CATCH(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserCATCH, i)
}

func (s *Try_catch_statementContext) AllSql_clauses() []ISql_clausesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem())
	var tst = make([]ISql_clausesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clausesContext)
		}
	}

	return tst
}

func (s *Try_catch_statementContext) Sql_clauses(i int) ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Try_catch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTry_catch_statement(s)
	}
}

func (s *Try_catch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTry_catch_statement(s)
	}
}

type While_statementContext struct {
	*Cfl_statementContext
}

func NewWhile_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *While_statementContext {
	var p = new(While_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHILE, 0)
}

func (s *While_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *While_statementContext) Sql_clause() ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *While_statementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(tsqlParserBREAK, 0)
}

func (s *While_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTINUE, 0)
}

func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}

type Block_statementContext struct {
	*Cfl_statementContext
}

func NewBlock_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Block_statementContext {
	var p = new(Block_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Block_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBEGIN, 0)
}

func (s *Block_statementContext) END() antlr.TerminalNode {
	return s.GetToken(tsqlParserEND, 0)
}

func (s *Block_statementContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Block_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBlock_statement(s)
	}
}

func (s *Block_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBlock_statement(s)
	}
}

type Break_statementContext struct {
	*Cfl_statementContext
}

func NewBreak_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Break_statementContext {
	var p = new(Break_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Break_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Break_statementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(tsqlParserBREAK, 0)
}

func (s *Break_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBreak_statement(s)
	}
}

func (s *Break_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBreak_statement(s)
	}
}

type Goto_statementContext struct {
	*Cfl_statementContext
}

func NewGoto_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Goto_statementContext {
	var p = new(Goto_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Goto_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_statementContext) GOTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserGOTO, 0)
}

func (s *Goto_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Goto_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGoto_statement(s)
	}
}

func (s *Goto_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGoto_statement(s)
	}
}

type Return_statementContext struct {
	*Cfl_statementContext
}

func NewReturn_statementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Return_statementContext {
	var p = new(Return_statementContext)

	p.Cfl_statementContext = NewEmptyCfl_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Cfl_statementContext))

	return p
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(tsqlParserRETURN, 0)
}

func (s *Return_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (p *tsqlParser) Cfl_statement() (localctx ICfl_statementContext) {
	localctx = NewCfl_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, tsqlParserRULE_cfl_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		localctx = NewBlock_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(383)
			p.Match(tsqlParserBEGIN)
		}
		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(384)
				p.Match(tsqlParserSEMI)
			}

		}
		p.SetState(388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(tsqlParserOPEN-114))|(1<<(tsqlParserPRINT-114))|(1<<(tsqlParserRAISERROR-114))|(1<<(tsqlParserRETURN-114))|(1<<(tsqlParserREVERT-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(tsqlParserROLLBACK-146))|(1<<(tsqlParserSAVE-146))|(1<<(tsqlParserSELECT-146))|(1<<(tsqlParserSET-146)))) != 0) || (((_la-179)&-(0x1f+1)) == 0 && ((1<<uint((_la-179)))&((1<<(tsqlParserUPDATE-179))|(1<<(tsqlParserUSE-179))|(1<<(tsqlParserWAITFOR-179))|(1<<(tsqlParserWHILE-179))|(1<<(tsqlParserWITH-179))|(1<<(tsqlParserABSOLUTE-179))|(1<<(tsqlParserAPPLY-179))|(1<<(tsqlParserAUTO-179))|(1<<(tsqlParserAVG-179)))) != 0) || (((_la-211)&-(0x1f+1)) == 0 && ((1<<uint((_la-211)))&((1<<(tsqlParserBASE64-211))|(1<<(tsqlParserCALLER-211))|(1<<(tsqlParserCAST-211))|(1<<(tsqlParserCATCH-211))|(1<<(tsqlParserCHECKSUM_AGG-211))|(1<<(tsqlParserCOMMITTED-211))|(1<<(tsqlParserCONCAT-211))|(1<<(tsqlParserCONTROL-211))|(1<<(tsqlParserCOOKIE-211))|(1<<(tsqlParserCOUNT-211))|(1<<(tsqlParserCOUNT_BIG-211))|(1<<(tsqlParserDELAY-211))|(1<<(tsqlParserDELETED-211)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(tsqlParserDENSE_RANK-243))|(1<<(tsqlParserDISABLE-243))|(1<<(tsqlParserDYNAMIC-243))|(1<<(tsqlParserENCRYPTION-243))|(1<<(tsqlParserEXPAND-243))|(1<<(tsqlParserFAST-243))|(1<<(tsqlParserFAST_FORWARD-243))|(1<<(tsqlParserFIRST-243))|(1<<(tsqlParserFOLLOWING-243))|(1<<(tsqlParserFORCE-243))|(1<<(tsqlParserFORCED-243))|(1<<(tsqlParserFORWARD_ONLY-243))|(1<<(tsqlParserFULLSCAN-243))|(1<<(tsqlParserGLOBAL-243))|(1<<(tsqlParserGO-243))|(1<<(tsqlParserGROUPING-243))|(1<<(tsqlParserGROUPING_ID-243))|(1<<(tsqlParserHASH-243))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(tsqlParserIMPERSONATE-276))|(1<<(tsqlParserINSENSITIVE-276))|(1<<(tsqlParserINSERTED-276))|(1<<(tsqlParserISOLATION-276))|(1<<(tsqlParserKEEP-276))|(1<<(tsqlParserKEEPFIXED-276))|(1<<(tsqlParserKEYSET-276))|(1<<(tsqlParserLAST-276))|(1<<(tsqlParserLEVEL-276))|(1<<(tsqlParserLOCAL-276))|(1<<(tsqlParserLOCK_ESCALATION-276))|(1<<(tsqlParserLOGIN-276))|(1<<(tsqlParserLOOP-276))|(1<<(tsqlParserMARK-276))|(1<<(tsqlParserMAX-276))|(1<<(tsqlParserMAXDOP-276))|(1<<(tsqlParserMAXRECURSION-276))|(1<<(tsqlParserMIN-276))|(1<<(tsqlParserMODIFY-276))|(1<<(tsqlParserNAME-276))|(1<<(tsqlParserNEXT-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(tsqlParserNOCOUNT-308))|(1<<(tsqlParserNOEXPAND-308))|(1<<(tsqlParserNORECOMPUTE-308))|(1<<(tsqlParserNTILE-308))|(1<<(tsqlParserNUMBER-308))|(1<<(tsqlParserOFFSET-308))|(1<<(tsqlParserONLINE-308))|(1<<(tsqlParserONLY-308))|(1<<(tsqlParserOPTIMISTIC-308))|(1<<(tsqlParserOPTIMIZE-308))|(1<<(tsqlParserOUT-308))|(1<<(tsqlParserOUTPUT-308))|(1<<(tsqlParserOWNER-308))|(1<<(tsqlParserPARAMETERIZATION-308))|(1<<(tsqlParserPARTITION-308))|(1<<(tsqlParserPATH-308))|(1<<(tsqlParserPRECEDING-308))|(1<<(tsqlParserPRIOR-308))|(1<<(tsqlParserPRIVILEGES-308))|(1<<(tsqlParserRANGE-308))|(1<<(tsqlParserRANK-308))|(1<<(tsqlParserREADONLY-308))|(1<<(tsqlParserREAD_ONLY-308))|(1<<(tsqlParserRECOMPILE-308)))) != 0) || (((_la-342)&-(0x1f+1)) == 0 && ((1<<uint((_la-342)))&((1<<(tsqlParserRELATIVE-342))|(1<<(tsqlParserREMOTE-342))|(1<<(tsqlParserREPEATABLE-342))|(1<<(tsqlParserROBUST-342))|(1<<(tsqlParserROOT-342))|(1<<(tsqlParserROW-342))|(1<<(tsqlParserROWGUID-342))|(1<<(tsqlParserROWS-342))|(1<<(tsqlParserROW_NUMBER-342))|(1<<(tsqlParserSAMPLE-342))|(1<<(tsqlParserSCHEMABINDING-342))|(1<<(tsqlParserSCROLL-342))|(1<<(tsqlParserSCROLL_LOCKS-342))|(1<<(tsqlParserSELF-342))|(1<<(tsqlParserSERIALIZABLE-342))|(1<<(tsqlParserSIMPLE-342))|(1<<(tsqlParserSNAPSHOT-342))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-342))|(1<<(tsqlParserSTATIC-342))|(1<<(tsqlParserSTATS_STREAM-342))|(1<<(tsqlParserSTDEV-342))|(1<<(tsqlParserSTDEVP-342))|(1<<(tsqlParserSUM-342))|(1<<(tsqlParserTEXTIMAGE_ON-342)))) != 0) || (((_la-374)&-(0x1f+1)) == 0 && ((1<<uint((_la-374)))&((1<<(tsqlParserTHROW-374))|(1<<(tsqlParserTIES-374))|(1<<(tsqlParserTIME-374))|(1<<(tsqlParserTRY-374))|(1<<(tsqlParserTYPE-374))|(1<<(tsqlParserTYPE_WARNING-374))|(1<<(tsqlParserUNBOUNDED-374))|(1<<(tsqlParserUNCOMMITTED-374))|(1<<(tsqlParserUNKNOWN-374))|(1<<(tsqlParserUSING-374))|(1<<(tsqlParserVAR-374))|(1<<(tsqlParserVARP-374))|(1<<(tsqlParserVIEWS-374))|(1<<(tsqlParserVIEW_METADATA-374))|(1<<(tsqlParserWORK-374))|(1<<(tsqlParserXML-374))|(1<<(tsqlParserXMLNAMESPACES-374))|(1<<(tsqlParserDOUBLE_QUOTE_ID-374))|(1<<(tsqlParserSQUARE_BRACKET_ID-374))|(1<<(tsqlParserID-374)))) != 0) || _la == tsqlParserLR_BRACKET {
			{
				p.SetState(387)
				p.Sql_clauses()
			}

		}
		{
			p.SetState(390)
			p.Match(tsqlParserEND)
		}
		p.SetState(392)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(391)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		localctx = NewBreak_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(394)
			p.Match(tsqlParserBREAK)
		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(395)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		localctx = NewContinue_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(398)
			p.Match(tsqlParserCONTINUE)
		}
		p.SetState(400)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(399)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		localctx = NewGoto_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(402)
			p.Match(tsqlParserGOTO)
		}
		{
			p.SetState(403)
			p.Id()
		}
		p.SetState(405)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(404)
				p.Match(tsqlParserSEMI)
			}

		}

	case 5:
		localctx = NewGoto_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(407)
			p.Id()
		}
		{
			p.SetState(408)
			p.Match(tsqlParserCOLON)
		}
		p.SetState(410)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(409)
				p.Match(tsqlParserSEMI)
			}

		}

	case 6:
		localctx = NewIf_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(412)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(413)
			p.Search_condition()
		}
		{
			p.SetState(414)
			p.Sql_clause()
		}
		p.SetState(417)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(415)
				p.Match(tsqlParserELSE)
			}
			{
				p.SetState(416)
				p.Sql_clause()
			}

		}
		p.SetState(420)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(419)
				p.Match(tsqlParserSEMI)
			}

		}

	case 7:
		localctx = NewReturn_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(422)
			p.Match(tsqlParserRETURN)
		}
		p.SetState(424)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(423)
				p.expression(0)
			}

		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(426)
				p.Match(tsqlParserSEMI)
			}

		}

	case 8:
		localctx = NewThrow_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(429)
			p.Match(tsqlParserTHROW)
		}
		p.SetState(435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL {
			p.SetState(430)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Throw_statementContext).error_number = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Throw_statementContext).error_number = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(431)
				p.Match(tsqlParserCOMMA)
			}
			p.SetState(432)

			_lt = p.GetTokenStream().LT(1)

			localctx.(*Throw_statementContext).message = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserSTRING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Throw_statementContext).message = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(433)
				p.Match(tsqlParserCOMMA)
			}
			p.SetState(434)

			_lt = p.GetTokenStream().LT(1)

			localctx.(*Throw_statementContext).state = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Throw_statementContext).state = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(438)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(437)
				p.Match(tsqlParserSEMI)
			}

		}

	case 9:
		localctx = NewTry_catch_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(440)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(441)
			p.Match(tsqlParserTRY)
		}
		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(442)
				p.Match(tsqlParserSEMI)
			}

		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(tsqlParserOPEN-114))|(1<<(tsqlParserPRINT-114))|(1<<(tsqlParserRAISERROR-114))|(1<<(tsqlParserRETURN-114))|(1<<(tsqlParserREVERT-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(tsqlParserROLLBACK-146))|(1<<(tsqlParserSAVE-146))|(1<<(tsqlParserSELECT-146))|(1<<(tsqlParserSET-146)))) != 0) || (((_la-179)&-(0x1f+1)) == 0 && ((1<<uint((_la-179)))&((1<<(tsqlParserUPDATE-179))|(1<<(tsqlParserUSE-179))|(1<<(tsqlParserWAITFOR-179))|(1<<(tsqlParserWHILE-179))|(1<<(tsqlParserWITH-179))|(1<<(tsqlParserABSOLUTE-179))|(1<<(tsqlParserAPPLY-179))|(1<<(tsqlParserAUTO-179))|(1<<(tsqlParserAVG-179)))) != 0) || (((_la-211)&-(0x1f+1)) == 0 && ((1<<uint((_la-211)))&((1<<(tsqlParserBASE64-211))|(1<<(tsqlParserCALLER-211))|(1<<(tsqlParserCAST-211))|(1<<(tsqlParserCATCH-211))|(1<<(tsqlParserCHECKSUM_AGG-211))|(1<<(tsqlParserCOMMITTED-211))|(1<<(tsqlParserCONCAT-211))|(1<<(tsqlParserCONTROL-211))|(1<<(tsqlParserCOOKIE-211))|(1<<(tsqlParserCOUNT-211))|(1<<(tsqlParserCOUNT_BIG-211))|(1<<(tsqlParserDELAY-211))|(1<<(tsqlParserDELETED-211)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(tsqlParserDENSE_RANK-243))|(1<<(tsqlParserDISABLE-243))|(1<<(tsqlParserDYNAMIC-243))|(1<<(tsqlParserENCRYPTION-243))|(1<<(tsqlParserEXPAND-243))|(1<<(tsqlParserFAST-243))|(1<<(tsqlParserFAST_FORWARD-243))|(1<<(tsqlParserFIRST-243))|(1<<(tsqlParserFOLLOWING-243))|(1<<(tsqlParserFORCE-243))|(1<<(tsqlParserFORCED-243))|(1<<(tsqlParserFORWARD_ONLY-243))|(1<<(tsqlParserFULLSCAN-243))|(1<<(tsqlParserGLOBAL-243))|(1<<(tsqlParserGO-243))|(1<<(tsqlParserGROUPING-243))|(1<<(tsqlParserGROUPING_ID-243))|(1<<(tsqlParserHASH-243))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(tsqlParserIMPERSONATE-276))|(1<<(tsqlParserINSENSITIVE-276))|(1<<(tsqlParserINSERTED-276))|(1<<(tsqlParserISOLATION-276))|(1<<(tsqlParserKEEP-276))|(1<<(tsqlParserKEEPFIXED-276))|(1<<(tsqlParserKEYSET-276))|(1<<(tsqlParserLAST-276))|(1<<(tsqlParserLEVEL-276))|(1<<(tsqlParserLOCAL-276))|(1<<(tsqlParserLOCK_ESCALATION-276))|(1<<(tsqlParserLOGIN-276))|(1<<(tsqlParserLOOP-276))|(1<<(tsqlParserMARK-276))|(1<<(tsqlParserMAX-276))|(1<<(tsqlParserMAXDOP-276))|(1<<(tsqlParserMAXRECURSION-276))|(1<<(tsqlParserMIN-276))|(1<<(tsqlParserMODIFY-276))|(1<<(tsqlParserNAME-276))|(1<<(tsqlParserNEXT-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(tsqlParserNOCOUNT-308))|(1<<(tsqlParserNOEXPAND-308))|(1<<(tsqlParserNORECOMPUTE-308))|(1<<(tsqlParserNTILE-308))|(1<<(tsqlParserNUMBER-308))|(1<<(tsqlParserOFFSET-308))|(1<<(tsqlParserONLINE-308))|(1<<(tsqlParserONLY-308))|(1<<(tsqlParserOPTIMISTIC-308))|(1<<(tsqlParserOPTIMIZE-308))|(1<<(tsqlParserOUT-308))|(1<<(tsqlParserOUTPUT-308))|(1<<(tsqlParserOWNER-308))|(1<<(tsqlParserPARAMETERIZATION-308))|(1<<(tsqlParserPARTITION-308))|(1<<(tsqlParserPATH-308))|(1<<(tsqlParserPRECEDING-308))|(1<<(tsqlParserPRIOR-308))|(1<<(tsqlParserPRIVILEGES-308))|(1<<(tsqlParserRANGE-308))|(1<<(tsqlParserRANK-308))|(1<<(tsqlParserREADONLY-308))|(1<<(tsqlParserREAD_ONLY-308))|(1<<(tsqlParserRECOMPILE-308)))) != 0) || (((_la-342)&-(0x1f+1)) == 0 && ((1<<uint((_la-342)))&((1<<(tsqlParserRELATIVE-342))|(1<<(tsqlParserREMOTE-342))|(1<<(tsqlParserREPEATABLE-342))|(1<<(tsqlParserROBUST-342))|(1<<(tsqlParserROOT-342))|(1<<(tsqlParserROW-342))|(1<<(tsqlParserROWGUID-342))|(1<<(tsqlParserROWS-342))|(1<<(tsqlParserROW_NUMBER-342))|(1<<(tsqlParserSAMPLE-342))|(1<<(tsqlParserSCHEMABINDING-342))|(1<<(tsqlParserSCROLL-342))|(1<<(tsqlParserSCROLL_LOCKS-342))|(1<<(tsqlParserSELF-342))|(1<<(tsqlParserSERIALIZABLE-342))|(1<<(tsqlParserSIMPLE-342))|(1<<(tsqlParserSNAPSHOT-342))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-342))|(1<<(tsqlParserSTATIC-342))|(1<<(tsqlParserSTATS_STREAM-342))|(1<<(tsqlParserSTDEV-342))|(1<<(tsqlParserSTDEVP-342))|(1<<(tsqlParserSUM-342))|(1<<(tsqlParserTEXTIMAGE_ON-342)))) != 0) || (((_la-374)&-(0x1f+1)) == 0 && ((1<<uint((_la-374)))&((1<<(tsqlParserTHROW-374))|(1<<(tsqlParserTIES-374))|(1<<(tsqlParserTIME-374))|(1<<(tsqlParserTRY-374))|(1<<(tsqlParserTYPE-374))|(1<<(tsqlParserTYPE_WARNING-374))|(1<<(tsqlParserUNBOUNDED-374))|(1<<(tsqlParserUNCOMMITTED-374))|(1<<(tsqlParserUNKNOWN-374))|(1<<(tsqlParserUSING-374))|(1<<(tsqlParserVAR-374))|(1<<(tsqlParserVARP-374))|(1<<(tsqlParserVIEWS-374))|(1<<(tsqlParserVIEW_METADATA-374))|(1<<(tsqlParserWORK-374))|(1<<(tsqlParserXML-374))|(1<<(tsqlParserXMLNAMESPACES-374))|(1<<(tsqlParserDOUBLE_QUOTE_ID-374))|(1<<(tsqlParserSQUARE_BRACKET_ID-374))|(1<<(tsqlParserID-374)))) != 0) || _la == tsqlParserLR_BRACKET {
			{
				p.SetState(445)

				var _x = p.Sql_clauses()

				localctx.(*Try_catch_statementContext).try_clauses = _x
			}

		}
		{
			p.SetState(448)
			p.Match(tsqlParserEND)
		}
		{
			p.SetState(449)
			p.Match(tsqlParserTRY)
		}
		p.SetState(451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(450)
				p.Match(tsqlParserSEMI)
			}

		}
		{
			p.SetState(453)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(454)
			p.Match(tsqlParserCATCH)
		}
		p.SetState(456)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSEMI {
			{
				p.SetState(455)
				p.Match(tsqlParserSEMI)
			}

		}
		p.SetState(459)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<tsqlParserALTER)|(1<<tsqlParserBEGIN)|(1<<tsqlParserBREAK)|(1<<tsqlParserCLOSE)|(1<<tsqlParserCOMMIT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(tsqlParserCONTINUE-34))|(1<<(tsqlParserCREATE-34))|(1<<(tsqlParserDEALLOCATE-34))|(1<<(tsqlParserDECLARE-34))|(1<<(tsqlParserDELETE-34))|(1<<(tsqlParserDROP-34))|(1<<(tsqlParserEXECUTE-34)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(tsqlParserFETCH-67))|(1<<(tsqlParserFORCESEEK-67))|(1<<(tsqlParserGOTO-67))|(1<<(tsqlParserGRANT-67))|(1<<(tsqlParserIF-67))|(1<<(tsqlParserINSERT-67)))) != 0) || (((_la-114)&-(0x1f+1)) == 0 && ((1<<uint((_la-114)))&((1<<(tsqlParserOPEN-114))|(1<<(tsqlParserPRINT-114))|(1<<(tsqlParserRAISERROR-114))|(1<<(tsqlParserRETURN-114))|(1<<(tsqlParserREVERT-114)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(tsqlParserROLLBACK-146))|(1<<(tsqlParserSAVE-146))|(1<<(tsqlParserSELECT-146))|(1<<(tsqlParserSET-146)))) != 0) || (((_la-179)&-(0x1f+1)) == 0 && ((1<<uint((_la-179)))&((1<<(tsqlParserUPDATE-179))|(1<<(tsqlParserUSE-179))|(1<<(tsqlParserWAITFOR-179))|(1<<(tsqlParserWHILE-179))|(1<<(tsqlParserWITH-179))|(1<<(tsqlParserABSOLUTE-179))|(1<<(tsqlParserAPPLY-179))|(1<<(tsqlParserAUTO-179))|(1<<(tsqlParserAVG-179)))) != 0) || (((_la-211)&-(0x1f+1)) == 0 && ((1<<uint((_la-211)))&((1<<(tsqlParserBASE64-211))|(1<<(tsqlParserCALLER-211))|(1<<(tsqlParserCAST-211))|(1<<(tsqlParserCATCH-211))|(1<<(tsqlParserCHECKSUM_AGG-211))|(1<<(tsqlParserCOMMITTED-211))|(1<<(tsqlParserCONCAT-211))|(1<<(tsqlParserCONTROL-211))|(1<<(tsqlParserCOOKIE-211))|(1<<(tsqlParserCOUNT-211))|(1<<(tsqlParserCOUNT_BIG-211))|(1<<(tsqlParserDELAY-211))|(1<<(tsqlParserDELETED-211)))) != 0) || (((_la-243)&-(0x1f+1)) == 0 && ((1<<uint((_la-243)))&((1<<(tsqlParserDENSE_RANK-243))|(1<<(tsqlParserDISABLE-243))|(1<<(tsqlParserDYNAMIC-243))|(1<<(tsqlParserENCRYPTION-243))|(1<<(tsqlParserEXPAND-243))|(1<<(tsqlParserFAST-243))|(1<<(tsqlParserFAST_FORWARD-243))|(1<<(tsqlParserFIRST-243))|(1<<(tsqlParserFOLLOWING-243))|(1<<(tsqlParserFORCE-243))|(1<<(tsqlParserFORCED-243))|(1<<(tsqlParserFORWARD_ONLY-243))|(1<<(tsqlParserFULLSCAN-243))|(1<<(tsqlParserGLOBAL-243))|(1<<(tsqlParserGO-243))|(1<<(tsqlParserGROUPING-243))|(1<<(tsqlParserGROUPING_ID-243))|(1<<(tsqlParserHASH-243))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-243)))) != 0) || (((_la-276)&-(0x1f+1)) == 0 && ((1<<uint((_la-276)))&((1<<(tsqlParserIMPERSONATE-276))|(1<<(tsqlParserINSENSITIVE-276))|(1<<(tsqlParserINSERTED-276))|(1<<(tsqlParserISOLATION-276))|(1<<(tsqlParserKEEP-276))|(1<<(tsqlParserKEEPFIXED-276))|(1<<(tsqlParserKEYSET-276))|(1<<(tsqlParserLAST-276))|(1<<(tsqlParserLEVEL-276))|(1<<(tsqlParserLOCAL-276))|(1<<(tsqlParserLOCK_ESCALATION-276))|(1<<(tsqlParserLOGIN-276))|(1<<(tsqlParserLOOP-276))|(1<<(tsqlParserMARK-276))|(1<<(tsqlParserMAX-276))|(1<<(tsqlParserMAXDOP-276))|(1<<(tsqlParserMAXRECURSION-276))|(1<<(tsqlParserMIN-276))|(1<<(tsqlParserMODIFY-276))|(1<<(tsqlParserNAME-276))|(1<<(tsqlParserNEXT-276)))) != 0) || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(tsqlParserNOCOUNT-308))|(1<<(tsqlParserNOEXPAND-308))|(1<<(tsqlParserNORECOMPUTE-308))|(1<<(tsqlParserNTILE-308))|(1<<(tsqlParserNUMBER-308))|(1<<(tsqlParserOFFSET-308))|(1<<(tsqlParserONLINE-308))|(1<<(tsqlParserONLY-308))|(1<<(tsqlParserOPTIMISTIC-308))|(1<<(tsqlParserOPTIMIZE-308))|(1<<(tsqlParserOUT-308))|(1<<(tsqlParserOUTPUT-308))|(1<<(tsqlParserOWNER-308))|(1<<(tsqlParserPARAMETERIZATION-308))|(1<<(tsqlParserPARTITION-308))|(1<<(tsqlParserPATH-308))|(1<<(tsqlParserPRECEDING-308))|(1<<(tsqlParserPRIOR-308))|(1<<(tsqlParserPRIVILEGES-308))|(1<<(tsqlParserRANGE-308))|(1<<(tsqlParserRANK-308))|(1<<(tsqlParserREADONLY-308))|(1<<(tsqlParserREAD_ONLY-308))|(1<<(tsqlParserRECOMPILE-308)))) != 0) || (((_la-342)&-(0x1f+1)) == 0 && ((1<<uint((_la-342)))&((1<<(tsqlParserRELATIVE-342))|(1<<(tsqlParserREMOTE-342))|(1<<(tsqlParserREPEATABLE-342))|(1<<(tsqlParserROBUST-342))|(1<<(tsqlParserROOT-342))|(1<<(tsqlParserROW-342))|(1<<(tsqlParserROWGUID-342))|(1<<(tsqlParserROWS-342))|(1<<(tsqlParserROW_NUMBER-342))|(1<<(tsqlParserSAMPLE-342))|(1<<(tsqlParserSCHEMABINDING-342))|(1<<(tsqlParserSCROLL-342))|(1<<(tsqlParserSCROLL_LOCKS-342))|(1<<(tsqlParserSELF-342))|(1<<(tsqlParserSERIALIZABLE-342))|(1<<(tsqlParserSIMPLE-342))|(1<<(tsqlParserSNAPSHOT-342))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-342))|(1<<(tsqlParserSTATIC-342))|(1<<(tsqlParserSTATS_STREAM-342))|(1<<(tsqlParserSTDEV-342))|(1<<(tsqlParserSTDEVP-342))|(1<<(tsqlParserSUM-342))|(1<<(tsqlParserTEXTIMAGE_ON-342)))) != 0) || (((_la-374)&-(0x1f+1)) == 0 && ((1<<uint((_la-374)))&((1<<(tsqlParserTHROW-374))|(1<<(tsqlParserTIES-374))|(1<<(tsqlParserTIME-374))|(1<<(tsqlParserTRY-374))|(1<<(tsqlParserTYPE-374))|(1<<(tsqlParserTYPE_WARNING-374))|(1<<(tsqlParserUNBOUNDED-374))|(1<<(tsqlParserUNCOMMITTED-374))|(1<<(tsqlParserUNKNOWN-374))|(1<<(tsqlParserUSING-374))|(1<<(tsqlParserVAR-374))|(1<<(tsqlParserVARP-374))|(1<<(tsqlParserVIEWS-374))|(1<<(tsqlParserVIEW_METADATA-374))|(1<<(tsqlParserWORK-374))|(1<<(tsqlParserXML-374))|(1<<(tsqlParserXMLNAMESPACES-374))|(1<<(tsqlParserDOUBLE_QUOTE_ID-374))|(1<<(tsqlParserSQUARE_BRACKET_ID-374))|(1<<(tsqlParserID-374)))) != 0) || _la == tsqlParserLR_BRACKET {
			{
				p.SetState(458)

				var _x = p.Sql_clauses()

				localctx.(*Try_catch_statementContext).catch_clauses = _x
			}

		}
		{
			p.SetState(461)
			p.Match(tsqlParserEND)
		}
		{
			p.SetState(462)
			p.Match(tsqlParserCATCH)
		}
		p.SetState(464)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(463)
				p.Match(tsqlParserSEMI)
			}

		}

	case 10:
		localctx = NewWaitfor_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(466)
			p.Match(tsqlParserWAITFOR)
		}
		p.SetState(467)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserDELAY || _la == tsqlParserTIME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(468)
			p.expression(0)
		}
		p.SetState(470)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(469)
				p.Match(tsqlParserSEMI)
			}

		}

	case 11:
		localctx = NewWhile_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(472)
			p.Match(tsqlParserWHILE)
		}
		{
			p.SetState(473)
			p.Search_condition()
		}
		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(474)
				p.Sql_clause()
			}

		case 2:
			{
				p.SetState(475)
				p.Match(tsqlParserBREAK)
			}
			p.SetState(477)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(476)
					p.Match(tsqlParserSEMI)
				}

			}

		case 3:
			{
				p.SetState(479)
				p.Match(tsqlParserCONTINUE)
			}
			p.SetState(481)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(480)
					p.Match(tsqlParserSEMI)
				}

			}

		}

	case 12:
		localctx = NewPrint_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(485)
			p.Match(tsqlParserPRINT)
		}
		{
			p.SetState(486)
			p.expression(0)
		}
		p.SetState(488)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(487)
				p.Match(tsqlParserSEMI)
			}

		}

	case 13:
		localctx = NewRaiseerror_statementContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(490)
			p.Match(tsqlParserRAISERROR)
		}
		{
			p.SetState(491)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(492)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Raiseerror_statementContext).msg = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-402)&-(0x1f+1)) == 0 && ((1<<uint((_la-402)))&((1<<(tsqlParserLOCAL_ID-402))|(1<<(tsqlParserDECIMAL-402))|(1<<(tsqlParserSTRING-402)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Raiseerror_statementContext).msg = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(493)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(494)

			var _x = p.Constant_LOCAL_ID()

			localctx.(*Raiseerror_statementContext).severity = _x
		}
		{
			p.SetState(495)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(496)

			var _x = p.Constant_LOCAL_ID()

			localctx.(*Raiseerror_statementContext).state = _x
		}
		p.SetState(501)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(497)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(498)
				p.Constant_LOCAL_ID()
			}

			p.SetState(503)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(504)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(506)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(505)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// IAnother_statementContext is an interface to support dynamic dispatch.
type IAnother_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnother_statementContext differentiates from other interfaces.
	IsAnother_statementContext()
}

type Another_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnother_statementContext() *Another_statementContext {
	var p = new(Another_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_another_statement
	return p
}

func (*Another_statementContext) IsAnother_statementContext() {}

func NewAnother_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Another_statementContext {
	var p = new(Another_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_another_statement

	return p
}

func (s *Another_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Another_statementContext) Declare_statement() IDeclare_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_statementContext)
}

func (s *Another_statementContext) Cursor_statement() ICursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_statementContext)
}

func (s *Another_statementContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Another_statementContext) Security_statement() ISecurity_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISecurity_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISecurity_statementContext)
}

func (s *Another_statementContext) Set_statement() ISet_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statementContext)
}

func (s *Another_statementContext) Transaction_statement() ITransaction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_statementContext)
}

func (s *Another_statementContext) Use_statement() IUse_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUse_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUse_statementContext)
}

func (s *Another_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Another_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Another_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAnother_statement(s)
	}
}

func (s *Another_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAnother_statement(s)
	}
}

func (p *tsqlParser) Another_statement() (localctx IAnother_statementContext) {
	localctx = NewAnother_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, tsqlParserRULE_another_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(510)
			p.Declare_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(511)
			p.Cursor_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(512)
			p.Execute_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(513)
			p.Security_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(514)
			p.Set_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(515)
			p.Transaction_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(516)
			p.Use_statement()
		}

	}

	return localctx
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_var returns the cursor_var token.
	GetCursor_var() antlr.Token

	// SetCursor_var sets the cursor_var token.
	SetCursor_var(antlr.Token)

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	cursor_var antlr.Token
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_delete_statement
	return p
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) GetCursor_var() antlr.Token { return s.cursor_var }

func (s *Delete_statementContext) SetCursor_var(v antlr.Token) { s.cursor_var = v }

func (s *Delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELETE, 0)
}

func (s *Delete_statementContext) Delete_statement_from() IDelete_statement_fromContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statement_fromContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statement_fromContext)
}

func (s *Delete_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Delete_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserTOP, 0)
}

func (s *Delete_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Delete_statementContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserFROM)
}

func (s *Delete_statementContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, i)
}

func (s *Delete_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Delete_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Delete_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHERE, 0)
}

func (s *Delete_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Delete_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Delete_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Delete_statementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Delete_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Delete_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Delete_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Delete_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Delete_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDelete_statement(s)
	}
}

func (s *Delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDelete_statement(s)
	}
}

func (p *tsqlParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, tsqlParserRULE_delete_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(520)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(519)
			p.With_expression()
		}

	}
	{
		p.SetState(522)
		p.Match(tsqlParserDELETE)
	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(523)
			p.Match(tsqlParserTOP)
		}
		{
			p.SetState(524)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(525)
			p.expression(0)
		}
		{
			p.SetState(526)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPERCENT {
			{
				p.SetState(527)
				p.Match(tsqlParserPERCENT)
			}

		}

	}
	p.SetState(533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(532)
			p.Match(tsqlParserFROM)
		}

	}
	{
		p.SetState(535)
		p.Delete_statement_from()
	}
	p.SetState(537)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(536)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(540)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(539)
			p.Output_clause()
		}

	}
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(542)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(543)
			p.Table_sources()
		}

	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWHERE {
		{
			p.SetState(546)
			p.Match(tsqlParserWHERE)
		}
		p.SetState(557)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserCASE, tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserDEFAULT, tsqlParserEXISTS, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserLEFT, tsqlParserNOT, tsqlParserNULL, tsqlParserNULLIF, tsqlParserOVER, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserLR_BRACKET, tsqlParserPLUS, tsqlParserMINUS, tsqlParserBIT_NOT:
			{
				p.SetState(547)
				p.Search_condition()
			}

		case tsqlParserCURRENT:
			{
				p.SetState(548)
				p.Match(tsqlParserCURRENT)
			}
			{
				p.SetState(549)
				p.Match(tsqlParserOF)
			}
			p.SetState(555)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
			case 1:
				p.SetState(551)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(550)
						p.Match(tsqlParserGLOBAL)
					}

				}
				{
					p.SetState(553)
					p.Cursor_name()
				}

			case 2:
				{
					p.SetState(554)

					var _m = p.Match(tsqlParserLOCAL_ID)

					localctx.(*Delete_statementContext).cursor_var = _m
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(562)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(561)
			p.For_clause()
		}

	}
	p.SetState(565)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTION {
		{
			p.SetState(564)
			p.Option_clause()
		}

	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(567)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDelete_statement_fromContext is an interface to support dynamic dispatch.
type IDelete_statement_fromContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_var returns the table_var token.
	GetTable_var() antlr.Token

	// SetTable_var sets the table_var token.
	SetTable_var(antlr.Token)

	// IsDelete_statement_fromContext differentiates from other interfaces.
	IsDelete_statement_fromContext()
}

type Delete_statement_fromContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	table_var antlr.Token
}

func NewEmptyDelete_statement_fromContext() *Delete_statement_fromContext {
	var p = new(Delete_statement_fromContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_delete_statement_from
	return p
}

func (*Delete_statement_fromContext) IsDelete_statement_fromContext() {}

func NewDelete_statement_fromContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statement_fromContext {
	var p = new(Delete_statement_fromContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_delete_statement_from

	return p
}

func (s *Delete_statement_fromContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statement_fromContext) GetTable_var() antlr.Token { return s.table_var }

func (s *Delete_statement_fromContext) SetTable_var(v antlr.Token) { s.table_var = v }

func (s *Delete_statement_fromContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Delete_statement_fromContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Delete_statement_fromContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Delete_statement_fromContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Delete_statement_fromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statement_fromContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statement_fromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDelete_statement_from(s)
	}
}

func (s *Delete_statement_fromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDelete_statement_from(s)
	}
}

func (p *tsqlParser) Delete_statement_from() (localctx IDelete_statement_fromContext) {
	localctx = NewDelete_statement_fromContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, tsqlParserRULE_delete_statement_from)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(570)
			p.Table_alias()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(571)
			p.Ddl_object()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(572)
			p.Rowset_function_limited()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(573)

			var _m = p.Match(tsqlParserLOCAL_ID)

			localctx.(*Delete_statement_fromContext).table_var = _m
		}

	}

	return localctx
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_insert_statement
	return p
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERT, 0)
}

func (s *Insert_statementContext) Insert_statement_value() IInsert_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statement_valueContext)
}

func (s *Insert_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Insert_statementContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Insert_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Insert_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserTOP, 0)
}

func (s *Insert_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Insert_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Insert_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Insert_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Insert_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Insert_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Insert_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterInsert_statement(s)
	}
}

func (s *Insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitInsert_statement(s)
	}
}

func (p *tsqlParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, tsqlParserRULE_insert_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(576)
			p.With_expression()
		}

	}
	{
		p.SetState(579)
		p.Match(tsqlParserINSERT)
	}
	p.SetState(587)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(580)
			p.Match(tsqlParserTOP)
		}
		{
			p.SetState(581)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(582)
			p.expression(0)
		}
		{
			p.SetState(583)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPERCENT {
			{
				p.SetState(584)
				p.Match(tsqlParserPERCENT)
			}

		}

	}
	p.SetState(590)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(589)
			p.Match(tsqlParserINTO)
		}

	}
	p.SetState(594)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserID:
		{
			p.SetState(592)
			p.Ddl_object()
		}

	case tsqlParserOPENDATASOURCE, tsqlParserOPENQUERY:
		{
			p.SetState(593)
			p.Rowset_function_limited()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(597)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(596)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(599)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(600)
			p.Column_name_list()
		}
		{
			p.SetState(601)
			p.Match(tsqlParserRR_BRACKET)
		}

	}
	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOUTPUT {
		{
			p.SetState(605)
			p.Output_clause()
		}

	}
	{
		p.SetState(608)
		p.Insert_statement_value()
	}
	p.SetState(610)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(609)
			p.For_clause()
		}

	}
	p.SetState(613)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTION {
		{
			p.SetState(612)
			p.Option_clause()
		}

	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(615)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IInsert_statement_valueContext is an interface to support dynamic dispatch.
type IInsert_statement_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statement_valueContext differentiates from other interfaces.
	IsInsert_statement_valueContext()
}

type Insert_statement_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statement_valueContext() *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_insert_statement_value
	return p
}

func (*Insert_statement_valueContext) IsInsert_statement_valueContext() {}

func NewInsert_statement_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_insert_statement_value

	return p
}

func (s *Insert_statement_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statement_valueContext) Table_value_constructor() ITable_value_constructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_value_constructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_value_constructorContext)
}

func (s *Insert_statement_valueContext) Derived_table() IDerived_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerived_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerived_tableContext)
}

func (s *Insert_statement_valueContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Insert_statement_valueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Insert_statement_valueContext) VALUES() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUES, 0)
}

func (s *Insert_statement_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statement_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statement_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterInsert_statement_value(s)
	}
}

func (s *Insert_statement_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitInsert_statement_value(s)
	}
}

func (p *tsqlParser) Insert_statement_value() (localctx IInsert_statement_valueContext) {
	localctx = NewInsert_statement_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, tsqlParserRULE_insert_statement_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(623)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserVALUES:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(618)
			p.Table_value_constructor()
		}

	case tsqlParserSELECT, tsqlParserWITH, tsqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(619)
			p.Derived_table()
		}

	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(620)
			p.Execute_statement()
		}

	case tsqlParserDEFAULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(621)
			p.Match(tsqlParserDEFAULT)
		}
		{
			p.SetState(622)
			p.Match(tsqlParserVALUES)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_select_statement
	return p
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Select_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Select_statementContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Select_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Select_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSelect_statement(s)
	}
}

func (s *Select_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSelect_statement(s)
	}
}

func (p *tsqlParser) Select_statement() (localctx ISelect_statementContext) {
	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, tsqlParserRULE_select_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(625)
			p.With_expression()
		}

	}
	{
		p.SetState(628)
		p.Query_expression()
	}
	p.SetState(630)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(629)
			p.Order_by_clause()
		}

	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(632)
			p.For_clause()
		}

	}
	p.SetState(636)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(635)
			p.Option_clause()
		}

	}
	p.SetState(639)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(638)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_var returns the cursor_var token.
	GetCursor_var() antlr.Token

	// SetCursor_var sets the cursor_var token.
	SetCursor_var(antlr.Token)

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	cursor_var antlr.Token
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_update_statement
	return p
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) GetCursor_var() antlr.Token { return s.cursor_var }

func (s *Update_statementContext) SetCursor_var(v antlr.Token) { s.cursor_var = v }

func (s *Update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUPDATE, 0)
}

func (s *Update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Update_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Update_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Update_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Update_statementContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Update_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Update_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserTOP, 0)
}

func (s *Update_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Update_statementContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Update_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Update_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Update_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHERE, 0)
}

func (s *Update_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Update_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Update_statementContext) Search_condition_list() ISearch_condition_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_listContext)
}

func (s *Update_statementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Update_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Update_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Update_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Update_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Update_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUpdate_statement(s)
	}
}

func (s *Update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUpdate_statement(s)
	}
}

func (p *tsqlParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, tsqlParserRULE_update_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(641)
			p.With_expression()
		}

	}
	{
		p.SetState(644)
		p.Match(tsqlParserUPDATE)
	}
	p.SetState(652)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(645)
			p.Match(tsqlParserTOP)
		}
		{
			p.SetState(646)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(647)
			p.expression(0)
		}
		{
			p.SetState(648)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPERCENT {
			{
				p.SetState(649)
				p.Match(tsqlParserPERCENT)
			}

		}

	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserID:
		{
			p.SetState(654)
			p.Ddl_object()
		}

	case tsqlParserOPENDATASOURCE, tsqlParserOPENQUERY:
		{
			p.SetState(655)
			p.Rowset_function_limited()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH || _la == tsqlParserLR_BRACKET {
		{
			p.SetState(658)
			p.With_table_hints()
		}

	}
	{
		p.SetState(661)
		p.Match(tsqlParserSET)
	}
	{
		p.SetState(662)
		p.Update_elem()
	}
	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(663)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(664)
			p.Update_elem()
		}

		p.SetState(669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(671)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(670)
			p.Output_clause()
		}

	}
	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(673)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(674)
			p.Table_sources()
		}

	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWHERE {
		{
			p.SetState(677)
			p.Match(tsqlParserWHERE)
		}
		p.SetState(688)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserCASE, tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserDEFAULT, tsqlParserEXISTS, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserLEFT, tsqlParserNOT, tsqlParserNULL, tsqlParserNULLIF, tsqlParserOVER, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserLR_BRACKET, tsqlParserPLUS, tsqlParserMINUS, tsqlParserBIT_NOT:
			{
				p.SetState(678)
				p.Search_condition_list()
			}

		case tsqlParserCURRENT:
			{
				p.SetState(679)
				p.Match(tsqlParserCURRENT)
			}
			{
				p.SetState(680)
				p.Match(tsqlParserOF)
			}
			p.SetState(686)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
			case 1:
				p.SetState(682)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(681)
						p.Match(tsqlParserGLOBAL)
					}

				}
				{
					p.SetState(684)
					p.Cursor_name()
				}

			case 2:
				{
					p.SetState(685)

					var _m = p.Match(tsqlParserLOCAL_ID)

					localctx.(*Update_statementContext).cursor_var = _m
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(693)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(692)
			p.For_clause()
		}

	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTION {
		{
			p.SetState(695)
			p.Option_clause()
		}

	}
	p.SetState(699)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(698)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IOutput_clauseContext is an interface to support dynamic dispatch.
type IOutput_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_clauseContext differentiates from other interfaces.
	IsOutput_clauseContext()
}

type Output_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_clauseContext() *Output_clauseContext {
	var p = new(Output_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_output_clause
	return p
}

func (*Output_clauseContext) IsOutput_clauseContext() {}

func NewOutput_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_clauseContext {
	var p = new(Output_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_output_clause

	return p
}

func (s *Output_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_clauseContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Output_clauseContext) AllOutput_dml_list_elem() []IOutput_dml_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutput_dml_list_elemContext)(nil)).Elem())
	var tst = make([]IOutput_dml_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutput_dml_list_elemContext)
		}
	}

	return tst
}

func (s *Output_clauseContext) Output_dml_list_elem(i int) IOutput_dml_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_dml_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutput_dml_list_elemContext)
}

func (s *Output_clauseContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Output_clauseContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Output_clauseContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Output_clauseContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Output_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOutput_clause(s)
	}
}

func (s *Output_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOutput_clause(s)
	}
}

func (p *tsqlParser) Output_clause() (localctx IOutput_clauseContext) {
	localctx = NewOutput_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, tsqlParserRULE_output_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(701)
		p.Match(tsqlParserOUTPUT)
	}
	{
		p.SetState(702)
		p.Output_dml_list_elem()
	}
	p.SetState(707)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(703)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(704)
			p.Output_dml_list_elem()
		}

		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(710)
			p.Match(tsqlParserINTO)
		}
		p.SetState(713)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserLOCAL_ID:
			{
				p.SetState(711)
				p.Match(tsqlParserLOCAL_ID)
			}

		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(712)
				p.Table_name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(715)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(716)
				p.Column_name_list()
			}
			{
				p.SetState(717)
				p.Match(tsqlParserRR_BRACKET)
			}

		}

	}

	return localctx
}

// IOutput_dml_list_elemContext is an interface to support dynamic dispatch.
type IOutput_dml_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_dml_list_elemContext differentiates from other interfaces.
	IsOutput_dml_list_elemContext()
}

type Output_dml_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_dml_list_elemContext() *Output_dml_list_elemContext {
	var p = new(Output_dml_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_output_dml_list_elem
	return p
}

func (*Output_dml_list_elemContext) IsOutput_dml_list_elemContext() {}

func NewOutput_dml_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_dml_list_elemContext {
	var p = new(Output_dml_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_output_dml_list_elem

	return p
}

func (s *Output_dml_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_dml_list_elemContext) Output_column_name() IOutput_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_column_nameContext)
}

func (s *Output_dml_list_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Output_dml_list_elemContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Output_dml_list_elemContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Output_dml_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_dml_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_dml_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOutput_dml_list_elem(s)
	}
}

func (s *Output_dml_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOutput_dml_list_elem(s)
	}
}

func (p *tsqlParser) Output_dml_list_elem() (localctx IOutput_dml_list_elemContext) {
	localctx = NewOutput_dml_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, tsqlParserRULE_output_dml_list_elem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(723)
			p.Output_column_name()
		}

	case 2:
		{
			p.SetState(724)
			p.expression(0)
		}

	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
		p.SetState(728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserAS {
			{
				p.SetState(727)
				p.Match(tsqlParserAS)
			}

		}
		{
			p.SetState(730)
			p.Column_alias()
		}

	}

	return localctx
}

// IOutput_column_nameContext is an interface to support dynamic dispatch.
type IOutput_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_column_nameContext differentiates from other interfaces.
	IsOutput_column_nameContext()
}

type Output_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_column_nameContext() *Output_column_nameContext {
	var p = new(Output_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_output_column_name
	return p
}

func (*Output_column_nameContext) IsOutput_column_nameContext() {}

func NewOutput_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_column_nameContext {
	var p = new(Output_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_output_column_name

	return p
}

func (s *Output_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_column_nameContext) DELETED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELETED, 0)
}

func (s *Output_column_nameContext) INSERTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERTED, 0)
}

func (s *Output_column_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Output_column_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Output_column_nameContext) DOLLAR_ACTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserDOLLAR_ACTION, 0)
}

func (s *Output_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOutput_column_name(s)
	}
}

func (s *Output_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOutput_column_name(s)
	}
}

func (p *tsqlParser) Output_column_name() (localctx IOutput_column_nameContext) {
	localctx = NewOutput_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, tsqlParserRULE_output_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(744)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(736)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(733)
				p.Match(tsqlParserDELETED)
			}

		case 2:
			{
				p.SetState(734)
				p.Match(tsqlParserINSERTED)
			}

		case 3:
			{
				p.SetState(735)
				p.Table_name()
			}

		}
		{
			p.SetState(738)
			p.Match(tsqlParserDOT)
		}
		p.SetState(741)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserSTAR:
			{
				p.SetState(739)
				p.Match(tsqlParserSTAR)
			}

		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(740)
				p.Id()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserDOLLAR_ACTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(743)
			p.Match(tsqlParserDOLLAR_ACTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_databaseContext is an interface to support dynamic dispatch.
type ICreate_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetCollation_name returns the collation_name rule contexts.
	GetCollation_name() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetCollation_name sets the collation_name rule contexts.
	SetCollation_name(IIdContext)

	// IsCreate_databaseContext differentiates from other interfaces.
	IsCreate_databaseContext()
}

type Create_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	database       IIdContext
	collation_name IIdContext
}

func NewEmptyCreate_databaseContext() *Create_databaseContext {
	var p = new(Create_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_database
	return p
}

func (*Create_databaseContext) IsCreate_databaseContext() {}

func NewCreate_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_databaseContext {
	var p = new(Create_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_database

	return p
}

func (s *Create_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_databaseContext) GetDatabase() IIdContext { return s.database }

func (s *Create_databaseContext) GetCollation_name() IIdContext { return s.collation_name }

func (s *Create_databaseContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Create_databaseContext) SetCollation_name(v IIdContext) { s.collation_name = v }

func (s *Create_databaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATABASE, 0)
}

func (s *Create_databaseContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_databaseContext) CONTAINMENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTAINMENT, 0)
}

func (s *Create_databaseContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserON)
}

func (s *Create_databaseContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserON, i)
}

func (s *Create_databaseContext) AllDatabase_file_spec() []IDatabase_file_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_file_specContext)(nil)).Elem())
	var tst = make([]IDatabase_file_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_file_specContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Database_file_spec(i int) IDatabase_file_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_file_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_file_specContext)
}

func (s *Create_databaseContext) LOG() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOG, 0)
}

func (s *Create_databaseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Create_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Create_databaseContext) AllCreate_database_option() []ICreate_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem())
	var tst = make([]ICreate_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_database_optionContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Create_database_option(i int) ICreate_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_optionContext)
}

func (s *Create_databaseContext) NONE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONE, 0)
}

func (s *Create_databaseContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTIAL, 0)
}

func (s *Create_databaseContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIMARY, 0)
}

func (s *Create_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_database(s)
	}
}

func (s *Create_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_database(s)
	}
}

func (p *tsqlParser) Create_database() (localctx ICreate_databaseContext) {
	localctx = NewCreate_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, tsqlParserRULE_create_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(746)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(747)
		p.Match(tsqlParserDATABASE)
	}

	{
		p.SetState(748)

		var _x = p.Id()

		localctx.(*Create_databaseContext).database = _x
	}

	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONTAINMENT {
		{
			p.SetState(749)
			p.Match(tsqlParserCONTAINMENT)
		}
		{
			p.SetState(750)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(751)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserNONE || _la == tsqlParserPARTIAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserON {
		{
			p.SetState(754)
			p.Match(tsqlParserON)
		}
		p.SetState(756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPRIMARY {
			{
				p.SetState(755)
				p.Match(tsqlParserPRIMARY)
			}

		}
		{
			p.SetState(758)
			p.Database_file_spec()
		}
		p.SetState(763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(759)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(760)
				p.Database_file_spec()
			}

			p.SetState(765)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(778)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLOG {
		{
			p.SetState(768)
			p.Match(tsqlParserLOG)
		}
		{
			p.SetState(769)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(770)
			p.Database_file_spec()
		}
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(771)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(772)
				p.Database_file_spec()
			}

			p.SetState(777)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOLLATE {
		{
			p.SetState(780)
			p.Match(tsqlParserCOLLATE)
		}
		{
			p.SetState(781)

			var _x = p.Id()

			localctx.(*Create_databaseContext).collation_name = _x
		}

	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(784)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(785)
			p.Create_database_option()
		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(786)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(787)
				p.Create_database_option()
			}

			p.SetState(792)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreate_indexContext is an interface to support dynamic dispatch.
type ICreate_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_indexContext differentiates from other interfaces.
	IsCreate_indexContext()
}

type Create_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_indexContext() *Create_indexContext {
	var p = new(Create_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_index
	return p
}

func (*Create_indexContext) IsCreate_indexContext() {}

func NewCreate_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_indexContext {
	var p = new(Create_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_index

	return p
}

func (s *Create_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_indexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserINDEX, 0)
}

func (s *Create_indexContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_indexContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_indexContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserON)
}

func (s *Create_indexContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserON, i)
}

func (s *Create_indexContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Create_indexContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_indexContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNIQUE, 0)
}

func (s *Create_indexContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Create_indexContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Create_indexContext) ASC() antlr.TerminalNode {
	return s.GetToken(tsqlParserASC, 0)
}

func (s *Create_indexContext) DESC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDESC, 0)
}

func (s *Create_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_index(s)
	}
}

func (s *Create_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_index(s)
	}
}

func (p *tsqlParser) Create_index() (localctx ICreate_indexContext) {
	localctx = NewCreate_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, tsqlParserRULE_create_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(795)
		p.Match(tsqlParserCREATE)
	}
	p.SetState(797)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserUNIQUE {
		{
			p.SetState(796)
			p.Match(tsqlParserUNIQUE)
		}

	}
	p.SetState(800)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED {
		{
			p.SetState(799)
			p.Clustered()
		}

	}
	{
		p.SetState(802)
		p.Match(tsqlParserINDEX)
	}
	{
		p.SetState(803)
		p.Id()
	}
	{
		p.SetState(804)
		p.Match(tsqlParserON)
	}
	{
		p.SetState(805)
		p.Table_name_with_hint()
	}
	{
		p.SetState(806)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(807)
		p.Column_name_list()
	}
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserASC || _la == tsqlParserDESC {
		p.SetState(808)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserASC || _la == tsqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(811)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(813)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(812)
			p.Index_options()
		}

	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserON {
		{
			p.SetState(815)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(816)
			p.Id()
		}

	}
	p.SetState(820)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(819)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_procedureContext is an interface to support dynamic dispatch.
type ICreate_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProc returns the proc token.
	GetProc() antlr.Token

	// SetProc sets the proc token.
	SetProc(antlr.Token)

	// IsCreate_procedureContext differentiates from other interfaces.
	IsCreate_procedureContext()
}

type Create_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	proc   antlr.Token
}

func NewEmptyCreate_procedureContext() *Create_procedureContext {
	var p = new(Create_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_procedure
	return p
}

func (*Create_procedureContext) IsCreate_procedureContext() {}

func NewCreate_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_procedureContext {
	var p = new(Create_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_procedure

	return p
}

func (s *Create_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_procedureContext) GetProc() antlr.Token { return s.proc }

func (s *Create_procedureContext) SetProc(v antlr.Token) { s.proc = v }

func (s *Create_procedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_procedureContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Create_procedureContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Create_procedureContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Create_procedureContext) PROC() antlr.TerminalNode {
	return s.GetToken(tsqlParserPROC, 0)
}

func (s *Create_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(tsqlParserPROCEDURE, 0)
}

func (s *Create_procedureContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Create_procedureContext) AllProcedure_param() []IProcedure_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem())
	var tst = make([]IProcedure_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_paramContext)
		}
	}

	return tst
}

func (s *Create_procedureContext) Procedure_param(i int) IProcedure_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_paramContext)
}

func (s *Create_procedureContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Create_procedureContext) AllProcedure_option() []IProcedure_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_optionContext)(nil)).Elem())
	var tst = make([]IProcedure_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_optionContext)
		}
	}

	return tst
}

func (s *Create_procedureContext) Procedure_option(i int) IProcedure_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_optionContext)
}

func (s *Create_procedureContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Create_procedureContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Create_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_procedure(s)
	}
}

func (s *Create_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_procedure(s)
	}
}

func (p *tsqlParser) Create_procedure() (localctx ICreate_procedureContext) {
	localctx = NewCreate_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, tsqlParserRULE_create_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(822)
		p.Match(tsqlParserCREATE)
	}
	p.SetState(823)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Create_procedureContext).proc = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserPROC || _la == tsqlParserPROCEDURE) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Create_procedureContext).proc = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(824)
		p.Func_proc_name()
	}
	p.SetState(827)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserSEMI {
		{
			p.SetState(825)
			p.Match(tsqlParserSEMI)
		}
		{
			p.SetState(826)
			p.Match(tsqlParserDECIMAL)
		}

	}
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLOCAL_ID || _la == tsqlParserLR_BRACKET {
		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLR_BRACKET {
			{
				p.SetState(829)
				p.Match(tsqlParserLR_BRACKET)
			}

		}
		{
			p.SetState(832)
			p.Procedure_param()
		}
		p.SetState(837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(833)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(834)
				p.Procedure_param()
			}

			p.SetState(839)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(841)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserRR_BRACKET {
			{
				p.SetState(840)
				p.Match(tsqlParserRR_BRACKET)
			}

		}

	}
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(845)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(846)
			p.Procedure_option()
		}
		p.SetState(851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(847)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(848)
				p.Procedure_option()
			}

			p.SetState(853)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(858)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFOR {
		{
			p.SetState(856)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(857)
			p.Match(tsqlParserREPLICATION)
		}

	}
	{
		p.SetState(860)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(861)
		p.Sql_clauses()
	}

	return localctx
}

// IProcedure_paramContext is an interface to support dynamic dispatch.
type IProcedure_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDefault_val returns the default_val rule contexts.
	GetDefault_val() IDefault_valueContext

	// SetDefault_val sets the default_val rule contexts.
	SetDefault_val(IDefault_valueContext)

	// IsProcedure_paramContext differentiates from other interfaces.
	IsProcedure_paramContext()
}

type Procedure_paramContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	default_val IDefault_valueContext
}

func NewEmptyProcedure_paramContext() *Procedure_paramContext {
	var p = new(Procedure_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_procedure_param
	return p
}

func (*Procedure_paramContext) IsProcedure_paramContext() {}

func NewProcedure_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_paramContext {
	var p = new(Procedure_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_procedure_param

	return p
}

func (s *Procedure_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_paramContext) GetDefault_val() IDefault_valueContext { return s.default_val }

func (s *Procedure_paramContext) SetDefault_val(v IDefault_valueContext) { s.default_val = v }

func (s *Procedure_paramContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Procedure_paramContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Procedure_paramContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Procedure_paramContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Procedure_paramContext) VARYING() antlr.TerminalNode {
	return s.GetToken(tsqlParserVARYING, 0)
}

func (s *Procedure_paramContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Procedure_paramContext) OUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUT, 0)
}

func (s *Procedure_paramContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Procedure_paramContext) READONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREADONLY, 0)
}

func (s *Procedure_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterProcedure_param(s)
	}
}

func (s *Procedure_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitProcedure_param(s)
	}
}

func (p *tsqlParser) Procedure_param() (localctx IProcedure_paramContext) {
	localctx = NewProcedure_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, tsqlParserRULE_procedure_param)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(863)
		p.Match(tsqlParserLOCAL_ID)
	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(864)
			p.Id()
		}
		{
			p.SetState(865)
			p.Match(tsqlParserDOT)
		}

	}
	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(869)
			p.Match(tsqlParserAS)
		}

	}
	{
		p.SetState(872)
		p.Data_type()
	}
	p.SetState(874)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserVARYING {
		{
			p.SetState(873)
			p.Match(tsqlParserVARYING)
		}

	}
	p.SetState(878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserEQUAL {
		{
			p.SetState(876)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(877)

			var _x = p.Default_value()

			localctx.(*Procedure_paramContext).default_val = _x
		}

	}
	p.SetState(881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-322)&-(0x1f+1)) == 0 && ((1<<uint((_la-322)))&((1<<(tsqlParserOUT-322))|(1<<(tsqlParserOUTPUT-322))|(1<<(tsqlParserREADONLY-322)))) != 0 {
		p.SetState(880)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-322)&-(0x1f+1)) == 0 && ((1<<uint((_la-322)))&((1<<(tsqlParserOUT-322))|(1<<(tsqlParserOUTPUT-322))|(1<<(tsqlParserREADONLY-322)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IProcedure_optionContext is an interface to support dynamic dispatch.
type IProcedure_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedure_optionContext differentiates from other interfaces.
	IsProcedure_optionContext()
}

type Procedure_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_optionContext() *Procedure_optionContext {
	var p = new(Procedure_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_procedure_option
	return p
}

func (*Procedure_optionContext) IsProcedure_optionContext() {}

func NewProcedure_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_optionContext {
	var p = new(Procedure_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_procedure_option

	return p
}

func (s *Procedure_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *Procedure_optionContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOMPILE, 0)
}

func (s *Procedure_optionContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Procedure_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterProcedure_option(s)
	}
}

func (s *Procedure_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitProcedure_option(s)
	}
}

func (p *tsqlParser) Procedure_option() (localctx IProcedure_optionContext) {
	localctx = NewProcedure_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, tsqlParserRULE_procedure_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(886)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(883)
			p.Match(tsqlParserENCRYPTION)
		}

	case tsqlParserRECOMPILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(884)
			p.Match(tsqlParserRECOMPILE)
		}

	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(885)
			p.Execute_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_statisticsContext is an interface to support dynamic dispatch.
type ICreate_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_statisticsContext differentiates from other interfaces.
	IsCreate_statisticsContext()
}

type Create_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_statisticsContext() *Create_statisticsContext {
	var p = new(Create_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_statistics
	return p
}

func (*Create_statisticsContext) IsCreate_statisticsContext() {}

func NewCreate_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_statisticsContext {
	var p = new(Create_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_statistics

	return p
}

func (s *Create_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_statisticsContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATISTICS, 0)
}

func (s *Create_statisticsContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_statisticsContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Create_statisticsContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Create_statisticsContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_statisticsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Create_statisticsContext) FULLSCAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULLSCAN, 0)
}

func (s *Create_statisticsContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSAMPLE, 0)
}

func (s *Create_statisticsContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Create_statisticsContext) STATS_STREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATS_STREAM, 0)
}

func (s *Create_statisticsContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Create_statisticsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Create_statisticsContext) NORECOMPUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNORECOMPUTE, 0)
}

func (s *Create_statisticsContext) INCREMENTAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserINCREMENTAL, 0)
}

func (s *Create_statisticsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Create_statisticsContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Create_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_statistics(s)
	}
}

func (s *Create_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_statistics(s)
	}
}

func (p *tsqlParser) Create_statistics() (localctx ICreate_statisticsContext) {
	localctx = NewCreate_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, tsqlParserRULE_create_statistics)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(889)
		p.Match(tsqlParserSTATISTICS)
	}
	{
		p.SetState(890)
		p.Id()
	}
	{
		p.SetState(891)
		p.Match(tsqlParserON)
	}
	{
		p.SetState(892)
		p.Table_name_with_hint()
	}
	{
		p.SetState(893)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(894)
		p.Column_name_list()
	}
	{
		p.SetState(895)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(914)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(896)
			p.Match(tsqlParserWITH)
		}
		p.SetState(902)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFULLSCAN:
			{
				p.SetState(897)
				p.Match(tsqlParserFULLSCAN)
			}

		case tsqlParserSAMPLE:
			{
				p.SetState(898)
				p.Match(tsqlParserSAMPLE)
			}
			{
				p.SetState(899)
				p.Match(tsqlParserDECIMAL)
			}
			p.SetState(900)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserPERCENT || _la == tsqlParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case tsqlParserSTATS_STREAM:
			{
				p.SetState(901)
				p.Match(tsqlParserSTATS_STREAM)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(906)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(904)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(905)
				p.Match(tsqlParserNORECOMPUTE)
			}

		}
		p.SetState(912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(908)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(909)
				p.Match(tsqlParserINCREMENTAL)
			}
			{
				p.SetState(910)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(911)
				p.On_off()
			}

		}

	}
	p.SetState(917)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(916)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_tableContext is an interface to support dynamic dispatch.
type ICreate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_tableContext differentiates from other interfaces.
	IsCreate_tableContext()
}

type Create_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_tableContext() *Create_tableContext {
	var p = new(Create_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_table
	return p
}

func (*Create_tableContext) IsCreate_tableContext() {}

func NewCreate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tableContext {
	var p = new(Create_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_table

	return p
}

func (s *Create_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Create_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_tableContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Create_tableContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Create_tableContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_tableContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_tableContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDEFAULT)
}

func (s *Create_tableContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, i)
}

func (s *Create_tableContext) TEXTIMAGE_ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserTEXTIMAGE_ON, 0)
}

func (s *Create_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_table(s)
	}
}

func (s *Create_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_table(s)
	}
}

func (p *tsqlParser) Create_table() (localctx ICreate_tableContext) {
	localctx = NewCreate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, tsqlParserRULE_create_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(919)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(920)
		p.Match(tsqlParserTABLE)
	}
	{
		p.SetState(921)
		p.Table_name()
	}
	{
		p.SetState(922)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(923)
		p.Column_def_table_constraints()
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOMMA {
		{
			p.SetState(924)
			p.Match(tsqlParserCOMMA)
		}

	}
	{
		p.SetState(927)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(931)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(928)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(929)
			p.Id()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(930)
			p.Match(tsqlParserDEFAULT)
		}

	}
	p.SetState(936)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(933)
			p.Match(tsqlParserTEXTIMAGE_ON)
		}
		{
			p.SetState(934)
			p.Id()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(935)
			p.Match(tsqlParserDEFAULT)
		}

	}
	p.SetState(939)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(938)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_viewContext is an interface to support dynamic dispatch.
type ICreate_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_viewContext differentiates from other interfaces.
	IsCreate_viewContext()
}

type Create_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_viewContext() *Create_viewContext {
	var p = new(Create_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_view
	return p
}

func (*Create_viewContext) IsCreate_viewContext() {}

func NewCreate_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_viewContext {
	var p = new(Create_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_view

	return p
}

func (s *Create_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_viewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW, 0)
}

func (s *Create_viewContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Create_viewContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Create_viewContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_viewContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserWITH)
}

func (s *Create_viewContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, i)
}

func (s *Create_viewContext) AllView_attribute() []IView_attributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IView_attributeContext)(nil)).Elem())
	var tst = make([]IView_attributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IView_attributeContext)
		}
	}

	return tst
}

func (s *Create_viewContext) View_attribute(i int) IView_attributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_attributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IView_attributeContext)
}

func (s *Create_viewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Create_viewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTION, 0)
}

func (s *Create_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_view(s)
	}
}

func (s *Create_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_view(s)
	}
}

func (p *tsqlParser) Create_view() (localctx ICreate_viewContext) {
	localctx = NewCreate_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, tsqlParserRULE_create_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(942)
		p.Match(tsqlParserVIEW)
	}
	{
		p.SetState(943)
		p.Simple_name()
	}
	p.SetState(948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLR_BRACKET {
		{
			p.SetState(944)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(945)
			p.Column_name_list()
		}
		{
			p.SetState(946)
			p.Match(tsqlParserRR_BRACKET)
		}

	}
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(950)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(951)
			p.View_attribute()
		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(952)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(953)
				p.View_attribute()
			}

			p.SetState(958)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(961)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(962)
		p.Select_statement()
	}
	p.SetState(966)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(963)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(964)
			p.Match(tsqlParserCHECK)
		}
		{
			p.SetState(965)
			p.Match(tsqlParserOPTION)
		}

	}
	p.SetState(969)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(968)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IView_attributeContext is an interface to support dynamic dispatch.
type IView_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_attributeContext differentiates from other interfaces.
	IsView_attributeContext()
}

type View_attributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_attributeContext() *View_attributeContext {
	var p = new(View_attributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_view_attribute
	return p
}

func (*View_attributeContext) IsView_attributeContext() {}

func NewView_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_attributeContext {
	var p = new(View_attributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_view_attribute

	return p
}

func (s *View_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *View_attributeContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *View_attributeContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCHEMABINDING, 0)
}

func (s *View_attributeContext) VIEW_METADATA() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW_METADATA, 0)
}

func (s *View_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterView_attribute(s)
	}
}

func (s *View_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitView_attribute(s)
	}
}

func (p *tsqlParser) View_attribute() (localctx IView_attributeContext) {
	localctx = NewView_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, tsqlParserRULE_view_attribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(971)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserENCRYPTION || _la == tsqlParserSCHEMABINDING || _la == tsqlParserVIEW_METADATA) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IAlter_tableContext is an interface to support dynamic dispatch.
type IAlter_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IIdContext

	// GetFk returns the fk rule contexts.
	GetFk() IColumn_name_listContext

	// GetPk returns the pk rule contexts.
	GetPk() IColumn_name_listContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IIdContext)

	// SetFk sets the fk rule contexts.
	SetFk(IColumn_name_listContext)

	// SetPk sets the pk rule contexts.
	SetPk(IColumn_name_listContext)

	// IsAlter_tableContext differentiates from other interfaces.
	IsAlter_tableContext()
}

type Alter_tableContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IIdContext
	fk         IColumn_name_listContext
	pk         IColumn_name_listContext
}

func NewEmptyAlter_tableContext() *Alter_tableContext {
	var p = new(Alter_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_alter_table
	return p
}

func (*Alter_tableContext) IsAlter_tableContext() {}

func NewAlter_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tableContext {
	var p = new(Alter_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_alter_table

	return p
}

func (s *Alter_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tableContext) GetConstraint() IIdContext { return s.constraint }

func (s *Alter_tableContext) GetFk() IColumn_name_listContext { return s.fk }

func (s *Alter_tableContext) GetPk() IColumn_name_listContext { return s.pk }

func (s *Alter_tableContext) SetConstraint(v IIdContext) { s.constraint = v }

func (s *Alter_tableContext) SetFk(v IColumn_name_listContext) { s.fk = v }

func (s *Alter_tableContext) SetPk(v IColumn_name_listContext) { s.pk = v }

func (s *Alter_tableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserALTER, 0)
}

func (s *Alter_tableContext) AllTABLE() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserTABLE)
}

func (s *Alter_tableContext) TABLE(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, i)
}

func (s *Alter_tableContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_tableContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Alter_tableContext) LOCK_ESCALATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCK_ESCALATION, 0)
}

func (s *Alter_tableContext) ADD() antlr.TerminalNode {
	return s.GetToken(tsqlParserADD, 0)
}

func (s *Alter_tableContext) Column_def_table_constraint() IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Alter_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Alter_tableContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Alter_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Alter_tableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Alter_tableContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOREIGN, 0)
}

func (s *Alter_tableContext) KEY() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEY, 0)
}

func (s *Alter_tableContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(tsqlParserREFERENCES, 0)
}

func (s *Alter_tableContext) AUTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO, 0)
}

func (s *Alter_tableContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLE, 0)
}

func (s *Alter_tableContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_tableContext) AllColumn_name_list() []IColumn_name_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem())
	var tst = make([]IColumn_name_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_name_listContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Column_name_list(i int) IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Alter_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAlter_table(s)
	}
}

func (s *Alter_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAlter_table(s)
	}
}

func (p *tsqlParser) Alter_table() (localctx IAlter_tableContext) {
	localctx = NewAlter_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, tsqlParserRULE_alter_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(973)
		p.Match(tsqlParserALTER)
	}
	{
		p.SetState(974)
		p.Match(tsqlParserTABLE)
	}
	{
		p.SetState(975)
		p.Table_name()
	}
	p.SetState(1006)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserSET:
		{
			p.SetState(976)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(977)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(978)
			p.Match(tsqlParserLOCK_ESCALATION)
		}
		{
			p.SetState(979)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(980)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTABLE || _la == tsqlParserAUTO || _la == tsqlParserDISABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(981)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserADD:
		{
			p.SetState(982)
			p.Match(tsqlParserADD)
		}
		{
			p.SetState(983)
			p.Column_def_table_constraint()
		}

	case tsqlParserDROP:
		{
			p.SetState(984)
			p.Match(tsqlParserDROP)
		}
		{
			p.SetState(985)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(986)

			var _x = p.Id()

			localctx.(*Alter_tableContext).constraint = _x
		}

	case tsqlParserWITH:
		{
			p.SetState(987)
			p.Match(tsqlParserWITH)
		}
		{
			p.SetState(988)
			p.Match(tsqlParserCHECK)
		}
		{
			p.SetState(989)
			p.Match(tsqlParserADD)
		}
		{
			p.SetState(990)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(991)

			var _x = p.Id()

			localctx.(*Alter_tableContext).constraint = _x
		}
		{
			p.SetState(992)
			p.Match(tsqlParserFOREIGN)
		}
		{
			p.SetState(993)
			p.Match(tsqlParserKEY)
		}
		{
			p.SetState(994)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(995)

			var _x = p.Column_name_list()

			localctx.(*Alter_tableContext).fk = _x
		}
		{
			p.SetState(996)
			p.Match(tsqlParserRR_BRACKET)
		}
		{
			p.SetState(997)
			p.Match(tsqlParserREFERENCES)
		}
		{
			p.SetState(998)
			p.Table_name()
		}
		{
			p.SetState(999)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1000)

			var _x = p.Column_name_list()

			localctx.(*Alter_tableContext).pk = _x
		}
		{
			p.SetState(1001)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserCHECK:
		{
			p.SetState(1003)
			p.Match(tsqlParserCHECK)
		}
		{
			p.SetState(1004)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(1005)

			var _x = p.Id()

			localctx.(*Alter_tableContext).constraint = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1009)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1008)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IAlter_databaseContext is an interface to support dynamic dispatch.
type IAlter_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdContext

	// GetCollation returns the collation rule contexts.
	GetCollation() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdContext)

	// SetCollation sets the collation rule contexts.
	SetCollation(IIdContext)

	// IsAlter_databaseContext differentiates from other interfaces.
	IsAlter_databaseContext()
}

type Alter_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	database  IIdContext
	new_name  IIdContext
	collation IIdContext
}

func NewEmptyAlter_databaseContext() *Alter_databaseContext {
	var p = new(Alter_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_alter_database
	return p
}

func (*Alter_databaseContext) IsAlter_databaseContext() {}

func NewAlter_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_databaseContext {
	var p = new(Alter_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_alter_database

	return p
}

func (s *Alter_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_databaseContext) GetDatabase() IIdContext { return s.database }

func (s *Alter_databaseContext) GetNew_name() IIdContext { return s.new_name }

func (s *Alter_databaseContext) GetCollation() IIdContext { return s.collation }

func (s *Alter_databaseContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Alter_databaseContext) SetNew_name(v IIdContext) { s.new_name = v }

func (s *Alter_databaseContext) SetCollation(v IIdContext) { s.collation = v }

func (s *Alter_databaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserALTER, 0)
}

func (s *Alter_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATABASE, 0)
}

func (s *Alter_databaseContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Alter_databaseContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(tsqlParserMODIFY, 0)
}

func (s *Alter_databaseContext) NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserNAME, 0)
}

func (s *Alter_databaseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Alter_databaseContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Alter_databaseContext) Database_optionspec() IDatabase_optionspecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_optionspecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_optionspecContext)
}

func (s *Alter_databaseContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_databaseContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Alter_databaseContext) Termination() ITerminationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITerminationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITerminationContext)
}

func (s *Alter_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAlter_database(s)
	}
}

func (s *Alter_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAlter_database(s)
	}
}

func (p *tsqlParser) Alter_database() (localctx IAlter_databaseContext) {
	localctx = NewAlter_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, tsqlParserRULE_alter_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)
		p.Match(tsqlParserALTER)
	}
	{
		p.SetState(1012)
		p.Match(tsqlParserDATABASE)
	}
	p.SetState(1015)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		{
			p.SetState(1013)

			var _x = p.Id()

			localctx.(*Alter_databaseContext).database = _x
		}

	case tsqlParserCURRENT:
		{
			p.SetState(1014)
			p.Match(tsqlParserCURRENT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1029)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserMODIFY:
		{
			p.SetState(1017)
			p.Match(tsqlParserMODIFY)
		}
		{
			p.SetState(1018)
			p.Match(tsqlParserNAME)
		}
		{
			p.SetState(1019)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1020)

			var _x = p.Id()

			localctx.(*Alter_databaseContext).new_name = _x
		}

	case tsqlParserCOLLATE:
		{
			p.SetState(1021)
			p.Match(tsqlParserCOLLATE)
		}
		{
			p.SetState(1022)

			var _x = p.Id()

			localctx.(*Alter_databaseContext).collation = _x
		}

	case tsqlParserSET:
		{
			p.SetState(1023)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1024)
			p.Database_optionspec()
		}
		p.SetState(1027)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1025)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1026)
				p.Termination()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1031)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDatabase_optionspecContext is an interface to support dynamic dispatch.
type IDatabase_optionspecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_optionspecContext differentiates from other interfaces.
	IsDatabase_optionspecContext()
}

type Database_optionspecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_optionspecContext() *Database_optionspecContext {
	var p = new(Database_optionspecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_database_optionspec
	return p
}

func (*Database_optionspecContext) IsDatabase_optionspecContext() {}

func NewDatabase_optionspecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_optionspecContext {
	var p = new(Database_optionspecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_database_optionspec

	return p
}

func (s *Database_optionspecContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_optionspecContext) Auto_option() IAuto_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuto_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuto_optionContext)
}

func (s *Database_optionspecContext) Change_tracking_option() IChange_tracking_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tracking_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_tracking_optionContext)
}

func (s *Database_optionspecContext) Containment_option() IContainment_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContainment_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContainment_optionContext)
}

func (s *Database_optionspecContext) Cursor_option() ICursor_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_optionContext)
}

func (s *Database_optionspecContext) Date_correlation_optimization_option() IDate_correlation_optimization_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDate_correlation_optimization_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDate_correlation_optimization_optionContext)
}

func (s *Database_optionspecContext) Db_encryption_option() IDb_encryption_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_encryption_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_encryption_optionContext)
}

func (s *Database_optionspecContext) Db_state_option() IDb_state_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_state_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_state_optionContext)
}

func (s *Database_optionspecContext) Db_update_option() IDb_update_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_update_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_update_optionContext)
}

func (s *Database_optionspecContext) Db_user_access_option() IDb_user_access_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_user_access_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_user_access_optionContext)
}

func (s *Database_optionspecContext) Delayed_durability_option() IDelayed_durability_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelayed_durability_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelayed_durability_optionContext)
}

func (s *Database_optionspecContext) External_access_option() IExternal_access_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExternal_access_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExternal_access_optionContext)
}

func (s *Database_optionspecContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILESTREAM, 0)
}

func (s *Database_optionspecContext) Database_filestream_option() IDatabase_filestream_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_filestream_optionContext)
}

func (s *Database_optionspecContext) HADR_options() antlr.TerminalNode {
	return s.GetToken(tsqlParserHADR_options, 0)
}

func (s *Database_optionspecContext) Mixed_page_allocation_option() IMixed_page_allocation_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMixed_page_allocation_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMixed_page_allocation_optionContext)
}

func (s *Database_optionspecContext) Parameterization_option() IParameterization_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterization_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterization_optionContext)
}

func (s *Database_optionspecContext) Recovery_option() IRecovery_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecovery_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecovery_optionContext)
}

func (s *Database_optionspecContext) Service_broker_option() IService_broker_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IService_broker_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IService_broker_optionContext)
}

func (s *Database_optionspecContext) Snapshot_option() ISnapshot_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISnapshot_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISnapshot_optionContext)
}

func (s *Database_optionspecContext) Sql_option() ISql_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_optionContext)
}

func (s *Database_optionspecContext) Target_recovery_time_option() ITarget_recovery_time_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_recovery_time_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_recovery_time_optionContext)
}

func (s *Database_optionspecContext) Termination() ITerminationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITerminationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITerminationContext)
}

func (s *Database_optionspecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_optionspecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_optionspecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDatabase_optionspec(s)
	}
}

func (s *Database_optionspecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDatabase_optionspec(s)
	}
}

func (p *tsqlParser) Database_optionspec() (localctx IDatabase_optionspecContext) {
	localctx = NewDatabase_optionspecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, tsqlParserRULE_database_optionspec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1056)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1034)
			p.Auto_option()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1035)
			p.Change_tracking_option()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1036)
			p.Containment_option()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1037)
			p.Cursor_option()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1038)
			p.Date_correlation_optimization_option()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1039)
			p.Db_encryption_option()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1040)
			p.Db_state_option()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1041)
			p.Db_update_option()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1042)
			p.Db_user_access_option()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1043)
			p.Delayed_durability_option()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1044)
			p.External_access_option()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1045)
			p.Match(tsqlParserFILESTREAM)
		}
		{
			p.SetState(1046)
			p.Database_filestream_option()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1047)
			p.Match(tsqlParserHADR_options)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1048)
			p.Mixed_page_allocation_option()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1049)
			p.Parameterization_option()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1050)
			p.Recovery_option()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1051)
			p.Service_broker_option()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1052)
			p.Snapshot_option()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1053)
			p.Sql_option()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1054)
			p.Target_recovery_time_option()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1055)
			p.Termination()
		}

	}

	return localctx
}

// IAuto_optionContext is an interface to support dynamic dispatch.
type IAuto_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuto_optionContext differentiates from other interfaces.
	IsAuto_optionContext()
}

type Auto_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuto_optionContext() *Auto_optionContext {
	var p = new(Auto_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_auto_option
	return p
}

func (*Auto_optionContext) IsAuto_optionContext() {}

func NewAuto_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Auto_optionContext {
	var p = new(Auto_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_auto_option

	return p
}

func (s *Auto_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Auto_optionContext) AUTO_CLOSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_CLOSE, 0)
}

func (s *Auto_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Auto_optionContext) AUTO_CREATE_STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_CREATE_STATISTICS, 0)
}

func (s *Auto_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Auto_optionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserON)
}

func (s *Auto_optionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserON, i)
}

func (s *Auto_optionContext) INCREMENTAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserINCREMENTAL, 0)
}

func (s *Auto_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Auto_optionContext) AUTO_SHRINK() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_SHRINK, 0)
}

func (s *Auto_optionContext) AUTO_UPDATE_STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_UPDATE_STATISTICS, 0)
}

func (s *Auto_optionContext) AUTO_UPDATE_STATISTICS_ASYNC() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_UPDATE_STATISTICS_ASYNC, 0)
}

func (s *Auto_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Auto_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Auto_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAuto_option(s)
	}
}

func (s *Auto_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAuto_option(s)
	}
}

func (p *tsqlParser) Auto_option() (localctx IAuto_optionContext) {
	localctx = NewAuto_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, tsqlParserRULE_auto_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1075)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserAUTO_CLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1058)
			p.Match(tsqlParserAUTO_CLOSE)
		}
		{
			p.SetState(1059)
			p.On_off()
		}

	case tsqlParserAUTO_CREATE_STATISTICS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1060)
			p.Match(tsqlParserAUTO_CREATE_STATISTICS)
		}
		{
			p.SetState(1061)
			p.Match(tsqlParserOFF)
		}

	case tsqlParserON:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1062)
			p.Match(tsqlParserON)
		}
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserINCREMENTAL:
			{
				p.SetState(1063)
				p.Match(tsqlParserINCREMENTAL)
			}
			{
				p.SetState(1064)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(1065)
				p.Match(tsqlParserON)
			}

		case tsqlParserOFF:
			{
				p.SetState(1066)
				p.Match(tsqlParserOFF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserAUTO_SHRINK:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1069)
			p.Match(tsqlParserAUTO_SHRINK)
		}
		{
			p.SetState(1070)
			p.On_off()
		}

	case tsqlParserAUTO_UPDATE_STATISTICS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1071)
			p.Match(tsqlParserAUTO_UPDATE_STATISTICS)
		}
		{
			p.SetState(1072)
			p.On_off()
		}

	case tsqlParserAUTO_UPDATE_STATISTICS_ASYNC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1073)
			p.Match(tsqlParserAUTO_UPDATE_STATISTICS_ASYNC)
		}
		p.SetState(1074)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChange_tracking_optionContext is an interface to support dynamic dispatch.
type IChange_tracking_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tracking_optionContext differentiates from other interfaces.
	IsChange_tracking_optionContext()
}

type Change_tracking_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tracking_optionContext() *Change_tracking_optionContext {
	var p = new(Change_tracking_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_change_tracking_option
	return p
}

func (*Change_tracking_optionContext) IsChange_tracking_optionContext() {}

func NewChange_tracking_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tracking_optionContext {
	var p = new(Change_tracking_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_change_tracking_option

	return p
}

func (s *Change_tracking_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tracking_optionContext) CHANGE_TRACKING() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGE_TRACKING, 0)
}

func (s *Change_tracking_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Change_tracking_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Change_tracking_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Change_tracking_optionContext) AllChange_tracking_option_list() []IChange_tracking_option_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChange_tracking_option_listContext)(nil)).Elem())
	var tst = make([]IChange_tracking_option_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChange_tracking_option_listContext)
		}
	}

	return tst
}

func (s *Change_tracking_optionContext) Change_tracking_option_list(i int) IChange_tracking_option_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tracking_option_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChange_tracking_option_listContext)
}

func (s *Change_tracking_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tracking_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tracking_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterChange_tracking_option(s)
	}
}

func (s *Change_tracking_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitChange_tracking_option(s)
	}
}

func (p *tsqlParser) Change_tracking_option() (localctx IChange_tracking_optionContext) {
	localctx = NewChange_tracking_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, tsqlParserRULE_change_tracking_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1077)
		p.Match(tsqlParserCHANGE_TRACKING)
	}
	{
		p.SetState(1078)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(1094)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserOFF:
		{
			p.SetState(1079)
			p.Match(tsqlParserOFF)
		}

	case tsqlParserON:
		{
			p.SetState(1080)
			p.Match(tsqlParserON)
		}
		p.SetState(1091)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserAUTO_CLEANUP || _la == tsqlParserCHANGE_RETENTION {
			{
				p.SetState(1081)
				p.Change_tracking_option_list()
			}
			p.SetState(1086)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(1082)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(1083)
					p.Change_tracking_option_list()
				}

				p.SetState(1088)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

			p.SetState(1093)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChange_tracking_option_listContext is an interface to support dynamic dispatch.
type IChange_tracking_option_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tracking_option_listContext differentiates from other interfaces.
	IsChange_tracking_option_listContext()
}

type Change_tracking_option_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tracking_option_listContext() *Change_tracking_option_listContext {
	var p = new(Change_tracking_option_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_change_tracking_option_list
	return p
}

func (*Change_tracking_option_listContext) IsChange_tracking_option_listContext() {}

func NewChange_tracking_option_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tracking_option_listContext {
	var p = new(Change_tracking_option_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_change_tracking_option_list

	return p
}

func (s *Change_tracking_option_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tracking_option_listContext) AUTO_CLEANUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO_CLEANUP, 0)
}

func (s *Change_tracking_option_listContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Change_tracking_option_listContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Change_tracking_option_listContext) CHANGE_RETENTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGE_RETENTION, 0)
}

func (s *Change_tracking_option_listContext) DAYS() antlr.TerminalNode {
	return s.GetToken(tsqlParserDAYS, 0)
}

func (s *Change_tracking_option_listContext) HOURS() antlr.TerminalNode {
	return s.GetToken(tsqlParserHOURS, 0)
}

func (s *Change_tracking_option_listContext) MINUTES() antlr.TerminalNode {
	return s.GetToken(tsqlParserMINUTES, 0)
}

func (s *Change_tracking_option_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tracking_option_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tracking_option_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterChange_tracking_option_list(s)
	}
}

func (s *Change_tracking_option_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitChange_tracking_option_list(s)
	}
}

func (p *tsqlParser) Change_tracking_option_list() (localctx IChange_tracking_option_listContext) {
	localctx = NewChange_tracking_option_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, tsqlParserRULE_change_tracking_option_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1102)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserAUTO_CLEANUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1096)
			p.Match(tsqlParserAUTO_CLEANUP)
		}
		{
			p.SetState(1097)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1098)
			p.On_off()
		}

	case tsqlParserCHANGE_RETENTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1099)
			p.Match(tsqlParserCHANGE_RETENTION)
		}
		{
			p.SetState(1100)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1101)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserDAYS || _la == tsqlParserHOURS || _la == tsqlParserMINUTES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IContainment_optionContext is an interface to support dynamic dispatch.
type IContainment_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContainment_optionContext differentiates from other interfaces.
	IsContainment_optionContext()
}

type Containment_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContainment_optionContext() *Containment_optionContext {
	var p = new(Containment_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_containment_option
	return p
}

func (*Containment_optionContext) IsContainment_optionContext() {}

func NewContainment_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Containment_optionContext {
	var p = new(Containment_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_containment_option

	return p
}

func (s *Containment_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Containment_optionContext) CONTAINMENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTAINMENT, 0)
}

func (s *Containment_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Containment_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONE, 0)
}

func (s *Containment_optionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTIAL, 0)
}

func (s *Containment_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Containment_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Containment_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterContainment_option(s)
	}
}

func (s *Containment_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitContainment_option(s)
	}
}

func (p *tsqlParser) Containment_option() (localctx IContainment_optionContext) {
	localctx = NewContainment_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, tsqlParserRULE_containment_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		p.Match(tsqlParserCONTAINMENT)
	}
	{
		p.SetState(1105)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(1106)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserNONE || _la == tsqlParserPARTIAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICursor_optionContext is an interface to support dynamic dispatch.
type ICursor_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_optionContext differentiates from other interfaces.
	IsCursor_optionContext()
}

type Cursor_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_optionContext() *Cursor_optionContext {
	var p = new(Cursor_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cursor_option
	return p
}

func (*Cursor_optionContext) IsCursor_optionContext() {}

func NewCursor_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_optionContext {
	var p = new(Cursor_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cursor_option

	return p
}

func (s *Cursor_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_optionContext) CURSOR_CLOSE_ON_COMMIT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR_CLOSE_ON_COMMIT, 0)
}

func (s *Cursor_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Cursor_optionContext) CURSOR_DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR_DEFAULT, 0)
}

func (s *Cursor_optionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL, 0)
}

func (s *Cursor_optionContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Cursor_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCursor_option(s)
	}
}

func (s *Cursor_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCursor_option(s)
	}
}

func (p *tsqlParser) Cursor_option() (localctx ICursor_optionContext) {
	localctx = NewCursor_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, tsqlParserRULE_cursor_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1112)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCURSOR_CLOSE_ON_COMMIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1108)
			p.Match(tsqlParserCURSOR_CLOSE_ON_COMMIT)
		}
		{
			p.SetState(1109)
			p.On_off()
		}

	case tsqlParserCURSOR_DEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1110)
			p.Match(tsqlParserCURSOR_DEFAULT)
		}
		p.SetState(1111)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserGLOBAL || _la == tsqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDate_correlation_optimization_optionContext is an interface to support dynamic dispatch.
type IDate_correlation_optimization_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDate_correlation_optimization_optionContext differentiates from other interfaces.
	IsDate_correlation_optimization_optionContext()
}

type Date_correlation_optimization_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_correlation_optimization_optionContext() *Date_correlation_optimization_optionContext {
	var p = new(Date_correlation_optimization_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_date_correlation_optimization_option
	return p
}

func (*Date_correlation_optimization_optionContext) IsDate_correlation_optimization_optionContext() {}

func NewDate_correlation_optimization_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_correlation_optimization_optionContext {
	var p = new(Date_correlation_optimization_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_date_correlation_optimization_option

	return p
}

func (s *Date_correlation_optimization_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_correlation_optimization_optionContext) DATE_CORRELATION_OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATE_CORRELATION_OPTIMIZATION, 0)
}

func (s *Date_correlation_optimization_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Date_correlation_optimization_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_correlation_optimization_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_correlation_optimization_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDate_correlation_optimization_option(s)
	}
}

func (s *Date_correlation_optimization_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDate_correlation_optimization_option(s)
	}
}

func (p *tsqlParser) Date_correlation_optimization_option() (localctx IDate_correlation_optimization_optionContext) {
	localctx = NewDate_correlation_optimization_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, tsqlParserRULE_date_correlation_optimization_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1114)
		p.Match(tsqlParserDATE_CORRELATION_OPTIMIZATION)
	}
	{
		p.SetState(1115)
		p.On_off()
	}

	return localctx
}

// IDb_encryption_optionContext is an interface to support dynamic dispatch.
type IDb_encryption_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_encryption_optionContext differentiates from other interfaces.
	IsDb_encryption_optionContext()
}

type Db_encryption_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_encryption_optionContext() *Db_encryption_optionContext {
	var p = new(Db_encryption_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_encryption_option
	return p
}

func (*Db_encryption_optionContext) IsDb_encryption_optionContext() {}

func NewDb_encryption_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_encryption_optionContext {
	var p = new(Db_encryption_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_encryption_option

	return p
}

func (s *Db_encryption_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_encryption_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *Db_encryption_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Db_encryption_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_encryption_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_encryption_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_encryption_option(s)
	}
}

func (s *Db_encryption_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_encryption_option(s)
	}
}

func (p *tsqlParser) Db_encryption_option() (localctx IDb_encryption_optionContext) {
	localctx = NewDb_encryption_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, tsqlParserRULE_db_encryption_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1117)
		p.Match(tsqlParserENCRYPTION)
	}
	{
		p.SetState(1118)
		p.On_off()
	}

	return localctx
}

// IDb_state_optionContext is an interface to support dynamic dispatch.
type IDb_state_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_state_optionContext differentiates from other interfaces.
	IsDb_state_optionContext()
}

type Db_state_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_state_optionContext() *Db_state_optionContext {
	var p = new(Db_state_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_state_option
	return p
}

func (*Db_state_optionContext) IsDb_state_optionContext() {}

func NewDb_state_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_state_optionContext {
	var p = new(Db_state_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_state_option

	return p
}

func (s *Db_state_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_state_optionContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLINE, 0)
}

func (s *Db_state_optionContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFFLINE, 0)
}

func (s *Db_state_optionContext) EMERGENCY() antlr.TerminalNode {
	return s.GetToken(tsqlParserEMERGENCY, 0)
}

func (s *Db_state_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_state_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_state_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_state_option(s)
	}
}

func (s *Db_state_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_state_option(s)
	}
}

func (p *tsqlParser) Db_state_option() (localctx IDb_state_optionContext) {
	localctx = NewDb_state_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, tsqlParserRULE_db_state_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1120)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserEMERGENCY || _la == tsqlParserOFFLINE || _la == tsqlParserONLINE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDb_update_optionContext is an interface to support dynamic dispatch.
type IDb_update_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_update_optionContext differentiates from other interfaces.
	IsDb_update_optionContext()
}

type Db_update_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_update_optionContext() *Db_update_optionContext {
	var p = new(Db_update_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_update_option
	return p
}

func (*Db_update_optionContext) IsDb_update_optionContext() {}

func NewDb_update_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_update_optionContext {
	var p = new(Db_update_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_update_option

	return p
}

func (s *Db_update_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_update_optionContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Db_update_optionContext) READ_WRITE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_WRITE, 0)
}

func (s *Db_update_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_update_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_update_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_update_option(s)
	}
}

func (s *Db_update_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_update_option(s)
	}
}

func (p *tsqlParser) Db_update_option() (localctx IDb_update_optionContext) {
	localctx = NewDb_update_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, tsqlParserRULE_db_update_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1122)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserREAD_ONLY || _la == tsqlParserREAD_WRITE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDb_user_access_optionContext is an interface to support dynamic dispatch.
type IDb_user_access_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_user_access_optionContext differentiates from other interfaces.
	IsDb_user_access_optionContext()
}

type Db_user_access_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_user_access_optionContext() *Db_user_access_optionContext {
	var p = new(Db_user_access_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_db_user_access_option
	return p
}

func (*Db_user_access_optionContext) IsDb_user_access_optionContext() {}

func NewDb_user_access_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_user_access_optionContext {
	var p = new(Db_user_access_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_db_user_access_option

	return p
}

func (s *Db_user_access_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_user_access_optionContext) SINGLE_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserSINGLE_USER, 0)
}

func (s *Db_user_access_optionContext) RESTRICTED_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserRESTRICTED_USER, 0)
}

func (s *Db_user_access_optionContext) MULTI_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserMULTI_USER, 0)
}

func (s *Db_user_access_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_user_access_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_user_access_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDb_user_access_option(s)
	}
}

func (s *Db_user_access_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDb_user_access_option(s)
	}
}

func (p *tsqlParser) Db_user_access_option() (localctx IDb_user_access_optionContext) {
	localctx = NewDb_user_access_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, tsqlParserRULE_db_user_access_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1124)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserMULTI_USER || _la == tsqlParserRESTRICTED_USER || _la == tsqlParserSINGLE_USER) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDelayed_durability_optionContext is an interface to support dynamic dispatch.
type IDelayed_durability_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelayed_durability_optionContext differentiates from other interfaces.
	IsDelayed_durability_optionContext()
}

type Delayed_durability_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelayed_durability_optionContext() *Delayed_durability_optionContext {
	var p = new(Delayed_durability_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_delayed_durability_option
	return p
}

func (*Delayed_durability_optionContext) IsDelayed_durability_optionContext() {}

func NewDelayed_durability_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delayed_durability_optionContext {
	var p = new(Delayed_durability_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_delayed_durability_option

	return p
}

func (s *Delayed_durability_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Delayed_durability_optionContext) DELAYED_DURABILITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAYED_DURABILITY, 0)
}

func (s *Delayed_durability_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Delayed_durability_optionContext) DISABLED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLED, 0)
}

func (s *Delayed_durability_optionContext) ALLOWED() antlr.TerminalNode {
	return s.GetToken(tsqlParserALLOWED, 0)
}

func (s *Delayed_durability_optionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *Delayed_durability_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delayed_durability_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delayed_durability_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDelayed_durability_option(s)
	}
}

func (s *Delayed_durability_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDelayed_durability_option(s)
	}
}

func (p *tsqlParser) Delayed_durability_option() (localctx IDelayed_durability_optionContext) {
	localctx = NewDelayed_durability_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, tsqlParserRULE_delayed_durability_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1126)
		p.Match(tsqlParserDELAYED_DURABILITY)
	}
	{
		p.SetState(1127)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(1128)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserALLOWED || _la == tsqlParserDISABLED || _la == tsqlParserFORCED) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IExternal_access_optionContext is an interface to support dynamic dispatch.
type IExternal_access_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_access_optionContext differentiates from other interfaces.
	IsExternal_access_optionContext()
}

type External_access_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_access_optionContext() *External_access_optionContext {
	var p = new(External_access_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_external_access_option
	return p
}

func (*External_access_optionContext) IsExternal_access_optionContext() {}

func NewExternal_access_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_access_optionContext {
	var p = new(External_access_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_external_access_option

	return p
}

func (s *External_access_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *External_access_optionContext) DB_CHAINING() antlr.TerminalNode {
	return s.GetToken(tsqlParserDB_CHAINING, 0)
}

func (s *External_access_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *External_access_optionContext) TRUSTWORTHY() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRUSTWORTHY, 0)
}

func (s *External_access_optionContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_LANGUAGE, 0)
}

func (s *External_access_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *External_access_optionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *External_access_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *External_access_optionContext) DEFAULT_FULLTEXT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_FULLTEXT_LANGUAGE, 0)
}

func (s *External_access_optionContext) NESTED_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(tsqlParserNESTED_TRIGGERS, 0)
}

func (s *External_access_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *External_access_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *External_access_optionContext) TRANSFORM_NOISE_WORDS() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSFORM_NOISE_WORDS, 0)
}

func (s *External_access_optionContext) TWO_DIGIT_YEAR_CUTOFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserTWO_DIGIT_YEAR_CUTOFF, 0)
}

func (s *External_access_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *External_access_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_access_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *External_access_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExternal_access_option(s)
	}
}

func (s *External_access_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExternal_access_option(s)
	}
}

func (p *tsqlParser) External_access_option() (localctx IExternal_access_optionContext) {
	localctx = NewExternal_access_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, tsqlParserRULE_external_access_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1155)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserDB_CHAINING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1130)
			p.Match(tsqlParserDB_CHAINING)
		}
		{
			p.SetState(1131)
			p.On_off()
		}

	case tsqlParserTRUSTWORTHY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1132)
			p.Match(tsqlParserTRUSTWORTHY)
		}
		{
			p.SetState(1133)
			p.On_off()
		}

	case tsqlParserDEFAULT_LANGUAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1134)
			p.Match(tsqlParserDEFAULT_LANGUAGE)
		}
		{
			p.SetState(1135)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1138)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1136)
				p.Id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(1137)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserDEFAULT_FULLTEXT_LANGUAGE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1140)
			p.Match(tsqlParserDEFAULT_FULLTEXT_LANGUAGE)
		}
		{
			p.SetState(1141)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1144)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1142)
				p.Id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(1143)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserNESTED_TRIGGERS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1146)
			p.Match(tsqlParserNESTED_TRIGGERS)
		}
		{
			p.SetState(1147)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1148)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserTRANSFORM_NOISE_WORDS:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1149)
			p.Match(tsqlParserTRANSFORM_NOISE_WORDS)
		}
		{
			p.SetState(1150)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(1151)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserTWO_DIGIT_YEAR_CUTOFF:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1152)
			p.Match(tsqlParserTWO_DIGIT_YEAR_CUTOFF)
		}
		{
			p.SetState(1153)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1154)
			p.Match(tsqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMixed_page_allocation_optionContext is an interface to support dynamic dispatch.
type IMixed_page_allocation_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMixed_page_allocation_optionContext differentiates from other interfaces.
	IsMixed_page_allocation_optionContext()
}

type Mixed_page_allocation_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMixed_page_allocation_optionContext() *Mixed_page_allocation_optionContext {
	var p = new(Mixed_page_allocation_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_mixed_page_allocation_option
	return p
}

func (*Mixed_page_allocation_optionContext) IsMixed_page_allocation_optionContext() {}

func NewMixed_page_allocation_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mixed_page_allocation_optionContext {
	var p = new(Mixed_page_allocation_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_mixed_page_allocation_option

	return p
}

func (s *Mixed_page_allocation_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Mixed_page_allocation_optionContext) MIXED_PAGE_ALLOCATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIXED_PAGE_ALLOCATION, 0)
}

func (s *Mixed_page_allocation_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Mixed_page_allocation_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Mixed_page_allocation_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mixed_page_allocation_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mixed_page_allocation_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterMixed_page_allocation_option(s)
	}
}

func (s *Mixed_page_allocation_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitMixed_page_allocation_option(s)
	}
}

func (p *tsqlParser) Mixed_page_allocation_option() (localctx IMixed_page_allocation_optionContext) {
	localctx = NewMixed_page_allocation_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, tsqlParserRULE_mixed_page_allocation_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1157)
		p.Match(tsqlParserMIXED_PAGE_ALLOCATION)
	}
	p.SetState(1158)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserOFF || _la == tsqlParserON) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IParameterization_optionContext is an interface to support dynamic dispatch.
type IParameterization_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterization_optionContext differentiates from other interfaces.
	IsParameterization_optionContext()
}

type Parameterization_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterization_optionContext() *Parameterization_optionContext {
	var p = new(Parameterization_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_parameterization_option
	return p
}

func (*Parameterization_optionContext) IsParameterization_optionContext() {}

func NewParameterization_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameterization_optionContext {
	var p = new(Parameterization_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_parameterization_option

	return p
}

func (s *Parameterization_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameterization_optionContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARAMETERIZATION, 0)
}

func (s *Parameterization_optionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *Parameterization_optionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *Parameterization_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameterization_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameterization_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterParameterization_option(s)
	}
}

func (s *Parameterization_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitParameterization_option(s)
	}
}

func (p *tsqlParser) Parameterization_option() (localctx IParameterization_optionContext) {
	localctx = NewParameterization_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, tsqlParserRULE_parameterization_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1160)
		p.Match(tsqlParserPARAMETERIZATION)
	}
	p.SetState(1161)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserFORCED || _la == tsqlParserSIMPLE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IRecovery_optionContext is an interface to support dynamic dispatch.
type IRecovery_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecovery_optionContext differentiates from other interfaces.
	IsRecovery_optionContext()
}

type Recovery_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecovery_optionContext() *Recovery_optionContext {
	var p = new(Recovery_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_recovery_option
	return p
}

func (*Recovery_optionContext) IsRecovery_optionContext() {}

func NewRecovery_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recovery_optionContext {
	var p = new(Recovery_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_recovery_option

	return p
}

func (s *Recovery_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Recovery_optionContext) RECOVERY() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOVERY, 0)
}

func (s *Recovery_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULL, 0)
}

func (s *Recovery_optionContext) BULK_LOGGED() antlr.TerminalNode {
	return s.GetToken(tsqlParserBULK_LOGGED, 0)
}

func (s *Recovery_optionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *Recovery_optionContext) TORN_PAGE_DETECTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserTORN_PAGE_DETECTION, 0)
}

func (s *Recovery_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Recovery_optionContext) PAGE_VERIFY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPAGE_VERIFY, 0)
}

func (s *Recovery_optionContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM, 0)
}

func (s *Recovery_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONE, 0)
}

func (s *Recovery_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recovery_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recovery_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRecovery_option(s)
	}
}

func (s *Recovery_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRecovery_option(s)
	}
}

func (p *tsqlParser) Recovery_option() (localctx IRecovery_optionContext) {
	localctx = NewRecovery_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, tsqlParserRULE_recovery_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1169)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserRECOVERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1163)
			p.Match(tsqlParserRECOVERY)
		}
		p.SetState(1164)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFULL || _la == tsqlParserBULK_LOGGED || _la == tsqlParserSIMPLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserTORN_PAGE_DETECTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1165)
			p.Match(tsqlParserTORN_PAGE_DETECTION)
		}
		{
			p.SetState(1166)
			p.On_off()
		}

	case tsqlParserPAGE_VERIFY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1167)
			p.Match(tsqlParserPAGE_VERIFY)
		}
		p.SetState(1168)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserNONE || _la == tsqlParserCHECKSUM || _la == tsqlParserTORN_PAGE_DETECTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IService_broker_optionContext is an interface to support dynamic dispatch.
type IService_broker_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsService_broker_optionContext differentiates from other interfaces.
	IsService_broker_optionContext()
}

type Service_broker_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyService_broker_optionContext() *Service_broker_optionContext {
	var p = new(Service_broker_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_service_broker_option
	return p
}

func (*Service_broker_optionContext) IsService_broker_optionContext() {}

func NewService_broker_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Service_broker_optionContext {
	var p = new(Service_broker_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_service_broker_option

	return p
}

func (s *Service_broker_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Service_broker_optionContext) ENABLE_BROKER() antlr.TerminalNode {
	return s.GetToken(tsqlParserENABLE_BROKER, 0)
}

func (s *Service_broker_optionContext) DISABLE_BROKER() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLE_BROKER, 0)
}

func (s *Service_broker_optionContext) NEW_BROKER() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEW_BROKER, 0)
}

func (s *Service_broker_optionContext) ERROR_BROKER_CONVERSATIONS() antlr.TerminalNode {
	return s.GetToken(tsqlParserERROR_BROKER_CONVERSATIONS, 0)
}

func (s *Service_broker_optionContext) HONOR_BROKER_PRIORITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserHONOR_BROKER_PRIORITY, 0)
}

func (s *Service_broker_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Service_broker_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Service_broker_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Service_broker_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterService_broker_option(s)
	}
}

func (s *Service_broker_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitService_broker_option(s)
	}
}

func (p *tsqlParser) Service_broker_option() (localctx IService_broker_optionContext) {
	localctx = NewService_broker_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, tsqlParserRULE_service_broker_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1177)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserENABLE_BROKER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1171)
			p.Match(tsqlParserENABLE_BROKER)
		}

	case tsqlParserDISABLE_BROKER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1172)
			p.Match(tsqlParserDISABLE_BROKER)
		}

	case tsqlParserNEW_BROKER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1173)
			p.Match(tsqlParserNEW_BROKER)
		}

	case tsqlParserERROR_BROKER_CONVERSATIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1174)
			p.Match(tsqlParserERROR_BROKER_CONVERSATIONS)
		}

	case tsqlParserHONOR_BROKER_PRIORITY:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1175)
			p.Match(tsqlParserHONOR_BROKER_PRIORITY)
		}
		{
			p.SetState(1176)
			p.On_off()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISnapshot_optionContext is an interface to support dynamic dispatch.
type ISnapshot_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT returns the MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT token.
	GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() antlr.Token

	// SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT sets the MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT token.
	SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT(antlr.Token)

	// IsSnapshot_optionContext differentiates from other interfaces.
	IsSnapshot_optionContext()
}

type Snapshot_optionContext struct {
	*antlr.BaseParserRuleContext
	parser                               antlr.Parser
	MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT antlr.Token
}

func NewEmptySnapshot_optionContext() *Snapshot_optionContext {
	var p = new(Snapshot_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_snapshot_option
	return p
}

func (*Snapshot_optionContext) IsSnapshot_optionContext() {}

func NewSnapshot_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Snapshot_optionContext {
	var p = new(Snapshot_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_snapshot_option

	return p
}

func (s *Snapshot_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Snapshot_optionContext) GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() antlr.Token {
	return s.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT
}

func (s *Snapshot_optionContext) SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT(v antlr.Token) {
	s.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = v
}

func (s *Snapshot_optionContext) ALLOW_SNAPSHOT_ISOLATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserALLOW_SNAPSHOT_ISOLATION, 0)
}

func (s *Snapshot_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Snapshot_optionContext) READ_COMMITTED_SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_COMMITTED_SNAPSHOT, 0)
}

func (s *Snapshot_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Snapshot_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Snapshot_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Snapshot_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Snapshot_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSnapshot_option(s)
	}
}

func (s *Snapshot_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSnapshot_option(s)
	}
}

func (p *tsqlParser) Snapshot_option() (localctx ISnapshot_optionContext) {
	localctx = NewSnapshot_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, tsqlParserRULE_snapshot_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1184)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserALLOW_SNAPSHOT_ISOLATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1179)
			p.Match(tsqlParserALLOW_SNAPSHOT_ISOLATION)
		}
		{
			p.SetState(1180)
			p.On_off()
		}

	case tsqlParserREAD_COMMITTED_SNAPSHOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1181)
			p.Match(tsqlParserREAD_COMMITTED_SNAPSHOT)
		}
		p.SetState(1182)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserOFF, tsqlParserON:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1183)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Snapshot_optionContext).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Snapshot_optionContext).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISql_optionContext is an interface to support dynamic dispatch.
type ISql_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_optionContext differentiates from other interfaces.
	IsSql_optionContext()
}

type Sql_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_optionContext() *Sql_optionContext {
	var p = new(Sql_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sql_option
	return p
}

func (*Sql_optionContext) IsSql_optionContext() {}

func NewSql_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_optionContext {
	var p = new(Sql_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sql_option

	return p
}

func (s *Sql_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_optionContext) ANSI_NULL_DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_NULL_DEFAULT, 0)
}

func (s *Sql_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Sql_optionContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_NULLS, 0)
}

func (s *Sql_optionContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_PADDING, 0)
}

func (s *Sql_optionContext) ANSI_WARNINGS() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_WARNINGS, 0)
}

func (s *Sql_optionContext) ARITHABORT() antlr.TerminalNode {
	return s.GetToken(tsqlParserARITHABORT, 0)
}

func (s *Sql_optionContext) COMPATIBILITY_LEVEL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMPATIBILITY_LEVEL, 0)
}

func (s *Sql_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Sql_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Sql_optionContext) CONCAT_NULL_YIELDS_NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONCAT_NULL_YIELDS_NULL, 0)
}

func (s *Sql_optionContext) NUMERIC_ROUNDABORT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNUMERIC_ROUNDABORT, 0)
}

func (s *Sql_optionContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(tsqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Sql_optionContext) RECURSIVE_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECURSIVE_TRIGGERS, 0)
}

func (s *Sql_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSql_option(s)
	}
}

func (s *Sql_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSql_option(s)
	}
}

func (p *tsqlParser) Sql_option() (localctx ISql_optionContext) {
	localctx = NewSql_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, tsqlParserRULE_sql_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1207)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserANSI_NULL_DEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1186)
			p.Match(tsqlParserANSI_NULL_DEFAULT)
		}
		{
			p.SetState(1187)
			p.On_off()
		}

	case tsqlParserANSI_NULLS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1188)
			p.Match(tsqlParserANSI_NULLS)
		}
		{
			p.SetState(1189)
			p.On_off()
		}

	case tsqlParserANSI_PADDING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1190)
			p.Match(tsqlParserANSI_PADDING)
		}
		{
			p.SetState(1191)
			p.On_off()
		}

	case tsqlParserANSI_WARNINGS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1192)
			p.Match(tsqlParserANSI_WARNINGS)
		}
		{
			p.SetState(1193)
			p.On_off()
		}

	case tsqlParserARITHABORT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1194)
			p.Match(tsqlParserARITHABORT)
		}
		{
			p.SetState(1195)
			p.On_off()
		}

	case tsqlParserCOMPATIBILITY_LEVEL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1196)
			p.Match(tsqlParserCOMPATIBILITY_LEVEL)
		}
		{
			p.SetState(1197)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1198)
			p.Match(tsqlParserDECIMAL)
		}

	case tsqlParserCONCAT_NULL_YIELDS_NULL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1199)
			p.Match(tsqlParserCONCAT_NULL_YIELDS_NULL)
		}
		{
			p.SetState(1200)
			p.On_off()
		}

	case tsqlParserNUMERIC_ROUNDABORT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1201)
			p.Match(tsqlParserNUMERIC_ROUNDABORT)
		}
		{
			p.SetState(1202)
			p.On_off()
		}

	case tsqlParserQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1203)
			p.Match(tsqlParserQUOTED_IDENTIFIER)
		}
		{
			p.SetState(1204)
			p.On_off()
		}

	case tsqlParserRECURSIVE_TRIGGERS:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1205)
			p.Match(tsqlParserRECURSIVE_TRIGGERS)
		}
		{
			p.SetState(1206)
			p.On_off()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITarget_recovery_time_optionContext is an interface to support dynamic dispatch.
type ITarget_recovery_time_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTarget_recovery_time_optionContext differentiates from other interfaces.
	IsTarget_recovery_time_optionContext()
}

type Target_recovery_time_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTarget_recovery_time_optionContext() *Target_recovery_time_optionContext {
	var p = new(Target_recovery_time_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_target_recovery_time_option
	return p
}

func (*Target_recovery_time_optionContext) IsTarget_recovery_time_optionContext() {}

func NewTarget_recovery_time_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Target_recovery_time_optionContext {
	var p = new(Target_recovery_time_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_target_recovery_time_option

	return p
}

func (s *Target_recovery_time_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Target_recovery_time_optionContext) TARGET_RECOVERY_TIME() antlr.TerminalNode {
	return s.GetToken(tsqlParserTARGET_RECOVERY_TIME, 0)
}

func (s *Target_recovery_time_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Target_recovery_time_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Target_recovery_time_optionContext) SECONDS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSECONDS, 0)
}

func (s *Target_recovery_time_optionContext) MINUTES() antlr.TerminalNode {
	return s.GetToken(tsqlParserMINUTES, 0)
}

func (s *Target_recovery_time_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Target_recovery_time_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Target_recovery_time_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTarget_recovery_time_option(s)
	}
}

func (s *Target_recovery_time_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTarget_recovery_time_option(s)
	}
}

func (p *tsqlParser) Target_recovery_time_option() (localctx ITarget_recovery_time_optionContext) {
	localctx = NewTarget_recovery_time_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, tsqlParserRULE_target_recovery_time_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1209)
		p.Match(tsqlParserTARGET_RECOVERY_TIME)
	}
	{
		p.SetState(1210)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(1211)
		p.Match(tsqlParserDECIMAL)
	}
	p.SetState(1212)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserMINUTES || _la == tsqlParserSECONDS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ITerminationContext is an interface to support dynamic dispatch.
type ITerminationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeconds returns the seconds token.
	GetSeconds() antlr.Token

	// SetSeconds sets the seconds token.
	SetSeconds(antlr.Token)

	// IsTerminationContext differentiates from other interfaces.
	IsTerminationContext()
}

type TerminationContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	seconds antlr.Token
}

func NewEmptyTerminationContext() *TerminationContext {
	var p = new(TerminationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_termination
	return p
}

func (*TerminationContext) IsTerminationContext() {}

func NewTerminationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TerminationContext {
	var p = new(TerminationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_termination

	return p
}

func (s *TerminationContext) GetParser() antlr.Parser { return s.parser }

func (s *TerminationContext) GetSeconds() antlr.Token { return s.seconds }

func (s *TerminationContext) SetSeconds(v antlr.Token) { s.seconds = v }

func (s *TerminationContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(tsqlParserROLLBACK, 0)
}

func (s *TerminationContext) AFTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserAFTER, 0)
}

func (s *TerminationContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *TerminationContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserIMMEDIATE, 0)
}

func (s *TerminationContext) NO_WAIT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNO_WAIT, 0)
}

func (s *TerminationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TerminationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TerminationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTermination(s)
	}
}

func (s *TerminationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTermination(s)
	}
}

func (p *tsqlParser) Termination() (localctx ITerminationContext) {
	localctx = NewTerminationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, tsqlParserRULE_termination)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1220)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1214)
			p.Match(tsqlParserROLLBACK)
		}
		{
			p.SetState(1215)
			p.Match(tsqlParserAFTER)
		}
		{
			p.SetState(1216)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*TerminationContext).seconds = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1217)
			p.Match(tsqlParserROLLBACK)
		}
		{
			p.SetState(1218)
			p.Match(tsqlParserIMMEDIATE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1219)
			p.Match(tsqlParserNO_WAIT)
		}

	}

	return localctx
}

// IDrop_indexContext is an interface to support dynamic dispatch.
type IDrop_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsDrop_indexContext differentiates from other interfaces.
	IsDrop_indexContext()
}

type Drop_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdContext
}

func NewEmptyDrop_indexContext() *Drop_indexContext {
	var p = new(Drop_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_index
	return p
}

func (*Drop_indexContext) IsDrop_indexContext() {}

func NewDrop_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_indexContext {
	var p = new(Drop_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_index

	return p
}

func (s *Drop_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_indexContext) GetName() IIdContext { return s.name }

func (s *Drop_indexContext) SetName(v IIdContext) { s.name = v }

func (s *Drop_indexContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserINDEX, 0)
}

func (s *Drop_indexContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_indexContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_indexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_indexContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Drop_indexContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_index(s)
	}
}

func (s *Drop_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_index(s)
	}
}

func (p *tsqlParser) Drop_index() (localctx IDrop_indexContext) {
	localctx = NewDrop_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, tsqlParserRULE_drop_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1222)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1223)
		p.Match(tsqlParserINDEX)
	}
	p.SetState(1226)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1224)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1225)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1228)

		var _x = p.Id()

		localctx.(*Drop_indexContext).name = _x
	}
	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserON {
		{
			p.SetState(1229)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(1230)
			p.Table_name()
		}

	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1233)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_procedureContext is an interface to support dynamic dispatch.
type IDrop_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_procedureContext differentiates from other interfaces.
	IsDrop_procedureContext()
}

type Drop_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_procedureContext() *Drop_procedureContext {
	var p = new(Drop_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_procedure
	return p
}

func (*Drop_procedureContext) IsDrop_procedureContext() {}

func NewDrop_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_procedureContext {
	var p = new(Drop_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_procedure

	return p
}

func (s *Drop_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_procedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(tsqlParserPROCEDURE, 0)
}

func (s *Drop_procedureContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Drop_procedureContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_procedureContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_procedure(s)
	}
}

func (p *tsqlParser) Drop_procedure() (localctx IDrop_procedureContext) {
	localctx = NewDrop_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, tsqlParserRULE_drop_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1236)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1237)
		p.Match(tsqlParserPROCEDURE)
	}
	p.SetState(1240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1238)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1239)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1242)
		p.Func_proc_name()
	}
	p.SetState(1244)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1243)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_statisticsContext is an interface to support dynamic dispatch.
type IDrop_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsDrop_statisticsContext differentiates from other interfaces.
	IsDrop_statisticsContext()
}

type Drop_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdContext
}

func NewEmptyDrop_statisticsContext() *Drop_statisticsContext {
	var p = new(Drop_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_statistics
	return p
}

func (*Drop_statisticsContext) IsDrop_statisticsContext() {}

func NewDrop_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_statisticsContext {
	var p = new(Drop_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_statistics

	return p
}

func (s *Drop_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_statisticsContext) GetName() IIdContext { return s.name }

func (s *Drop_statisticsContext) SetName(v IIdContext) { s.name = v }

func (s *Drop_statisticsContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATISTICS, 0)
}

func (s *Drop_statisticsContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_statisticsContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_statistics(s)
	}
}

func (s *Drop_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_statistics(s)
	}
}

func (p *tsqlParser) Drop_statistics() (localctx IDrop_statisticsContext) {
	localctx = NewDrop_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, tsqlParserRULE_drop_statistics)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1246)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1247)
		p.Match(tsqlParserSTATISTICS)
	}
	p.SetState(1251)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1248)
			p.Table_name()
		}
		{
			p.SetState(1249)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(1253)

		var _x = p.Id()

		localctx.(*Drop_statisticsContext).name = _x
	}
	{
		p.SetState(1254)
		p.Match(tsqlParserSEMI)
	}

	return localctx
}

// IDrop_tableContext is an interface to support dynamic dispatch.
type IDrop_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tableContext differentiates from other interfaces.
	IsDrop_tableContext()
}

type Drop_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tableContext() *Drop_tableContext {
	var p = new(Drop_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_table
	return p
}

func (*Drop_tableContext) IsDrop_tableContext() {}

func NewDrop_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tableContext {
	var p = new(Drop_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_table

	return p
}

func (s *Drop_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Drop_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_tableContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_tableContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_table(s)
	}
}

func (s *Drop_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_table(s)
	}
}

func (p *tsqlParser) Drop_table() (localctx IDrop_tableContext) {
	localctx = NewDrop_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, tsqlParserRULE_drop_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1256)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1257)
		p.Match(tsqlParserTABLE)
	}
	p.SetState(1260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1258)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1259)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1262)
		p.Table_name()
	}
	p.SetState(1264)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1263)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_viewContext is an interface to support dynamic dispatch.
type IDrop_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_viewContext differentiates from other interfaces.
	IsDrop_viewContext()
}

type Drop_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_viewContext() *Drop_viewContext {
	var p = new(Drop_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_view
	return p
}

func (*Drop_viewContext) IsDrop_viewContext() {}

func NewDrop_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_viewContext {
	var p = new(Drop_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_view

	return p
}

func (s *Drop_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW, 0)
}

func (s *Drop_viewContext) AllSimple_name() []ISimple_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem())
	var tst = make([]ISimple_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_nameContext)
		}
	}

	return tst
}

func (s *Drop_viewContext) Simple_name(i int) ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_viewContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_viewContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_view(s)
	}
}

func (s *Drop_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_view(s)
	}
}

func (p *tsqlParser) Drop_view() (localctx IDrop_viewContext) {
	localctx = NewDrop_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, tsqlParserRULE_drop_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1266)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1267)
		p.Match(tsqlParserVIEW)
	}
	p.SetState(1270)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1268)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1269)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1272)
		p.Simple_name()
	}
	p.SetState(1277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(1273)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(1274)
			p.Simple_name()
		}

		p.SetState(1279)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1280)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_typeContext is an interface to support dynamic dispatch.
type ICreate_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_nameContext

	// SetName sets the name rule contexts.
	SetName(ISimple_nameContext)

	// IsCreate_typeContext differentiates from other interfaces.
	IsCreate_typeContext()
}

type Create_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ISimple_nameContext
}

func NewEmptyCreate_typeContext() *Create_typeContext {
	var p = new(Create_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_type
	return p
}

func (*Create_typeContext) IsCreate_typeContext() {}

func NewCreate_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_typeContext {
	var p = new(Create_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_type

	return p
}

func (s *Create_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_typeContext) GetName() ISimple_nameContext { return s.name }

func (s *Create_typeContext) SetName(v ISimple_nameContext) { s.name = v }

func (s *Create_typeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Create_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Create_typeContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Create_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_typeContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Create_typeContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_type(s)
	}
}

func (s *Create_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_type(s)
	}
}

func (p *tsqlParser) Create_type() (localctx ICreate_typeContext) {
	localctx = NewCreate_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, tsqlParserRULE_create_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1283)
		p.Match(tsqlParserCREATE)
	}
	{
		p.SetState(1284)
		p.Match(tsqlParserTYPE)
	}
	{
		p.SetState(1285)

		var _x = p.Simple_name()

		localctx.(*Create_typeContext).name = _x
	}
	{
		p.SetState(1286)
		p.Match(tsqlParserFROM)
	}
	{
		p.SetState(1287)
		p.Data_type()
	}
	{
		p.SetState(1288)
		p.Default_value()
	}

	return localctx
}

// IDrop_typeContext is an interface to support dynamic dispatch.
type IDrop_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_nameContext

	// SetName sets the name rule contexts.
	SetName(ISimple_nameContext)

	// IsDrop_typeContext differentiates from other interfaces.
	IsDrop_typeContext()
}

type Drop_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ISimple_nameContext
}

func NewEmptyDrop_typeContext() *Drop_typeContext {
	var p = new(Drop_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_drop_type
	return p
}

func (*Drop_typeContext) IsDrop_typeContext() {}

func NewDrop_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_typeContext {
	var p = new(Drop_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_drop_type

	return p
}

func (s *Drop_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_typeContext) GetName() ISimple_nameContext { return s.name }

func (s *Drop_typeContext) SetName(v ISimple_nameContext) { s.name = v }

func (s *Drop_typeContext) DROP() antlr.TerminalNode {
	return s.GetToken(tsqlParserDROP, 0)
}

func (s *Drop_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Drop_typeContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_typeContext) IF() antlr.TerminalNode {
	return s.GetToken(tsqlParserIF, 0)
}

func (s *Drop_typeContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *Drop_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDrop_type(s)
	}
}

func (s *Drop_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDrop_type(s)
	}
}

func (p *tsqlParser) Drop_type() (localctx IDrop_typeContext) {
	localctx = NewDrop_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, tsqlParserRULE_drop_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1290)
		p.Match(tsqlParserDROP)
	}
	{
		p.SetState(1291)
		p.Match(tsqlParserTYPE)
	}
	p.SetState(1294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserIF {
		{
			p.SetState(1292)
			p.Match(tsqlParserIF)
		}
		{
			p.SetState(1293)
			p.Match(tsqlParserEXISTS)
		}

	}
	{
		p.SetState(1296)

		var _x = p.Simple_name()

		localctx.(*Drop_typeContext).name = _x
	}

	return localctx
}

// IRowset_function_limitedContext is an interface to support dynamic dispatch.
type IRowset_function_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowset_function_limitedContext differentiates from other interfaces.
	IsRowset_function_limitedContext()
}

type Rowset_function_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowset_function_limitedContext() *Rowset_function_limitedContext {
	var p = new(Rowset_function_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_rowset_function_limited
	return p
}

func (*Rowset_function_limitedContext) IsRowset_function_limitedContext() {}

func NewRowset_function_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rowset_function_limitedContext {
	var p = new(Rowset_function_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_rowset_function_limited

	return p
}

func (s *Rowset_function_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Rowset_function_limitedContext) Openquery() IOpenqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpenqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpenqueryContext)
}

func (s *Rowset_function_limitedContext) Opendatasource() IOpendatasourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpendatasourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpendatasourceContext)
}

func (s *Rowset_function_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rowset_function_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rowset_function_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRowset_function_limited(s)
	}
}

func (s *Rowset_function_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRowset_function_limited(s)
	}
}

func (p *tsqlParser) Rowset_function_limited() (localctx IRowset_function_limitedContext) {
	localctx = NewRowset_function_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, tsqlParserRULE_rowset_function_limited)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1300)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserOPENQUERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1298)
			p.Openquery()
		}

	case tsqlParserOPENDATASOURCE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1299)
			p.Opendatasource()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOpenqueryContext is an interface to support dynamic dispatch.
type IOpenqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuery returns the query token.
	GetQuery() antlr.Token

	// SetQuery sets the query token.
	SetQuery(antlr.Token)

	// GetLinked_server returns the linked_server rule contexts.
	GetLinked_server() IIdContext

	// SetLinked_server sets the linked_server rule contexts.
	SetLinked_server(IIdContext)

	// IsOpenqueryContext differentiates from other interfaces.
	IsOpenqueryContext()
}

type OpenqueryContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	linked_server IIdContext
	query         antlr.Token
}

func NewEmptyOpenqueryContext() *OpenqueryContext {
	var p = new(OpenqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_openquery
	return p
}

func (*OpenqueryContext) IsOpenqueryContext() {}

func NewOpenqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpenqueryContext {
	var p = new(OpenqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_openquery

	return p
}

func (s *OpenqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OpenqueryContext) GetQuery() antlr.Token { return s.query }

func (s *OpenqueryContext) SetQuery(v antlr.Token) { s.query = v }

func (s *OpenqueryContext) GetLinked_server() IIdContext { return s.linked_server }

func (s *OpenqueryContext) SetLinked_server(v IIdContext) { s.linked_server = v }

func (s *OpenqueryContext) OPENQUERY() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPENQUERY, 0)
}

func (s *OpenqueryContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OpenqueryContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *OpenqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpenqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOpenquery(s)
	}
}

func (s *OpenqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOpenquery(s)
	}
}

func (p *tsqlParser) Openquery() (localctx IOpenqueryContext) {
	localctx = NewOpenqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, tsqlParserRULE_openquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1302)
		p.Match(tsqlParserOPENQUERY)
	}
	{
		p.SetState(1303)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1304)

		var _x = p.Id()

		localctx.(*OpenqueryContext).linked_server = _x
	}
	{
		p.SetState(1305)
		p.Match(tsqlParserCOMMA)
	}
	{
		p.SetState(1306)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*OpenqueryContext).query = _m
	}
	{
		p.SetState(1307)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IOpendatasourceContext is an interface to support dynamic dispatch.
type IOpendatasourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider returns the provider token.
	GetProvider() antlr.Token

	// GetInit returns the init token.
	GetInit() antlr.Token

	// SetProvider sets the provider token.
	SetProvider(antlr.Token)

	// SetInit sets the init token.
	SetInit(antlr.Token)

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetScheme returns the scheme rule contexts.
	GetScheme() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetScheme sets the scheme rule contexts.
	SetScheme(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsOpendatasourceContext differentiates from other interfaces.
	IsOpendatasourceContext()
}

type OpendatasourceContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	provider antlr.Token
	init     antlr.Token
	database IIdContext
	scheme   IIdContext
	table    IIdContext
}

func NewEmptyOpendatasourceContext() *OpendatasourceContext {
	var p = new(OpendatasourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_opendatasource
	return p
}

func (*OpendatasourceContext) IsOpendatasourceContext() {}

func NewOpendatasourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpendatasourceContext {
	var p = new(OpendatasourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_opendatasource

	return p
}

func (s *OpendatasourceContext) GetParser() antlr.Parser { return s.parser }

func (s *OpendatasourceContext) GetProvider() antlr.Token { return s.provider }

func (s *OpendatasourceContext) GetInit() antlr.Token { return s.init }

func (s *OpendatasourceContext) SetProvider(v antlr.Token) { s.provider = v }

func (s *OpendatasourceContext) SetInit(v antlr.Token) { s.init = v }

func (s *OpendatasourceContext) GetDatabase() IIdContext { return s.database }

func (s *OpendatasourceContext) GetScheme() IIdContext { return s.scheme }

func (s *OpendatasourceContext) GetTable() IIdContext { return s.table }

func (s *OpendatasourceContext) SetDatabase(v IIdContext) { s.database = v }

func (s *OpendatasourceContext) SetScheme(v IIdContext) { s.scheme = v }

func (s *OpendatasourceContext) SetTable(v IIdContext) { s.table = v }

func (s *OpendatasourceContext) OPENDATASOURCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPENDATASOURCE, 0)
}

func (s *OpendatasourceContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSTRING)
}

func (s *OpendatasourceContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, i)
}

func (s *OpendatasourceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *OpendatasourceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OpendatasourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpendatasourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpendatasourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOpendatasource(s)
	}
}

func (s *OpendatasourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOpendatasource(s)
	}
}

func (p *tsqlParser) Opendatasource() (localctx IOpendatasourceContext) {
	localctx = NewOpendatasourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, tsqlParserRULE_opendatasource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1309)
		p.Match(tsqlParserOPENDATASOURCE)
	}
	{
		p.SetState(1310)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1311)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*OpendatasourceContext).provider = _m
	}
	{
		p.SetState(1312)
		p.Match(tsqlParserCOMMA)
	}
	{
		p.SetState(1313)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*OpendatasourceContext).init = _m
	}
	{
		p.SetState(1314)
		p.Match(tsqlParserRR_BRACKET)
	}
	{
		p.SetState(1315)
		p.Match(tsqlParserDOT)
	}
	p.SetState(1317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
		{
			p.SetState(1316)

			var _x = p.Id()

			localctx.(*OpendatasourceContext).database = _x
		}

	}
	{
		p.SetState(1319)
		p.Match(tsqlParserDOT)
	}
	p.SetState(1321)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
		{
			p.SetState(1320)

			var _x = p.Id()

			localctx.(*OpendatasourceContext).scheme = _x
		}

	}
	{
		p.SetState(1323)
		p.Match(tsqlParserDOT)
	}

	{
		p.SetState(1324)

		var _x = p.Id()

		localctx.(*OpendatasourceContext).table = _x
	}

	return localctx
}

// IDeclare_statementContext is an interface to support dynamic dispatch.
type IDeclare_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_statementContext differentiates from other interfaces.
	IsDeclare_statementContext()
}

type Declare_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_statementContext() *Declare_statementContext {
	var p = new(Declare_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_statement
	return p
}

func (*Declare_statementContext) IsDeclare_statementContext() {}

func NewDeclare_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_statementContext {
	var p = new(Declare_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_statement

	return p
}

func (s *Declare_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_statementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECLARE, 0)
}

func (s *Declare_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Declare_statementContext) Table_type_definition() ITable_type_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_type_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_type_definitionContext)
}

func (s *Declare_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Declare_statementContext) AllDeclare_local() []IDeclare_localContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_localContext)(nil)).Elem())
	var tst = make([]IDeclare_localContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_localContext)
		}
	}

	return tst
}

func (s *Declare_statementContext) Declare_local(i int) IDeclare_localContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_localContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_localContext)
}

func (s *Declare_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_statement(s)
	}
}

func (s *Declare_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_statement(s)
	}
}

func (p *tsqlParser) Declare_statement() (localctx IDeclare_statementContext) {
	localctx = NewDeclare_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, tsqlParserRULE_declare_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1347)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1326)
			p.Match(tsqlParserDECLARE)
		}
		{
			p.SetState(1327)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(1329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserAS {
			{
				p.SetState(1328)
				p.Match(tsqlParserAS)
			}

		}
		{
			p.SetState(1331)
			p.Table_type_definition()
		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1332)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1335)
			p.Match(tsqlParserDECLARE)
		}
		{
			p.SetState(1336)
			p.Declare_local()
		}
		p.SetState(1341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(1337)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(1338)
				p.Declare_local()
			}

			p.SetState(1343)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1345)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1344)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// ICursor_statementContext is an interface to support dynamic dispatch.
type ICursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_statementContext differentiates from other interfaces.
	IsCursor_statementContext()
}

type Cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_statementContext() *Cursor_statementContext {
	var p = new(Cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cursor_statement
	return p
}

func (*Cursor_statementContext) IsCursor_statementContext() {}

func NewCursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_statementContext {
	var p = new(Cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cursor_statement

	return p
}

func (s *Cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCLOSE, 0)
}

func (s *Cursor_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Cursor_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Cursor_statementContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEALLOCATE, 0)
}

func (s *Cursor_statementContext) Declare_cursor() IDeclare_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_cursorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_cursorContext)
}

func (s *Cursor_statementContext) Fetch_cursor() IFetch_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_cursorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_cursorContext)
}

func (s *Cursor_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPEN, 0)
}

func (s *Cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCursor_statement(s)
	}
}

func (s *Cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCursor_statement(s)
	}
}

func (p *tsqlParser) Cursor_statement() (localctx ICursor_statementContext) {
	localctx = NewCursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, tsqlParserRULE_cursor_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1375)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1349)
			p.Match(tsqlParserCLOSE)
		}
		p.SetState(1351)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1350)
				p.Match(tsqlParserGLOBAL)
			}

		}
		{
			p.SetState(1353)
			p.Cursor_name()
		}
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1354)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1357)
			p.Match(tsqlParserDEALLOCATE)
		}
		p.SetState(1359)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1358)
				p.Match(tsqlParserGLOBAL)
			}

		}
		{
			p.SetState(1361)
			p.Cursor_name()
		}
		p.SetState(1363)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1362)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserDECLARE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1365)
			p.Declare_cursor()
		}

	case tsqlParserFETCH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1366)
			p.Fetch_cursor()
		}

	case tsqlParserOPEN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1367)
			p.Match(tsqlParserOPEN)
		}
		p.SetState(1369)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1368)
				p.Match(tsqlParserGLOBAL)
			}

		}
		{
			p.SetState(1371)
			p.Cursor_name()
		}
		p.SetState(1373)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1372)
				p.Match(tsqlParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecute_statementContext is an interface to support dynamic dispatch.
type IExecute_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_status returns the return_status token.
	GetReturn_status() antlr.Token

	// SetReturn_status sets the return_status token.
	SetReturn_status(antlr.Token)

	// IsExecute_statementContext differentiates from other interfaces.
	IsExecute_statementContext()
}

type Execute_statementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	return_status antlr.Token
}

func NewEmptyExecute_statementContext() *Execute_statementContext {
	var p = new(Execute_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_statement
	return p
}

func (*Execute_statementContext) IsExecute_statementContext() {}

func NewExecute_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statementContext {
	var p = new(Execute_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_statement

	return p
}

func (s *Execute_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statementContext) GetReturn_status() antlr.Token { return s.return_status }

func (s *Execute_statementContext) SetReturn_status(v antlr.Token) { s.return_status = v }

func (s *Execute_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXECUTE, 0)
}

func (s *Execute_statementContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Execute_statementContext) AllExecute_statement_arg() []IExecute_statement_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_statement_argContext)(nil)).Elem())
	var tst = make([]IExecute_statement_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_statement_argContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Execute_statement_arg(i int) IExecute_statement_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statement_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_statement_argContext)
}

func (s *Execute_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Execute_statementContext) AllExecute_var_string() []IExecute_var_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem())
	var tst = make([]IExecute_var_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_var_stringContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Execute_var_string(i int) IExecute_var_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_var_stringContext)
}

func (s *Execute_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Execute_statementContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOGIN, 0)
}

func (s *Execute_statementContext) USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSER, 0)
}

func (s *Execute_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Execute_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_statement(s)
	}
}

func (s *Execute_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_statement(s)
	}
}

func (p *tsqlParser) Execute_statement() (localctx IExecute_statementContext) {
	localctx = NewExecute_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, tsqlParserRULE_execute_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1418)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1377)
			p.Match(tsqlParserEXECUTE)
		}
		p.SetState(1380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLOCAL_ID {
			{
				p.SetState(1378)

				var _m = p.Match(tsqlParserLOCAL_ID)

				localctx.(*Execute_statementContext).return_status = _m
			}
			{
				p.SetState(1379)
				p.Match(tsqlParserEQUAL)
			}

		}
		{
			p.SetState(1382)
			p.Func_proc_name()
		}
		p.SetState(1391)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1383)
				p.Execute_statement_arg()
			}
			p.SetState(1388)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(1384)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(1385)
					p.Execute_statement_arg()
				}

				p.SetState(1390)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1394)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1393)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1396)
			p.Match(tsqlParserEXECUTE)
		}
		{
			p.SetState(1397)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1398)
			p.Execute_var_string()
		}
		p.SetState(1403)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserPLUS {
			{
				p.SetState(1399)
				p.Match(tsqlParserPLUS)
			}
			{
				p.SetState(1400)
				p.Execute_var_string()
			}

			p.SetState(1405)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1406)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(1413)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
			p.SetState(1408)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserAS {
				{
					p.SetState(1407)
					p.Match(tsqlParserAS)
				}

			}
			p.SetState(1410)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserUSER || _la == tsqlParserLOGIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(1411)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(1412)
				p.Match(tsqlParserSTRING)
			}

		}
		p.SetState(1416)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1415)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// IExecute_statement_argContext is an interface to support dynamic dispatch.
type IExecute_statement_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParameter returns the parameter token.
	GetParameter() antlr.Token

	// SetParameter sets the parameter token.
	SetParameter(antlr.Token)

	// IsExecute_statement_argContext differentiates from other interfaces.
	IsExecute_statement_argContext()
}

type Execute_statement_argContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	parameter antlr.Token
}

func NewEmptyExecute_statement_argContext() *Execute_statement_argContext {
	var p = new(Execute_statement_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_statement_arg
	return p
}

func (*Execute_statement_argContext) IsExecute_statement_argContext() {}

func NewExecute_statement_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statement_argContext {
	var p = new(Execute_statement_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_statement_arg

	return p
}

func (s *Execute_statement_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statement_argContext) GetParameter() antlr.Token { return s.parameter }

func (s *Execute_statement_argContext) SetParameter(v antlr.Token) { s.parameter = v }

func (s *Execute_statement_argContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Execute_statement_argContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Execute_statement_argContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Execute_statement_argContext) Constant_LOCAL_ID() IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Execute_statement_argContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Execute_statement_argContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Execute_statement_argContext) OUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUT, 0)
}

func (s *Execute_statement_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statement_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statement_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_statement_arg(s)
	}
}

func (s *Execute_statement_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_statement_arg(s)
	}
}

func (p *tsqlParser) Execute_statement_arg() (localctx IExecute_statement_argContext) {
	localctx = NewExecute_statement_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, tsqlParserRULE_execute_statement_arg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1422)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1420)

			var _m = p.Match(tsqlParserLOCAL_ID)

			localctx.(*Execute_statement_argContext).parameter = _m
		}
		{
			p.SetState(1421)
			p.Match(tsqlParserEQUAL)
		}

	}
	p.SetState(1433)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.SetState(1426)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
			{
				p.SetState(1424)
				p.Constant_LOCAL_ID()
			}

		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1425)
				p.Id()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1429)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) == 1 {
			p.SetState(1428)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserOUT || _la == tsqlParserOUTPUT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case tsqlParserDEFAULT:
		{
			p.SetState(1431)
			p.Match(tsqlParserDEFAULT)
		}

	case tsqlParserNULL:
		{
			p.SetState(1432)
			p.Match(tsqlParserNULL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecute_var_stringContext is an interface to support dynamic dispatch.
type IExecute_var_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_var_stringContext differentiates from other interfaces.
	IsExecute_var_stringContext()
}

type Execute_var_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_var_stringContext() *Execute_var_stringContext {
	var p = new(Execute_var_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_var_string
	return p
}

func (*Execute_var_stringContext) IsExecute_var_stringContext() {}

func NewExecute_var_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_var_stringContext {
	var p = new(Execute_var_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_var_string

	return p
}

func (s *Execute_var_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_var_stringContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Execute_var_stringContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Execute_var_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_var_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_var_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_var_string(s)
	}
}

func (s *Execute_var_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_var_string(s)
	}
}

func (p *tsqlParser) Execute_var_string() (localctx IExecute_var_stringContext) {
	localctx = NewExecute_var_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, tsqlParserRULE_execute_var_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1435)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserLOCAL_ID || _la == tsqlParserSTRING) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ISecurity_statementContext is an interface to support dynamic dispatch.
type ISecurity_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOn_id returns the on_id rule contexts.
	GetOn_id() ITable_nameContext

	// GetTo_principal returns the to_principal rule contexts.
	GetTo_principal() IIdContext

	// GetAs_principal returns the as_principal rule contexts.
	GetAs_principal() IIdContext

	// SetOn_id sets the on_id rule contexts.
	SetOn_id(ITable_nameContext)

	// SetTo_principal sets the to_principal rule contexts.
	SetTo_principal(IIdContext)

	// SetAs_principal sets the as_principal rule contexts.
	SetAs_principal(IIdContext)

	// IsSecurity_statementContext differentiates from other interfaces.
	IsSecurity_statementContext()
}

type Security_statementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	on_id        ITable_nameContext
	to_principal IIdContext
	as_principal IIdContext
}

func NewEmptySecurity_statementContext() *Security_statementContext {
	var p = new(Security_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_security_statement
	return p
}

func (*Security_statementContext) IsSecurity_statementContext() {}

func NewSecurity_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_statementContext {
	var p = new(Security_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_security_statement

	return p
}

func (s *Security_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_statementContext) GetOn_id() ITable_nameContext { return s.on_id }

func (s *Security_statementContext) GetTo_principal() IIdContext { return s.to_principal }

func (s *Security_statementContext) GetAs_principal() IIdContext { return s.as_principal }

func (s *Security_statementContext) SetOn_id(v ITable_nameContext) { s.on_id = v }

func (s *Security_statementContext) SetTo_principal(v IIdContext) { s.to_principal = v }

func (s *Security_statementContext) SetAs_principal(v IIdContext) { s.as_principal = v }

func (s *Security_statementContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Security_statementContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserGRANT)
}

func (s *Security_statementContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserGRANT, i)
}

func (s *Security_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(tsqlParserTO, 0)
}

func (s *Security_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *Security_statementContext) Grant_permission() IGrant_permissionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_permissionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_permissionContext)
}

func (s *Security_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Security_statementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Security_statementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Security_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Security_statementContext) OPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTION, 0)
}

func (s *Security_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Security_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Security_statementContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIVILEGES, 0)
}

func (s *Security_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Security_statementContext) REVERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserREVERT, 0)
}

func (s *Security_statementContext) COOKIE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOOKIE, 0)
}

func (s *Security_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Security_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Security_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSecurity_statement(s)
	}
}

func (s *Security_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSecurity_statement(s)
	}
}

func (p *tsqlParser) Security_statement() (localctx ISecurity_statementContext) {
	localctx = NewSecurity_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, tsqlParserRULE_security_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1485)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1437)
			p.Execute_clause()
		}
		p.SetState(1439)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1438)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserGRANT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1441)
			p.Match(tsqlParserGRANT)
		}
		p.SetState(1453)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserALL:
			{
				p.SetState(1442)
				p.Match(tsqlParserALL)
			}
			p.SetState(1444)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserPRIVILEGES {
				{
					p.SetState(1443)
					p.Match(tsqlParserPRIVILEGES)
				}

			}

		case tsqlParserALTER, tsqlParserCREATE, tsqlParserEXECUTE, tsqlParserINSERT, tsqlParserREFERENCES, tsqlParserSELECT, tsqlParserVIEW, tsqlParserCONTROL, tsqlParserIMPERSONATE, tsqlParserSHOWPLAN, tsqlParserTAKE:
			{
				p.SetState(1446)
				p.Grant_permission()
			}
			p.SetState(1451)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserLR_BRACKET {
				{
					p.SetState(1447)
					p.Match(tsqlParserLR_BRACKET)
				}
				{
					p.SetState(1448)
					p.Column_name_list()
				}
				{
					p.SetState(1449)
					p.Match(tsqlParserRR_BRACKET)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserON {
			{
				p.SetState(1455)
				p.Match(tsqlParserON)
			}
			{
				p.SetState(1456)

				var _x = p.Table_name()

				localctx.(*Security_statementContext).on_id = _x
			}

		}
		{
			p.SetState(1459)
			p.Match(tsqlParserTO)
		}

		{
			p.SetState(1460)

			var _x = p.Id()

			localctx.(*Security_statementContext).to_principal = _x
		}

		p.SetState(1464)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1461)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1462)
				p.Match(tsqlParserGRANT)
			}
			{
				p.SetState(1463)
				p.Match(tsqlParserOPTION)
			}

		}
		p.SetState(1468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserAS {
			{
				p.SetState(1466)
				p.Match(tsqlParserAS)
			}
			{
				p.SetState(1467)

				var _x = p.Id()

				localctx.(*Security_statementContext).as_principal = _x
			}

		}
		p.SetState(1471)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1470)
				p.Match(tsqlParserSEMI)
			}

		}

	case tsqlParserREVERT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1473)
			p.Match(tsqlParserREVERT)
		}
		p.SetState(1480)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1474)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(1475)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1476)
				p.Match(tsqlParserCOOKIE)
			}
			{
				p.SetState(1477)
				p.Match(tsqlParserEQUAL)
			}
			{
				p.SetState(1478)
				p.Match(tsqlParserLOCAL_ID)
			}
			{
				p.SetState(1479)
				p.Match(tsqlParserRR_BRACKET)
			}

		}
		p.SetState(1483)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1482)
				p.Match(tsqlParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGrant_permissionContext is an interface to support dynamic dispatch.
type IGrant_permissionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_permissionContext differentiates from other interfaces.
	IsGrant_permissionContext()
}

type Grant_permissionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_permissionContext() *Grant_permissionContext {
	var p = new(Grant_permissionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_grant_permission
	return p
}

func (*Grant_permissionContext) IsGrant_permissionContext() {}

func NewGrant_permissionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_permissionContext {
	var p = new(Grant_permissionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_grant_permission

	return p
}

func (s *Grant_permissionContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_permissionContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXECUTE, 0)
}

func (s *Grant_permissionContext) VIEW() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW, 0)
}

func (s *Grant_permissionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Grant_permissionContext) TAKE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTAKE, 0)
}

func (s *Grant_permissionContext) CONTROL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTROL, 0)
}

func (s *Grant_permissionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCREATE, 0)
}

func (s *Grant_permissionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Grant_permissionContext) SHOWPLAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserSHOWPLAN, 0)
}

func (s *Grant_permissionContext) IMPERSONATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserIMPERSONATE, 0)
}

func (s *Grant_permissionContext) SELECT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELECT, 0)
}

func (s *Grant_permissionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(tsqlParserREFERENCES, 0)
}

func (s *Grant_permissionContext) INSERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERT, 0)
}

func (s *Grant_permissionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserALTER, 0)
}

func (s *Grant_permissionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATABASE, 0)
}

func (s *Grant_permissionContext) ANY() antlr.TerminalNode {
	return s.GetToken(tsqlParserANY, 0)
}

func (s *Grant_permissionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_permissionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_permissionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGrant_permission(s)
	}
}

func (s *Grant_permissionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGrant_permission(s)
	}
}

func (p *tsqlParser) Grant_permission() (localctx IGrant_permissionContext) {
	localctx = NewGrant_permissionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, tsqlParserRULE_grant_permission)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1513)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1487)
			p.Match(tsqlParserEXECUTE)
		}

	case tsqlParserVIEW:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1488)
			p.Match(tsqlParserVIEW)
		}
		{
			p.SetState(1489)
			p.Id()
		}

	case tsqlParserTAKE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1490)
			p.Match(tsqlParserTAKE)
		}
		{
			p.SetState(1491)
			p.Id()
		}

	case tsqlParserCONTROL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1492)
			p.Match(tsqlParserCONTROL)
		}
		p.SetState(1494)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
			{
				p.SetState(1493)
				p.Id()
			}

		}

	case tsqlParserCREATE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1496)
			p.Match(tsqlParserCREATE)
		}
		p.SetState(1497)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTABLE || _la == tsqlParserVIEW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserSHOWPLAN:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1498)
			p.Match(tsqlParserSHOWPLAN)
		}

	case tsqlParserIMPERSONATE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1499)
			p.Match(tsqlParserIMPERSONATE)
		}

	case tsqlParserSELECT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1500)
			p.Match(tsqlParserSELECT)
		}

	case tsqlParserREFERENCES:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1501)
			p.Match(tsqlParserREFERENCES)
		}

	case tsqlParserINSERT:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1502)
			p.Match(tsqlParserINSERT)
		}

	case tsqlParserALTER:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1503)
			p.Match(tsqlParserALTER)
		}
		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserANY || _la == tsqlParserDATABASE || _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
			p.SetState(1505)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserANY {
				{
					p.SetState(1504)
					p.Match(tsqlParserANY)
				}

			}
			p.SetState(1509)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
				{
					p.SetState(1507)
					p.Id()
				}

			case tsqlParserDATABASE:
				{
					p.SetState(1508)
					p.Match(tsqlParserDATABASE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISet_statementContext is an interface to support dynamic dispatch.
type ISet_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMember_name returns the member_name rule contexts.
	GetMember_name() IIdContext

	// SetMember_name sets the member_name rule contexts.
	SetMember_name(IIdContext)

	// IsSet_statementContext differentiates from other interfaces.
	IsSet_statementContext()
}

type Set_statementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	member_name IIdContext
}

func NewEmptySet_statementContext() *Set_statementContext {
	var p = new(Set_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_set_statement
	return p
}

func (*Set_statementContext) IsSet_statementContext() {}

func NewSet_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statementContext {
	var p = new(Set_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_set_statement

	return p
}

func (s *Set_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statementContext) GetMember_name() IIdContext { return s.member_name }

func (s *Set_statementContext) SetMember_name(v IIdContext) { s.member_name = v }

func (s *Set_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Set_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Set_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Set_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Set_statementContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Set_statementContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR, 0)
}

func (s *Set_statementContext) Declare_set_cursor_common() IDeclare_set_cursor_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_commonContext)
}

func (s *Set_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Set_statementContext) READ() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD, 0)
}

func (s *Set_statementContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Set_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUPDATE, 0)
}

func (s *Set_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Set_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Set_statementContext) Set_special() ISet_specialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_specialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_specialContext)
}

func (s *Set_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSet_statement(s)
	}
}

func (s *Set_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSet_statement(s)
	}
}

func (p *tsqlParser) Set_statement() (localctx ISet_statementContext) {
	localctx = NewSet_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, tsqlParserRULE_set_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1554)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1515)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1516)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(1519)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserDOT {
			{
				p.SetState(1517)
				p.Match(tsqlParserDOT)
			}
			{
				p.SetState(1518)

				var _x = p.Id()

				localctx.(*Set_statementContext).member_name = _x
			}

		}
		{
			p.SetState(1521)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1522)
			p.expression(0)
		}
		p.SetState(1524)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1523)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1526)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1527)
			p.Match(tsqlParserLOCAL_ID)
		}
		{
			p.SetState(1528)
			p.Assignment_operator()
		}
		{
			p.SetState(1529)
			p.expression(0)
		}
		p.SetState(1531)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1530)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1533)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1534)
			p.Match(tsqlParserLOCAL_ID)
		}
		{
			p.SetState(1535)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1536)
			p.Match(tsqlParserCURSOR)
		}
		{
			p.SetState(1537)
			p.Declare_set_cursor_common()
		}
		p.SetState(1548)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFOR {
			{
				p.SetState(1538)
				p.Match(tsqlParserFOR)
			}
			p.SetState(1546)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserREAD:
				{
					p.SetState(1539)
					p.Match(tsqlParserREAD)
				}
				{
					p.SetState(1540)
					p.Match(tsqlParserONLY)
				}

			case tsqlParserUPDATE:
				{
					p.SetState(1541)
					p.Match(tsqlParserUPDATE)
				}
				p.SetState(1544)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == tsqlParserOF {
					{
						p.SetState(1542)
						p.Match(tsqlParserOF)
					}
					{
						p.SetState(1543)
						p.Column_name_list()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1551)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1550)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1553)
			p.Set_special()
		}

	}

	return localctx
}

// ITransaction_statementContext is an interface to support dynamic dispatch.
type ITransaction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_statementContext differentiates from other interfaces.
	IsTransaction_statementContext()
}

type Transaction_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_statementContext() *Transaction_statementContext {
	var p = new(Transaction_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_transaction_statement
	return p
}

func (*Transaction_statementContext) IsTransaction_statementContext() {}

func NewTransaction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_statementContext {
	var p = new(Transaction_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_transaction_statement

	return p
}

func (s *Transaction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBEGIN, 0)
}

func (s *Transaction_statementContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISTRIBUTED, 0)
}

func (s *Transaction_statementContext) TRAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRAN, 0)
}

func (s *Transaction_statementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSACTION, 0)
}

func (s *Transaction_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Transaction_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Transaction_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Transaction_statementContext) MARK() antlr.TerminalNode {
	return s.GetToken(tsqlParserMARK, 0)
}

func (s *Transaction_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Transaction_statementContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMIT, 0)
}

func (s *Transaction_statementContext) DELAYED_DURABILITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAYED_DURABILITY, 0)
}

func (s *Transaction_statementContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Transaction_statementContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Transaction_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Transaction_statementContext) WORK() antlr.TerminalNode {
	return s.GetToken(tsqlParserWORK, 0)
}

func (s *Transaction_statementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(tsqlParserROLLBACK, 0)
}

func (s *Transaction_statementContext) SAVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSAVE, 0)
}

func (s *Transaction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTransaction_statement(s)
	}
}

func (p *tsqlParser) Transaction_statement() (localctx ITransaction_statementContext) {
	localctx = NewTransaction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, tsqlParserRULE_transaction_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1633)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1556)
			p.Match(tsqlParserBEGIN)
		}
		{
			p.SetState(1557)
			p.Match(tsqlParserDISTRIBUTED)
		}
		p.SetState(1558)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1561)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1559)
				p.Id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1560)
				p.Match(tsqlParserLOCAL_ID)
			}

		}
		p.SetState(1564)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1563)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1566)
			p.Match(tsqlParserBEGIN)
		}
		p.SetState(1567)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1577)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
			p.SetState(1570)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
				{
					p.SetState(1568)
					p.Id()
				}

			case tsqlParserLOCAL_ID:
				{
					p.SetState(1569)
					p.Match(tsqlParserLOCAL_ID)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(1575)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1572)
					p.Match(tsqlParserWITH)
				}
				{
					p.SetState(1573)
					p.Match(tsqlParserMARK)
				}
				{
					p.SetState(1574)
					p.Match(tsqlParserSTRING)
				}

			}

		}
		p.SetState(1580)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1579)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1582)
			p.Match(tsqlParserCOMMIT)
		}
		p.SetState(1583)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
			p.SetState(1586)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
				{
					p.SetState(1584)
					p.Id()
				}

			case tsqlParserLOCAL_ID:
				{
					p.SetState(1585)
					p.Match(tsqlParserLOCAL_ID)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(1594)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1588)
					p.Match(tsqlParserWITH)
				}
				{
					p.SetState(1589)
					p.Match(tsqlParserLR_BRACKET)
				}
				{
					p.SetState(1590)
					p.Match(tsqlParserDELAYED_DURABILITY)
				}
				{
					p.SetState(1591)
					p.Match(tsqlParserEQUAL)
				}
				p.SetState(1592)
				_la = p.GetTokenStream().LA(1)

				if !(_la == tsqlParserOFF || _la == tsqlParserON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1593)
					p.Match(tsqlParserRR_BRACKET)
				}

			}

		}
		p.SetState(1599)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1598)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1601)
			p.Match(tsqlParserCOMMIT)
		}
		p.SetState(1603)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1602)
				p.Match(tsqlParserWORK)
			}

		}
		p.SetState(1606)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1605)
				p.Match(tsqlParserSEMI)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1608)
			p.Match(tsqlParserROLLBACK)
		}
		p.SetState(1609)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1612)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1610)
				p.Id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1611)
				p.Match(tsqlParserLOCAL_ID)
			}

		}
		p.SetState(1615)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1614)
				p.Match(tsqlParserSEMI)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1617)
			p.Match(tsqlParserROLLBACK)
		}
		p.SetState(1619)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1618)
				p.Match(tsqlParserWORK)
			}

		}
		p.SetState(1622)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1621)
				p.Match(tsqlParserSEMI)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1624)
			p.Match(tsqlParserSAVE)
		}
		p.SetState(1625)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserTRAN || _la == tsqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1628)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1626)
				p.Id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1627)
				p.Match(tsqlParserLOCAL_ID)
			}

		}
		p.SetState(1631)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1630)
				p.Match(tsqlParserSEMI)
			}

		}

	}

	return localctx
}

// IGo_statementContext is an interface to support dynamic dispatch.
type IGo_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCount returns the count token.
	GetCount() antlr.Token

	// SetCount sets the count token.
	SetCount(antlr.Token)

	// IsGo_statementContext differentiates from other interfaces.
	IsGo_statementContext()
}

type Go_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	count  antlr.Token
}

func NewEmptyGo_statementContext() *Go_statementContext {
	var p = new(Go_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_go_statement
	return p
}

func (*Go_statementContext) IsGo_statementContext() {}

func NewGo_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Go_statementContext {
	var p = new(Go_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_go_statement

	return p
}

func (s *Go_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Go_statementContext) GetCount() antlr.Token { return s.count }

func (s *Go_statementContext) SetCount(v antlr.Token) { s.count = v }

func (s *Go_statementContext) GO() antlr.TerminalNode {
	return s.GetToken(tsqlParserGO, 0)
}

func (s *Go_statementContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Go_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Go_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Go_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGo_statement(s)
	}
}

func (s *Go_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGo_statement(s)
	}
}

func (p *tsqlParser) Go_statement() (localctx IGo_statementContext) {
	localctx = NewGo_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, tsqlParserRULE_go_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1635)
		p.Match(tsqlParserGO)
	}
	p.SetState(1637)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserDECIMAL {
		{
			p.SetState(1636)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*Go_statementContext).count = _m
		}

	}

	return localctx
}

// IUse_statementContext is an interface to support dynamic dispatch.
type IUse_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// IsUse_statementContext differentiates from other interfaces.
	IsUse_statementContext()
}

type Use_statementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	database IIdContext
}

func NewEmptyUse_statementContext() *Use_statementContext {
	var p = new(Use_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_use_statement
	return p
}

func (*Use_statementContext) IsUse_statementContext() {}

func NewUse_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_statementContext {
	var p = new(Use_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_use_statement

	return p
}

func (s *Use_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_statementContext) GetDatabase() IIdContext { return s.database }

func (s *Use_statementContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Use_statementContext) USE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSE, 0)
}

func (s *Use_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Use_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUse_statement(s)
	}
}

func (s *Use_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUse_statement(s)
	}
}

func (p *tsqlParser) Use_statement() (localctx IUse_statementContext) {
	localctx = NewUse_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, tsqlParserRULE_use_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1639)
		p.Match(tsqlParserUSE)
	}
	{
		p.SetState(1640)

		var _x = p.Id()

		localctx.(*Use_statementContext).database = _x
	}
	p.SetState(1642)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1641)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IExecute_clauseContext is an interface to support dynamic dispatch.
type IExecute_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClause returns the clause token.
	GetClause() antlr.Token

	// SetClause sets the clause token.
	SetClause(antlr.Token)

	// IsExecute_clauseContext differentiates from other interfaces.
	IsExecute_clauseContext()
}

type Execute_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	clause antlr.Token
}

func NewEmptyExecute_clauseContext() *Execute_clauseContext {
	var p = new(Execute_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_execute_clause
	return p
}

func (*Execute_clauseContext) IsExecute_clauseContext() {}

func NewExecute_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_clauseContext {
	var p = new(Execute_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_execute_clause

	return p
}

func (s *Execute_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_clauseContext) GetClause() antlr.Token { return s.clause }

func (s *Execute_clauseContext) SetClause(v antlr.Token) { s.clause = v }

func (s *Execute_clauseContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXECUTE, 0)
}

func (s *Execute_clauseContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Execute_clauseContext) CALLER() antlr.TerminalNode {
	return s.GetToken(tsqlParserCALLER, 0)
}

func (s *Execute_clauseContext) SELF() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELF, 0)
}

func (s *Execute_clauseContext) OWNER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOWNER, 0)
}

func (s *Execute_clauseContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Execute_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExecute_clause(s)
	}
}

func (s *Execute_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExecute_clause(s)
	}
}

func (p *tsqlParser) Execute_clause() (localctx IExecute_clauseContext) {
	localctx = NewExecute_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, tsqlParserRULE_execute_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1644)
		p.Match(tsqlParserEXECUTE)
	}
	{
		p.SetState(1645)
		p.Match(tsqlParserAS)
	}
	p.SetState(1646)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Execute_clauseContext).clause = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserCALLER || _la == tsqlParserOWNER || _la == tsqlParserSELF || _la == tsqlParserSTRING) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Execute_clauseContext).clause = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDeclare_localContext is an interface to support dynamic dispatch.
type IDeclare_localContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_localContext differentiates from other interfaces.
	IsDeclare_localContext()
}

type Declare_localContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_localContext() *Declare_localContext {
	var p = new(Declare_localContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_local
	return p
}

func (*Declare_localContext) IsDeclare_localContext() {}

func NewDeclare_localContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_localContext {
	var p = new(Declare_localContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_local

	return p
}

func (s *Declare_localContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_localContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Declare_localContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Declare_localContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Declare_localContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Declare_localContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_localContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_localContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_local(s)
	}
}

func (s *Declare_localContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_local(s)
	}
}

func (p *tsqlParser) Declare_local() (localctx IDeclare_localContext) {
	localctx = NewDeclare_localContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, tsqlParserRULE_declare_local)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1648)
		p.Match(tsqlParserLOCAL_ID)
	}
	p.SetState(1650)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(1649)
			p.Match(tsqlParserAS)
		}

	}
	{
		p.SetState(1652)
		p.Data_type()
	}
	p.SetState(1655)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserEQUAL {
		{
			p.SetState(1653)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(1654)
			p.expression(0)
		}

	}

	return localctx
}

// ITable_type_definitionContext is an interface to support dynamic dispatch.
type ITable_type_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_type_definitionContext differentiates from other interfaces.
	IsTable_type_definitionContext()
}

type Table_type_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_type_definitionContext() *Table_type_definitionContext {
	var p = new(Table_type_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_type_definition
	return p
}

func (*Table_type_definitionContext) IsTable_type_definitionContext() {}

func NewTable_type_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_type_definitionContext {
	var p = new(Table_type_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_type_definition

	return p
}

func (s *Table_type_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_type_definitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTABLE, 0)
}

func (s *Table_type_definitionContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Table_type_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_type_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_type_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_type_definition(s)
	}
}

func (s *Table_type_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_type_definition(s)
	}
}

func (p *tsqlParser) Table_type_definition() (localctx ITable_type_definitionContext) {
	localctx = NewTable_type_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, tsqlParserRULE_table_type_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1657)
		p.Match(tsqlParserTABLE)
	}
	{
		p.SetState(1658)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1659)
		p.Column_def_table_constraints()
	}
	{
		p.SetState(1660)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IColumn_def_table_constraintsContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintsContext differentiates from other interfaces.
	IsColumn_def_table_constraintsContext()
}

type Column_def_table_constraintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintsContext() *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_def_table_constraints
	return p
}

func (*Column_def_table_constraintsContext) IsColumn_def_table_constraintsContext() {}

func NewColumn_def_table_constraintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_def_table_constraints

	return p
}

func (s *Column_def_table_constraintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintsContext) AllColumn_def_table_constraint() []IColumn_def_table_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_def_table_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_def_table_constraintContext)
		}
	}

	return tst
}

func (s *Column_def_table_constraintsContext) Column_def_table_constraint(i int) IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Column_def_table_constraintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_def_table_constraints(s)
	}
}

func (s *Column_def_table_constraintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_def_table_constraints(s)
	}
}

func (p *tsqlParser) Column_def_table_constraints() (localctx IColumn_def_table_constraintsContext) {
	localctx = NewColumn_def_table_constraintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, tsqlParserRULE_column_def_table_constraints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1662)
		p.Column_def_table_constraint()
	}
	p.SetState(1669)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1664)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserCOMMA {
				{
					p.SetState(1663)
					p.Match(tsqlParserCOMMA)
				}

			}
			{
				p.SetState(1666)
				p.Column_def_table_constraint()
			}

		}
		p.SetState(1671)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_def_table_constraintContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintContext differentiates from other interfaces.
	IsColumn_def_table_constraintContext()
}

type Column_def_table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintContext() *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_def_table_constraint
	return p
}

func (*Column_def_table_constraintContext) IsColumn_def_table_constraintContext() {}

func NewColumn_def_table_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_def_table_constraint

	return p
}

func (s *Column_def_table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *Column_def_table_constraintContext) Table_constraint() ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Column_def_table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_def_table_constraint(s)
	}
}

func (s *Column_def_table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_def_table_constraint(s)
	}
}

func (p *tsqlParser) Column_def_table_constraint() (localctx IColumn_def_table_constraintContext) {
	localctx = NewColumn_def_table_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, tsqlParserRULE_column_def_table_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1674)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1672)
			p.Column_definition()
		}

	case tsqlParserCHECK, tsqlParserCONSTRAINT, tsqlParserPRIMARY, tsqlParserUNIQUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1673)
			p.Table_constraint()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_definitionContext is an interface to support dynamic dispatch.
type IColumn_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeed returns the seed token.
	GetSeed() antlr.Token

	// GetIncrement returns the increment token.
	GetIncrement() antlr.Token

	// SetSeed sets the seed token.
	SetSeed(antlr.Token)

	// SetIncrement sets the increment token.
	SetIncrement(antlr.Token)

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IIdContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IIdContext)

	// IsColumn_definitionContext differentiates from other interfaces.
	IsColumn_definitionContext()
}

type Column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IIdContext
	seed       antlr.Token
	increment  antlr.Token
}

func NewEmptyColumn_definitionContext() *Column_definitionContext {
	var p = new(Column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_definition
	return p
}

func (*Column_definitionContext) IsColumn_definitionContext() {}

func NewColumn_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_definitionContext {
	var p = new(Column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_definition

	return p
}

func (s *Column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_definitionContext) GetSeed() antlr.Token { return s.seed }

func (s *Column_definitionContext) GetIncrement() antlr.Token { return s.increment }

func (s *Column_definitionContext) SetSeed(v antlr.Token) { s.seed = v }

func (s *Column_definitionContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *Column_definitionContext) GetConstraint() IIdContext { return s.constraint }

func (s *Column_definitionContext) SetConstraint(v IIdContext) { s.constraint = v }

func (s *Column_definitionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_definitionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Column_definitionContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Column_definitionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Column_definitionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Column_definitionContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Column_definitionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Column_definitionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Column_definitionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Column_definitionContext) ROWGUIDCOL() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWGUIDCOL, 0)
}

func (s *Column_definitionContext) AllColumn_constraint() []IColumn_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_constraintContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Column_constraint(i int) IColumn_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_definitionContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Column_definitionContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Column_definitionContext) VALUES() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUES, 0)
}

func (s *Column_definitionContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Column_definitionContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Column_definitionContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Column_definitionContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Column_definitionContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_definition(s)
	}
}

func (s *Column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_definition(s)
	}
}

func (p *tsqlParser) Column_definition() (localctx IColumn_definitionContext) {
	localctx = NewColumn_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, tsqlParserRULE_column_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1676)
		p.Id()
	}
	p.SetState(1680)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		{
			p.SetState(1677)
			p.Data_type()
		}

	case tsqlParserAS:
		{
			p.SetState(1678)
			p.Match(tsqlParserAS)
		}
		{
			p.SetState(1679)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1684)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOLLATE {
		{
			p.SetState(1682)
			p.Match(tsqlParserCOLLATE)
		}
		{
			p.SetState(1683)
			p.Id()
		}

	}
	p.SetState(1687)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1686)
			p.Null_notnull()
		}

	}
	p.SetState(1712)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		p.SetState(1691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCONSTRAINT {
			{
				p.SetState(1689)
				p.Match(tsqlParserCONSTRAINT)
			}
			{
				p.SetState(1690)

				var _x = p.Id()

				localctx.(*Column_definitionContext).constraint = _x
			}

		}
		{
			p.SetState(1693)
			p.Match(tsqlParserDEFAULT)
		}
		{
			p.SetState(1694)
			p.Constant_expression()
		}
		p.SetState(1697)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1695)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(1696)
				p.Match(tsqlParserVALUES)
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1699)
			p.Match(tsqlParserIDENTITY)
		}
		p.SetState(1705)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1700)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(1701)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Column_definitionContext).seed = _m
			}
			{
				p.SetState(1702)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(1703)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Column_definitionContext).increment = _m
			}
			{
				p.SetState(1704)
				p.Match(tsqlParserRR_BRACKET)
			}

		}
		p.SetState(1710)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1707)
				p.Match(tsqlParserNOT)
			}
			{
				p.SetState(1708)
				p.Match(tsqlParserFOR)
			}
			{
				p.SetState(1709)
				p.Match(tsqlParserREPLICATION)
			}

		}

	}
	p.SetState(1715)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserROWGUIDCOL {
		{
			p.SetState(1714)
			p.Match(tsqlParserROWGUIDCOL)
		}

	}
	p.SetState(1720)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1717)
				p.Column_constraint()
			}

		}
		p.SetState(1722)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Column_constraintContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Column_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Column_constraintContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_constraintContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Column_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIMARY, 0)
}

func (s *Column_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEY, 0)
}

func (s *Column_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNIQUE, 0)
}

func (s *Column_constraintContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Column_constraintContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Column_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Column_constraintContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Column_constraintContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (p *tsqlParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, tsqlParserRULE_column_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1725)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONSTRAINT {
		{
			p.SetState(1723)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(1724)
			p.Id()
		}

	}
	p.SetState(1728)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOT || _la == tsqlParserNULL {
		{
			p.SetState(1727)
			p.Null_notnull()
		}

	}
	p.SetState(1751)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserPRIMARY, tsqlParserUNIQUE:
		p.SetState(1733)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserPRIMARY:
			{
				p.SetState(1730)
				p.Match(tsqlParserPRIMARY)
			}
			{
				p.SetState(1731)
				p.Match(tsqlParserKEY)
			}

		case tsqlParserUNIQUE:
			{
				p.SetState(1732)
				p.Match(tsqlParserUNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1736)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED {
			{
				p.SetState(1735)
				p.Clustered()
			}

		}
		p.SetState(1739)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1738)
				p.Index_options()
			}

		}

	case tsqlParserCHECK:
		{
			p.SetState(1741)
			p.Match(tsqlParserCHECK)
		}
		p.SetState(1745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(1742)
				p.Match(tsqlParserNOT)
			}
			{
				p.SetState(1743)
				p.Match(tsqlParserFOR)
			}
			{
				p.SetState(1744)
				p.Match(tsqlParserREPLICATION)
			}

		}
		{
			p.SetState(1747)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1748)
			p.Search_condition()
		}
		{
			p.SetState(1749)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Table_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECK, 0)
}

func (s *Table_constraintContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Table_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONSTRAINT, 0)
}

func (s *Table_constraintContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Table_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIMARY, 0)
}

func (s *Table_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEY, 0)
}

func (s *Table_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNIQUE, 0)
}

func (s *Table_constraintContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Table_constraintContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Table_constraintContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Table_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Table_constraintContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Table_constraintContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPLICATION, 0)
}

func (s *Table_constraintContext) ASC() antlr.TerminalNode {
	return s.GetToken(tsqlParserASC, 0)
}

func (s *Table_constraintContext) DESC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDESC, 0)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (p *tsqlParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, tsqlParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1755)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONSTRAINT {
		{
			p.SetState(1753)
			p.Match(tsqlParserCONSTRAINT)
		}
		{
			p.SetState(1754)
			p.Id()
		}

	}
	p.SetState(1788)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserPRIMARY, tsqlParserUNIQUE:
		p.SetState(1760)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserPRIMARY:
			{
				p.SetState(1757)
				p.Match(tsqlParserPRIMARY)
			}
			{
				p.SetState(1758)
				p.Match(tsqlParserKEY)
			}

		case tsqlParserUNIQUE:
			{
				p.SetState(1759)
				p.Match(tsqlParserUNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED {
			{
				p.SetState(1762)
				p.Clustered()
			}

		}
		{
			p.SetState(1765)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1766)
			p.Column_name_list()
		}
		p.SetState(1768)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserASC || _la == tsqlParserDESC {
			p.SetState(1767)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserASC || _la == tsqlParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(1770)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(1772)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 268, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1771)
				p.Index_options()
			}

		}
		p.SetState(1776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserON {
			{
				p.SetState(1774)
				p.Match(tsqlParserON)
			}
			{
				p.SetState(1775)
				p.Id()
			}

		}

	case tsqlParserCHECK:
		{
			p.SetState(1778)
			p.Match(tsqlParserCHECK)
		}
		p.SetState(1782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(1779)
				p.Match(tsqlParserNOT)
			}
			{
				p.SetState(1780)
				p.Match(tsqlParserFOR)
			}
			{
				p.SetState(1781)
				p.Match(tsqlParserREPLICATION)
			}

		}
		{
			p.SetState(1784)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1785)
			p.Search_condition()
		}
		{
			p.SetState(1786)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndex_optionsContext is an interface to support dynamic dispatch.
type IIndex_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionsContext differentiates from other interfaces.
	IsIndex_optionsContext()
}

type Index_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionsContext() *Index_optionsContext {
	var p = new(Index_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_index_options
	return p
}

func (*Index_optionsContext) IsIndex_optionsContext() {}

func NewIndex_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionsContext {
	var p = new(Index_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_index_options

	return p
}

func (s *Index_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Index_optionsContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *Index_optionsContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *Index_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIndex_options(s)
	}
}

func (s *Index_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIndex_options(s)
	}
}

func (p *tsqlParser) Index_options() (localctx IIndex_optionsContext) {
	localctx = NewIndex_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, tsqlParserRULE_index_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1790)
		p.Match(tsqlParserWITH)
	}
	{
		p.SetState(1791)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(1792)
		p.Index_option()
	}
	p.SetState(1797)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(1793)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(1794)
			p.Index_option()
		}

		p.SetState(1799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1800)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IIndex_optionContext is an interface to support dynamic dispatch.
type IIndex_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionContext differentiates from other interfaces.
	IsIndex_optionContext()
}

type Index_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionContext() *Index_optionContext {
	var p = new(Index_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_index_option
	return p
}

func (*Index_optionContext) IsIndex_optionContext() {}

func NewIndex_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionContext {
	var p = new(Index_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_index_option

	return p
}

func (s *Index_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionContext) AllSimple_id() []ISimple_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_idContext)(nil)).Elem())
	var tst = make([]ISimple_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_idContext)
		}
	}

	return tst
}

func (s *Index_optionContext) Simple_id(i int) ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Index_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Index_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Index_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIndex_option(s)
	}
}

func (s *Index_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIndex_option(s)
	}
}

func (p *tsqlParser) Index_option() (localctx IIndex_optionContext) {
	localctx = NewIndex_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, tsqlParserRULE_index_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1802)
		p.Simple_id()
	}
	{
		p.SetState(1803)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(1807)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserID:
		{
			p.SetState(1804)
			p.Simple_id()
		}

	case tsqlParserOFF, tsqlParserON:
		{
			p.SetState(1805)
			p.On_off()
		}

	case tsqlParserDECIMAL:
		{
			p.SetState(1806)
			p.Match(tsqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclare_cursorContext is an interface to support dynamic dispatch.
type IDeclare_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_cursorContext differentiates from other interfaces.
	IsDeclare_cursorContext()
}

type Declare_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_cursorContext() *Declare_cursorContext {
	var p = new(Declare_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_cursor
	return p
}

func (*Declare_cursorContext) IsDeclare_cursorContext() {}

func NewDeclare_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_cursorContext {
	var p = new(Declare_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_cursor

	return p
}

func (s *Declare_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_cursorContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECLARE, 0)
}

func (s *Declare_cursorContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Declare_cursorContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURSOR, 0)
}

func (s *Declare_cursorContext) AllFOR() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserFOR)
}

func (s *Declare_cursorContext) FOR(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, i)
}

func (s *Declare_cursorContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_cursorContext) Declare_set_cursor_common() IDeclare_set_cursor_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_commonContext)
}

func (s *Declare_cursorContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSENSITIVE, 0)
}

func (s *Declare_cursorContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL, 0)
}

func (s *Declare_cursorContext) READ() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD, 0)
}

func (s *Declare_cursorContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Declare_cursorContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUPDATE, 0)
}

func (s *Declare_cursorContext) OF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOF, 0)
}

func (s *Declare_cursorContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Declare_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_cursor(s)
	}
}

func (s *Declare_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_cursor(s)
	}
}

func (p *tsqlParser) Declare_cursor() (localctx IDeclare_cursorContext) {
	localctx = NewDeclare_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, tsqlParserRULE_declare_cursor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1809)
		p.Match(tsqlParserDECLARE)
	}
	{
		p.SetState(1810)
		p.Cursor_name()
	}
	p.SetState(1842)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1811)
			p.Match(tsqlParserCURSOR)
		}
		p.SetState(1821)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1812)
				p.Declare_set_cursor_common()
			}
			p.SetState(1819)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserFOR {
				{
					p.SetState(1813)
					p.Match(tsqlParserFOR)
				}
				{
					p.SetState(1814)
					p.Match(tsqlParserUPDATE)
				}
				p.SetState(1817)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == tsqlParserOF {
					{
						p.SetState(1815)
						p.Match(tsqlParserOF)
					}
					{
						p.SetState(1816)
						p.Column_name_list()
					}

				}

			}

		}

	case 2:
		p.SetState(1824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserINSENSITIVE {
			{
				p.SetState(1823)
				p.Match(tsqlParserINSENSITIVE)
			}

		}
		p.SetState(1827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserSCROLL {
			{
				p.SetState(1826)
				p.Match(tsqlParserSCROLL)
			}

		}
		{
			p.SetState(1829)
			p.Match(tsqlParserCURSOR)
		}
		{
			p.SetState(1830)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(1831)
			p.Select_statement()
		}
		p.SetState(1840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFOR {
			{
				p.SetState(1832)
				p.Match(tsqlParserFOR)
			}
			p.SetState(1838)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case tsqlParserREAD:
				{
					p.SetState(1833)
					p.Match(tsqlParserREAD)
				}
				{
					p.SetState(1834)
					p.Match(tsqlParserONLY)
				}

			case tsqlParserUPDATE:
				{
					p.SetState(1835)
					p.Match(tsqlParserUPDATE)
				}

			case tsqlParserOF:
				{
					p.SetState(1836)
					p.Match(tsqlParserOF)
				}
				{
					p.SetState(1837)
					p.Column_name_list()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	}
	p.SetState(1845)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 282, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1844)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// IDeclare_set_cursor_commonContext is an interface to support dynamic dispatch.
type IDeclare_set_cursor_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_set_cursor_commonContext differentiates from other interfaces.
	IsDeclare_set_cursor_commonContext()
}

type Declare_set_cursor_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_set_cursor_commonContext() *Declare_set_cursor_commonContext {
	var p = new(Declare_set_cursor_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_declare_set_cursor_common
	return p
}

func (*Declare_set_cursor_commonContext) IsDeclare_set_cursor_commonContext() {}

func NewDeclare_set_cursor_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_set_cursor_commonContext {
	var p = new(Declare_set_cursor_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_declare_set_cursor_common

	return p
}

func (s *Declare_set_cursor_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_set_cursor_commonContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *Declare_set_cursor_commonContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_set_cursor_commonContext) TYPE_WARNING() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE_WARNING, 0)
}

func (s *Declare_set_cursor_commonContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL, 0)
}

func (s *Declare_set_cursor_commonContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Declare_set_cursor_commonContext) FORWARD_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORWARD_ONLY, 0)
}

func (s *Declare_set_cursor_commonContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL, 0)
}

func (s *Declare_set_cursor_commonContext) STATIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATIC, 0)
}

func (s *Declare_set_cursor_commonContext) KEYSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEYSET, 0)
}

func (s *Declare_set_cursor_commonContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDYNAMIC, 0)
}

func (s *Declare_set_cursor_commonContext) FAST_FORWARD() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST_FORWARD, 0)
}

func (s *Declare_set_cursor_commonContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Declare_set_cursor_commonContext) SCROLL_LOCKS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL_LOCKS, 0)
}

func (s *Declare_set_cursor_commonContext) OPTIMISTIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMISTIC, 0)
}

func (s *Declare_set_cursor_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_set_cursor_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_set_cursor_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDeclare_set_cursor_common(s)
	}
}

func (s *Declare_set_cursor_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDeclare_set_cursor_common(s)
	}
}

func (p *tsqlParser) Declare_set_cursor_common() (localctx IDeclare_set_cursor_commonContext) {
	localctx = NewDeclare_set_cursor_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, tsqlParserRULE_declare_set_cursor_common)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1848)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserGLOBAL || _la == tsqlParserLOCAL {
		p.SetState(1847)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserGLOBAL || _la == tsqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFORWARD_ONLY || _la == tsqlParserSCROLL {
		p.SetState(1850)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFORWARD_ONLY || _la == tsqlParserSCROLL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserDYNAMIC || _la == tsqlParserFAST_FORWARD || _la == tsqlParserKEYSET || _la == tsqlParserSTATIC {
		p.SetState(1853)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserDYNAMIC || _la == tsqlParserFAST_FORWARD || _la == tsqlParserKEYSET || _la == tsqlParserSTATIC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserOPTIMISTIC || _la == tsqlParserREAD_ONLY || _la == tsqlParserSCROLL_LOCKS {
		p.SetState(1856)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOPTIMISTIC || _la == tsqlParserREAD_ONLY || _la == tsqlParserSCROLL_LOCKS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTYPE_WARNING {
		{
			p.SetState(1859)
			p.Match(tsqlParserTYPE_WARNING)
		}

	}
	{
		p.SetState(1862)
		p.Match(tsqlParserFOR)
	}
	{
		p.SetState(1863)
		p.Select_statement()
	}

	return localctx
}

// IFetch_cursorContext is an interface to support dynamic dispatch.
type IFetch_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_cursorContext differentiates from other interfaces.
	IsFetch_cursorContext()
}

type Fetch_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_cursorContext() *Fetch_cursorContext {
	var p = new(Fetch_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_fetch_cursor
	return p
}

func (*Fetch_cursorContext) IsFetch_cursorContext() {}

func NewFetch_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_cursorContext {
	var p = new(Fetch_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_fetch_cursor

	return p
}

func (s *Fetch_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_cursorContext) FETCH() antlr.TerminalNode {
	return s.GetToken(tsqlParserFETCH, 0)
}

func (s *Fetch_cursorContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Fetch_cursorContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Fetch_cursorContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Fetch_cursorContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Fetch_cursorContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserLOCAL_ID)
}

func (s *Fetch_cursorContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, i)
}

func (s *Fetch_cursorContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Fetch_cursorContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIOR, 0)
}

func (s *Fetch_cursorContext) FIRST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFIRST, 0)
}

func (s *Fetch_cursorContext) LAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserLAST, 0)
}

func (s *Fetch_cursorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fetch_cursorContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserABSOLUTE, 0)
}

func (s *Fetch_cursorContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRELATIVE, 0)
}

func (s *Fetch_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFetch_cursor(s)
	}
}

func (s *Fetch_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFetch_cursor(s)
	}
}

func (p *tsqlParser) Fetch_cursor() (localctx IFetch_cursorContext) {
	localctx = NewFetch_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, tsqlParserRULE_fetch_cursor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1865)
		p.Match(tsqlParserFETCH)
	}
	p.SetState(1875)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext()) == 1 {
		p.SetState(1872)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserNEXT:
			{
				p.SetState(1866)
				p.Match(tsqlParserNEXT)
			}

		case tsqlParserPRIOR:
			{
				p.SetState(1867)
				p.Match(tsqlParserPRIOR)
			}

		case tsqlParserFIRST:
			{
				p.SetState(1868)
				p.Match(tsqlParserFIRST)
			}

		case tsqlParserLAST:
			{
				p.SetState(1869)
				p.Match(tsqlParserLAST)
			}

		case tsqlParserABSOLUTE, tsqlParserRELATIVE:
			p.SetState(1870)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserABSOLUTE || _la == tsqlParserRELATIVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(1871)
				p.expression(0)
			}

		case tsqlParserFROM:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1874)
			p.Match(tsqlParserFROM)
		}

	}
	p.SetState(1878)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1877)
			p.Match(tsqlParserGLOBAL)
		}

	}
	{
		p.SetState(1880)
		p.Cursor_name()
	}
	p.SetState(1890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(1881)
			p.Match(tsqlParserINTO)
		}
		{
			p.SetState(1882)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(1887)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(1883)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(1884)
				p.Match(tsqlParserLOCAL_ID)
			}

			p.SetState(1889)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1893)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1892)
			p.Match(tsqlParserSEMI)
		}

	}

	return localctx
}

// ISet_specialContext is an interface to support dynamic dispatch.
type ISet_specialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_specialContext differentiates from other interfaces.
	IsSet_specialContext()
}

type Set_specialContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_specialContext() *Set_specialContext {
	var p = new(Set_specialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_set_special
	return p
}

func (*Set_specialContext) IsSet_specialContext() {}

func NewSet_specialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_specialContext {
	var p = new(Set_specialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_set_special

	return p
}

func (s *Set_specialContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_specialContext) SET() antlr.TerminalNode {
	return s.GetToken(tsqlParserSET, 0)
}

func (s *Set_specialContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Set_specialContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Set_specialContext) Constant_LOCAL_ID() IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Set_specialContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Set_specialContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSACTION, 0)
}

func (s *Set_specialContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserISOLATION, 0)
}

func (s *Set_specialContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEVEL, 0)
}

func (s *Set_specialContext) READ() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD, 0)
}

func (s *Set_specialContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNCOMMITTED, 0)
}

func (s *Set_specialContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMITTED, 0)
}

func (s *Set_specialContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPEATABLE, 0)
}

func (s *Set_specialContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSNAPSHOT, 0)
}

func (s *Set_specialContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSERIALIZABLE, 0)
}

func (s *Set_specialContext) IDENTITY_INSERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY_INSERT, 0)
}

func (s *Set_specialContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Set_specialContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_NULLS, 0)
}

func (s *Set_specialContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(tsqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Set_specialContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserANSI_PADDING, 0)
}

func (s *Set_specialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_specialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_specialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSet_special(s)
	}
}

func (s *Set_specialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSet_special(s)
	}
}

func (p *tsqlParser) Set_special() (localctx ISet_specialContext) {
	localctx = NewSet_specialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, tsqlParserRULE_set_special)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1938)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1895)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1896)
			p.Id()
		}
		p.SetState(1900)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(1897)
				p.Id()
			}

		case tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
			{
				p.SetState(1898)
				p.Constant_LOCAL_ID()
			}

		case tsqlParserOFF, tsqlParserON:
			{
				p.SetState(1899)
				p.On_off()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1903)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1902)
				p.Match(tsqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1905)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1906)
			p.Match(tsqlParserTRANSACTION)
		}
		{
			p.SetState(1907)
			p.Match(tsqlParserISOLATION)
		}
		{
			p.SetState(1908)
			p.Match(tsqlParserLEVEL)
		}
		p.SetState(1917)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1909)
				p.Match(tsqlParserREAD)
			}
			{
				p.SetState(1910)
				p.Match(tsqlParserUNCOMMITTED)
			}

		case 2:
			{
				p.SetState(1911)
				p.Match(tsqlParserREAD)
			}
			{
				p.SetState(1912)
				p.Match(tsqlParserCOMMITTED)
			}

		case 3:
			{
				p.SetState(1913)
				p.Match(tsqlParserREPEATABLE)
			}
			{
				p.SetState(1914)
				p.Match(tsqlParserREAD)
			}

		case 4:
			{
				p.SetState(1915)
				p.Match(tsqlParserSNAPSHOT)
			}

		case 5:
			{
				p.SetState(1916)
				p.Match(tsqlParserSERIALIZABLE)
			}

		}
		p.SetState(1920)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 297, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1919)
				p.Match(tsqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1922)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1923)
			p.Match(tsqlParserIDENTITY_INSERT)
		}
		{
			p.SetState(1924)
			p.Table_name()
		}
		{
			p.SetState(1925)
			p.On_off()
		}
		p.SetState(1927)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 298, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1926)
				p.Match(tsqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1929)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1930)
			p.Match(tsqlParserANSI_NULLS)
		}
		{
			p.SetState(1931)
			p.On_off()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1932)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1933)
			p.Match(tsqlParserQUOTED_IDENTIFIER)
		}
		{
			p.SetState(1934)
			p.On_off()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1935)
			p.Match(tsqlParserSET)
		}
		{
			p.SetState(1936)
			p.Match(tsqlParserANSI_PADDING)
		}
		{
			p.SetState(1937)
			p.On_off()
		}

	}

	return localctx
}

// IConstant_LOCAL_IDContext is an interface to support dynamic dispatch.
type IConstant_LOCAL_IDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_LOCAL_IDContext differentiates from other interfaces.
	IsConstant_LOCAL_IDContext()
}

type Constant_LOCAL_IDContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_LOCAL_IDContext() *Constant_LOCAL_IDContext {
	var p = new(Constant_LOCAL_IDContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_constant_LOCAL_ID
	return p
}

func (*Constant_LOCAL_IDContext) IsConstant_LOCAL_IDContext() {}

func NewConstant_LOCAL_IDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_LOCAL_IDContext {
	var p = new(Constant_LOCAL_IDContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_constant_LOCAL_ID

	return p
}

func (s *Constant_LOCAL_IDContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_LOCAL_IDContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_LOCAL_IDContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Constant_LOCAL_IDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_LOCAL_IDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_LOCAL_IDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterConstant_LOCAL_ID(s)
	}
}

func (s *Constant_LOCAL_IDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitConstant_LOCAL_ID(s)
	}
}

func (p *tsqlParser) Constant_LOCAL_ID() (localctx IConstant_LOCAL_IDContext) {
	localctx = NewConstant_LOCAL_IDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, tsqlParserRULE_constant_LOCAL_ID)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1942)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1940)
			p.Constant()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1941)
			p.Match(tsqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Binary_operator_expressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewBinary_operator_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Binary_operator_expressionContext {
	var p = new(Binary_operator_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Binary_operator_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Binary_operator_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Binary_operator_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_operator_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Binary_operator_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Binary_operator_expressionContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *Binary_operator_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBinary_operator_expression(s)
	}
}

func (s *Binary_operator_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBinary_operator_expression(s)
	}
}

type Primitive_expressionContext struct {
	*ExpressionContext
}

func NewPrimitive_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Primitive_expressionContext {
	var p = new(Primitive_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Primitive_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_expressionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *Primitive_expressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Primitive_expressionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Primitive_expressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Primitive_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterPrimitive_expression(s)
	}
}

func (s *Primitive_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitPrimitive_expression(s)
	}
}

type Bracket_expressionContext struct {
	*ExpressionContext
}

func NewBracket_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Bracket_expressionContext {
	var p = new(Bracket_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Bracket_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bracket_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBracket_expression(s)
	}
}

func (s *Bracket_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBracket_expression(s)
	}
}

type Unary_operator_expressionContext struct {
	*ExpressionContext
	op antlr.Token
}

func NewUnary_operator_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Unary_operator_expressionContext {
	var p = new(Unary_operator_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Unary_operator_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Unary_operator_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Unary_operator_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operator_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Unary_operator_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnary_operator_expression(s)
	}
}

func (s *Unary_operator_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnary_operator_expression(s)
	}
}

type Function_call_expressionContext struct {
	*ExpressionContext
}

func NewFunction_call_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Function_call_expressionContext {
	var p = new(Function_call_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Function_call_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expressionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Function_call_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_call_expressionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOLLATE, 0)
}

func (s *Function_call_expressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Function_call_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFunction_call_expression(s)
	}
}

func (s *Function_call_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFunction_call_expression(s)
	}
}

type Case_expressionContext struct {
	*ExpressionContext
	caseExpr IExpressionContext
	elseExpr IExpressionContext
}

func NewCase_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Case_expressionContext {
	var p = new(Case_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Case_expressionContext) GetCaseExpr() IExpressionContext { return s.caseExpr }

func (s *Case_expressionContext) GetElseExpr() IExpressionContext { return s.elseExpr }

func (s *Case_expressionContext) SetCaseExpr(v IExpressionContext) { s.caseExpr = v }

func (s *Case_expressionContext) SetElseExpr(v IExpressionContext) { s.elseExpr = v }

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCASE, 0)
}

func (s *Case_expressionContext) END() antlr.TerminalNode {
	return s.GetToken(tsqlParserEND, 0)
}

func (s *Case_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_expressionContext) AllSwitch_section() []ISwitch_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISwitch_sectionContext)(nil)).Elem())
	var tst = make([]ISwitch_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISwitch_sectionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_section(i int) ISwitch_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitch_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISwitch_sectionContext)
}

func (s *Case_expressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserELSE, 0)
}

func (s *Case_expressionContext) AllSwitch_search_condition_section() []ISwitch_search_condition_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISwitch_search_condition_sectionContext)(nil)).Elem())
	var tst = make([]ISwitch_search_condition_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISwitch_search_condition_sectionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_search_condition_section(i int) ISwitch_search_condition_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitch_search_condition_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISwitch_search_condition_sectionContext)
}

func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCase_expression(s)
	}
}

type Column_ref_expressionContext struct {
	*ExpressionContext
}

func NewColumn_ref_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Column_ref_expressionContext {
	var p = new(Column_ref_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Column_ref_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_ref_expressionContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Column_ref_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_ref_expression(s)
	}
}

func (s *Column_ref_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_ref_expression(s)
	}
}

type Subquery_expressionContext struct {
	*ExpressionContext
}

func NewSubquery_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Subquery_expressionContext {
	var p = new(Subquery_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Subquery_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subquery_expressionContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Subquery_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSubquery_expression(s)
	}
}

func (s *Subquery_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSubquery_expression(s)
	}
}

type Over_clause_expressionContext struct {
	*ExpressionContext
}

func NewOver_clause_expressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Over_clause_expressionContext {
	var p = new(Over_clause_expressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *Over_clause_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clause_expressionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Over_clause_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOver_clause_expression(s)
	}
}

func (s *Over_clause_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOver_clause_expression(s)
	}
}

func (p *tsqlParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *tsqlParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 170
	p.EnterRecursionRule(localctx, 170, tsqlParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1989)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 305, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1945)
			p.Match(tsqlParserDEFAULT)
		}

	case 2:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1946)
			p.Match(tsqlParserNULL)
		}

	case 3:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1947)
			p.Match(tsqlParserLOCAL_ID)
		}

	case 4:
		localctx = NewPrimitive_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1948)
			p.Constant()
		}

	case 5:
		localctx = NewFunction_call_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1949)
			p.Function_call()
		}

	case 6:
		localctx = NewCase_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1950)
			p.Match(tsqlParserCASE)
		}
		{
			p.SetState(1951)

			var _x = p.expression(0)

			localctx.(*Case_expressionContext).caseExpr = _x
		}
		p.SetState(1953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == tsqlParserWHEN {
			{
				p.SetState(1952)
				p.Switch_section()
			}

			p.SetState(1955)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserELSE {
			{
				p.SetState(1957)
				p.Match(tsqlParserELSE)
			}
			{
				p.SetState(1958)

				var _x = p.expression(0)

				localctx.(*Case_expressionContext).elseExpr = _x
			}

		}
		{
			p.SetState(1961)
			p.Match(tsqlParserEND)
		}

	case 7:
		localctx = NewCase_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1963)
			p.Match(tsqlParserCASE)
		}
		p.SetState(1965)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == tsqlParserWHEN {
			{
				p.SetState(1964)
				p.Switch_search_condition_section()
			}

			p.SetState(1967)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1971)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserELSE {
			{
				p.SetState(1969)
				p.Match(tsqlParserELSE)
			}
			{
				p.SetState(1970)

				var _x = p.expression(0)

				localctx.(*Case_expressionContext).elseExpr = _x
			}

		}
		{
			p.SetState(1973)
			p.Match(tsqlParserEND)
		}

	case 8:
		localctx = NewColumn_ref_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1975)
			p.Full_column_name()
		}

	case 9:
		localctx = NewBracket_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1976)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1977)
			p.expression(0)
		}
		{
			p.SetState(1978)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubquery_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1980)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(1981)
			p.Subquery()
		}
		{
			p.SetState(1982)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewUnary_operator_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1984)
			p.Match(tsqlParserBIT_NOT)
		}
		{
			p.SetState(1985)
			p.expression(6)
		}

	case 12:
		localctx = NewUnary_operator_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(1986)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Unary_operator_expressionContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserPLUS || _la == tsqlParserMINUS) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Unary_operator_expressionContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(1987)
			p.expression(4)
		}

	case 13:
		localctx = NewOver_clause_expressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1988)
			p.Over_clause()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2006)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 307, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2004)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinary_operator_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1991)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(1992)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Binary_operator_expressionContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-431)&-(0x1f+1)) == 0 && ((1<<uint((_la-431)))&((1<<(tsqlParserSTAR-431))|(1<<(tsqlParserDIVIDE-431))|(1<<(tsqlParserMODULE-431)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Binary_operator_expressionContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1993)
					p.expression(6)
				}

			case 2:
				localctx = NewBinary_operator_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1994)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(1995)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Binary_operator_expressionContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-434)&-(0x1f+1)) == 0 && ((1<<uint((_la-434)))&((1<<(tsqlParserPLUS-434))|(1<<(tsqlParserMINUS-434))|(1<<(tsqlParserBIT_OR-434))|(1<<(tsqlParserBIT_AND-434))|(1<<(tsqlParserBIT_XOR-434)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Binary_operator_expressionContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1996)
					p.expression(4)
				}

			case 3:
				localctx = NewBinary_operator_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(1997)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1998)
					p.Comparison_operator()
				}
				{
					p.SetState(1999)
					p.expression(3)
				}

			case 4:
				localctx = NewFunction_call_expressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, tsqlParserRULE_expression)
				p.SetState(2001)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(2002)
					p.Match(tsqlParserCOLLATE)
				}
				{
					p.SetState(2003)
					p.Id()
				}

			}

		}
		p.SetState(2008)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 307, p.GetParserRuleContext())
	}

	return localctx
}

// IConstant_expressionContext is an interface to support dynamic dispatch.
type IConstant_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_expressionContext differentiates from other interfaces.
	IsConstant_expressionContext()
}

type Constant_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_expressionContext() *Constant_expressionContext {
	var p = new(Constant_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_constant_expression
	return p
}

func (*Constant_expressionContext) IsConstant_expressionContext() {}

func NewConstant_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_expressionContext {
	var p = new(Constant_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_constant_expression

	return p
}

func (s *Constant_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_expressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Constant_expressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_expressionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Constant_expressionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Constant_expressionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Constant_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterConstant_expression(s)
	}
}

func (s *Constant_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitConstant_expression(s)
	}
}

func (p *tsqlParser) Constant_expression() (localctx IConstant_expressionContext) {
	localctx = NewConstant_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, tsqlParserRULE_constant_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2017)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserNULL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2009)
			p.Match(tsqlParserNULL)
		}

	case tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2010)
			p.Constant()
		}

	case tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserLEFT, tsqlParserNULLIF, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2011)
			p.Function_call()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2012)
			p.Match(tsqlParserLOCAL_ID)
		}

	case tsqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2013)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2014)
			p.Constant_expression()
		}
		{
			p.SetState(2015)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubqueryContext is an interface to support dynamic dispatch.
type ISubqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubqueryContext differentiates from other interfaces.
	IsSubqueryContext()
}

type SubqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryContext() *SubqueryContext {
	var p = new(SubqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_subquery
	return p
}

func (*SubqueryContext) IsSubqueryContext() {}

func NewSubqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryContext {
	var p = new(SubqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_subquery

	return p
}

func (s *SubqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSubquery(s)
	}
}

func (p *tsqlParser) Subquery() (localctx ISubqueryContext) {
	localctx = NewSubqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, tsqlParserRULE_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2019)
		p.Select_statement()
	}

	return localctx
}

// IWith_expressionContext is an interface to support dynamic dispatch.
type IWith_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_expressionContext differentiates from other interfaces.
	IsWith_expressionContext()
}

type With_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expressionContext() *With_expressionContext {
	var p = new(With_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_with_expression
	return p
}

func (*With_expressionContext) IsWith_expressionContext() {}

func NewWith_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expressionContext {
	var p = new(With_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_with_expression

	return p
}

func (s *With_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expressionContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *With_expressionContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *With_expressionContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *With_expressionContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(tsqlParserXMLNAMESPACES, 0)
}

func (s *With_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWith_expression(s)
	}
}

func (s *With_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWith_expression(s)
	}
}

func (p *tsqlParser) With_expression() (localctx IWith_expressionContext) {
	localctx = NewWith_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, tsqlParserRULE_with_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2021)
		p.Match(tsqlParserWITH)
	}
	p.SetState(2024)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 309, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2022)
			p.Match(tsqlParserXMLNAMESPACES)
		}
		{
			p.SetState(2023)
			p.Match(tsqlParserCOMMA)
		}

	}
	{
		p.SetState(2026)
		p.Common_table_expression()
	}
	p.SetState(2031)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2027)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2028)
			p.Common_table_expression()
		}

		p.SetState(2033)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExpression_name returns the expression_name rule contexts.
	GetExpression_name() IIdContext

	// SetExpression_name sets the expression_name rule contexts.
	SetExpression_name(IIdContext)

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	expression_name IIdContext
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) GetExpression_name() IIdContext { return s.expression_name }

func (s *Common_table_expressionContext) SetExpression_name(v IIdContext) { s.expression_name = v }

func (s *Common_table_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Common_table_expressionContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Common_table_expressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Common_table_expressionContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (p *tsqlParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, tsqlParserRULE_common_table_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2034)

		var _x = p.Id()

		localctx.(*Common_table_expressionContext).expression_name = _x
	}
	p.SetState(2039)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserLR_BRACKET {
		{
			p.SetState(2035)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2036)
			p.Column_name_list()
		}
		{
			p.SetState(2037)
			p.Match(tsqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(2041)
		p.Match(tsqlParserAS)
	}
	{
		p.SetState(2042)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2043)
		p.Select_statement()
	}
	{
		p.SetState(2044)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IUpdate_elemContext is an interface to support dynamic dispatch.
type IUpdate_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUdt_column_name returns the udt_column_name rule contexts.
	GetUdt_column_name() IIdContext

	// GetMethod_name returns the method_name rule contexts.
	GetMethod_name() IIdContext

	// SetUdt_column_name sets the udt_column_name rule contexts.
	SetUdt_column_name(IIdContext)

	// SetMethod_name sets the method_name rule contexts.
	SetMethod_name(IIdContext)

	// IsUpdate_elemContext differentiates from other interfaces.
	IsUpdate_elemContext()
}

type Update_elemContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	udt_column_name IIdContext
	method_name     IIdContext
}

func NewEmptyUpdate_elemContext() *Update_elemContext {
	var p = new(Update_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_update_elem
	return p
}

func (*Update_elemContext) IsUpdate_elemContext() {}

func NewUpdate_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_elemContext {
	var p = new(Update_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_update_elem

	return p
}

func (s *Update_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_elemContext) GetUdt_column_name() IIdContext { return s.udt_column_name }

func (s *Update_elemContext) GetMethod_name() IIdContext { return s.method_name }

func (s *Update_elemContext) SetUdt_column_name(v IIdContext) { s.udt_column_name = v }

func (s *Update_elemContext) SetMethod_name(v IIdContext) { s.method_name = v }

func (s *Update_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Update_elemContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Update_elemContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Update_elemContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Update_elemContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Update_elemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Update_elemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Update_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUpdate_elem(s)
	}
}

func (s *Update_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUpdate_elem(s)
	}
}

func (p *tsqlParser) Update_elem() (localctx IUpdate_elemContext) {
	localctx = NewUpdate_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, tsqlParserRULE_update_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2062)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2048)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(2046)
				p.Full_column_name()
			}

		case tsqlParserLOCAL_ID:
			{
				p.SetState(2047)
				p.Match(tsqlParserLOCAL_ID)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2052)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserEQUAL:
			{
				p.SetState(2050)
				p.Match(tsqlParserEQUAL)
			}

		case tsqlParserPLUS_ASSIGN, tsqlParserMINUS_ASSIGN, tsqlParserMULT_ASSIGN, tsqlParserDIV_ASSIGN, tsqlParserMOD_ASSIGN, tsqlParserAND_ASSIGN, tsqlParserXOR_ASSIGN, tsqlParserOR_ASSIGN:
			{
				p.SetState(2051)
				p.Assignment_operator()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2054)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2055)

			var _x = p.Id()

			localctx.(*Update_elemContext).udt_column_name = _x
		}
		{
			p.SetState(2056)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2057)

			var _x = p.Id()

			localctx.(*Update_elemContext).method_name = _x
		}
		{
			p.SetState(2058)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2059)
			p.Expression_list()
		}
		{
			p.SetState(2060)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISearch_condition_listContext is an interface to support dynamic dispatch.
type ISearch_condition_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_listContext differentiates from other interfaces.
	IsSearch_condition_listContext()
}

type Search_condition_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_listContext() *Search_condition_listContext {
	var p = new(Search_condition_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_search_condition_list
	return p
}

func (*Search_condition_listContext) IsSearch_condition_listContext() {}

func NewSearch_condition_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_listContext {
	var p = new(Search_condition_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_search_condition_list

	return p
}

func (s *Search_condition_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_listContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Search_condition_listContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Search_condition_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_condition_list(s)
	}
}

func (s *Search_condition_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_condition_list(s)
	}
}

func (p *tsqlParser) Search_condition_list() (localctx ISearch_condition_listContext) {
	localctx = NewSearch_condition_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, tsqlParserRULE_search_condition_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2064)
		p.Search_condition()
	}
	p.SetState(2069)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2065)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2066)
			p.Search_condition()
		}

		p.SetState(2071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_conditionContext is an interface to support dynamic dispatch.
type ISearch_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_conditionContext differentiates from other interfaces.
	IsSearch_conditionContext()
}

type Search_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_conditionContext() *Search_conditionContext {
	var p = new(Search_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_search_condition
	return p
}

func (*Search_conditionContext) IsSearch_conditionContext() {}

func NewSearch_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_conditionContext {
	var p = new(Search_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_search_condition

	return p
}

func (s *Search_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_conditionContext) AllSearch_condition_and() []ISearch_condition_andContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_condition_andContext)(nil)).Elem())
	var tst = make([]ISearch_condition_andContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_condition_andContext)
		}
	}

	return tst
}

func (s *Search_conditionContext) Search_condition_and(i int) ISearch_condition_andContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_andContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_andContext)
}

func (s *Search_conditionContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserOR)
}

func (s *Search_conditionContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserOR, i)
}

func (s *Search_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_condition(s)
	}
}

func (s *Search_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_condition(s)
	}
}

func (p *tsqlParser) Search_condition() (localctx ISearch_conditionContext) {
	localctx = NewSearch_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, tsqlParserRULE_search_condition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2072)
		p.Search_condition_and()
	}
	p.SetState(2077)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserOR {
		{
			p.SetState(2073)
			p.Match(tsqlParserOR)
		}
		{
			p.SetState(2074)
			p.Search_condition_and()
		}

		p.SetState(2079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_condition_andContext is an interface to support dynamic dispatch.
type ISearch_condition_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_andContext differentiates from other interfaces.
	IsSearch_condition_andContext()
}

type Search_condition_andContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_andContext() *Search_condition_andContext {
	var p = new(Search_condition_andContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_search_condition_and
	return p
}

func (*Search_condition_andContext) IsSearch_condition_andContext() {}

func NewSearch_condition_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_andContext {
	var p = new(Search_condition_andContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_search_condition_and

	return p
}

func (s *Search_condition_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_andContext) AllSearch_condition_not() []ISearch_condition_notContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_condition_notContext)(nil)).Elem())
	var tst = make([]ISearch_condition_notContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_condition_notContext)
		}
	}

	return tst
}

func (s *Search_condition_andContext) Search_condition_not(i int) ISearch_condition_notContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_notContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_notContext)
}

func (s *Search_condition_andContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserAND)
}

func (s *Search_condition_andContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserAND, i)
}

func (s *Search_condition_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_condition_and(s)
	}
}

func (s *Search_condition_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_condition_and(s)
	}
}

func (p *tsqlParser) Search_condition_and() (localctx ISearch_condition_andContext) {
	localctx = NewSearch_condition_andContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, tsqlParserRULE_search_condition_and)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2080)
		p.Search_condition_not()
	}
	p.SetState(2085)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserAND {
		{
			p.SetState(2081)
			p.Match(tsqlParserAND)
		}
		{
			p.SetState(2082)
			p.Search_condition_not()
		}

		p.SetState(2087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_condition_notContext is an interface to support dynamic dispatch.
type ISearch_condition_notContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_notContext differentiates from other interfaces.
	IsSearch_condition_notContext()
}

type Search_condition_notContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_notContext() *Search_condition_notContext {
	var p = new(Search_condition_notContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_search_condition_not
	return p
}

func (*Search_condition_notContext) IsSearch_condition_notContext() {}

func NewSearch_condition_notContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_notContext {
	var p = new(Search_condition_notContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_search_condition_not

	return p
}

func (s *Search_condition_notContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_notContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Search_condition_notContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Search_condition_notContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_notContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_notContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSearch_condition_not(s)
	}
}

func (s *Search_condition_notContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSearch_condition_not(s)
	}
}

func (p *tsqlParser) Search_condition_not() (localctx ISearch_condition_notContext) {
	localctx = NewSearch_condition_notContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, tsqlParserRULE_search_condition_not)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2089)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOT {
		{
			p.SetState(2088)
			p.Match(tsqlParserNOT)
		}

	}
	{
		p.SetState(2091)
		p.Predicate()
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXISTS, 0)
}

func (s *PredicateContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *PredicateContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PredicateContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PredicateContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *PredicateContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *PredicateContext) SOME() antlr.TerminalNode {
	return s.GetToken(tsqlParserSOME, 0)
}

func (s *PredicateContext) ANY() antlr.TerminalNode {
	return s.GetToken(tsqlParserANY, 0)
}

func (s *PredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBETWEEN, 0)
}

func (s *PredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(tsqlParserAND, 0)
}

func (s *PredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *PredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(tsqlParserIN, 0)
}

func (s *PredicateContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *PredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(tsqlParserLIKE, 0)
}

func (s *PredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserESCAPE, 0)
}

func (s *PredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(tsqlParserIS, 0)
}

func (s *PredicateContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *PredicateContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *PredicateContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterPredicate(s)
	}
}

func (s *PredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitPredicate(s)
	}
}

func (p *tsqlParser) Predicate() (localctx IPredicateContext) {
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, tsqlParserRULE_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2149)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 324, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2093)
			p.Match(tsqlParserEXISTS)
		}
		{
			p.SetState(2094)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2095)
			p.Subquery()
		}
		{
			p.SetState(2096)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2098)
			p.expression(0)
		}
		{
			p.SetState(2099)
			p.Comparison_operator()
		}
		{
			p.SetState(2100)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2102)
			p.expression(0)
		}
		{
			p.SetState(2103)
			p.Comparison_operator()
		}
		p.SetState(2104)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserALL || _la == tsqlParserANY || _la == tsqlParserSOME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2105)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2106)
			p.Subquery()
		}
		{
			p.SetState(2107)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2109)
			p.expression(0)
		}
		p.SetState(2111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(2110)
				p.Match(tsqlParserNOT)
			}

		}
		{
			p.SetState(2113)
			p.Match(tsqlParserBETWEEN)
		}
		{
			p.SetState(2114)
			p.expression(0)
		}
		{
			p.SetState(2115)
			p.Match(tsqlParserAND)
		}
		{
			p.SetState(2116)
			p.expression(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2118)
			p.expression(0)
		}
		p.SetState(2120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(2119)
				p.Match(tsqlParserNOT)
			}

		}
		{
			p.SetState(2122)
			p.Match(tsqlParserIN)
		}
		{
			p.SetState(2123)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2126)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 321, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2124)
				p.Subquery()
			}

		case 2:
			{
				p.SetState(2125)
				p.Expression_list()
			}

		}
		{
			p.SetState(2128)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2130)
			p.expression(0)
		}
		p.SetState(2132)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserNOT {
			{
				p.SetState(2131)
				p.Match(tsqlParserNOT)
			}

		}
		{
			p.SetState(2134)
			p.Match(tsqlParserLIKE)
		}
		{
			p.SetState(2135)
			p.expression(0)
		}
		p.SetState(2138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserESCAPE {
			{
				p.SetState(2136)
				p.Match(tsqlParserESCAPE)
			}
			{
				p.SetState(2137)
				p.expression(0)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2140)
			p.expression(0)
		}
		{
			p.SetState(2141)
			p.Match(tsqlParserIS)
		}
		{
			p.SetState(2142)
			p.Null_notnull()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2144)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2145)
			p.Search_condition()
		}
		{
			p.SetState(2146)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2148)
			p.Match(tsqlParserDECIMAL)
		}

	}

	return localctx
}

// IQuery_expressionContext is an interface to support dynamic dispatch.
type IQuery_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_expressionContext differentiates from other interfaces.
	IsQuery_expressionContext()
}

type Query_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_expressionContext() *Query_expressionContext {
	var p = new(Query_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_query_expression
	return p
}

func (*Query_expressionContext) IsQuery_expressionContext() {}

func NewQuery_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_expressionContext {
	var p = new(Query_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_query_expression

	return p
}

func (s *Query_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_expressionContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *Query_expressionContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Query_expressionContext) AllUnion() []IUnionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionContext)(nil)).Elem())
	var tst = make([]IUnionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionContext)
		}
	}

	return tst
}

func (s *Query_expressionContext) Union(i int) IUnionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionContext)
}

func (s *Query_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterQuery_expression(s)
	}
}

func (s *Query_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitQuery_expression(s)
	}
}

func (p *tsqlParser) Query_expression() (localctx IQuery_expressionContext) {
	localctx = NewQuery_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, tsqlParserRULE_query_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2156)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserSELECT:
		{
			p.SetState(2151)
			p.Query_specification()
		}

	case tsqlParserLR_BRACKET:
		{
			p.SetState(2152)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2153)
			p.Query_expression()
		}
		{
			p.SetState(2154)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2161)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2158)
				p.Union()
			}

		}
		p.SetState(2163)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext())
	}

	return localctx
}

// IUnionContext is an interface to support dynamic dispatch.
type IUnionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionContext differentiates from other interfaces.
	IsUnionContext()
}

type UnionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionContext() *UnionContext {
	var p = new(UnionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_union
	return p
}

func (*UnionContext) IsUnionContext() {}

func NewUnionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionContext {
	var p = new(UnionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_union

	return p
}

func (s *UnionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNION, 0)
}

func (s *UnionContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXCEPT, 0)
}

func (s *UnionContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTERSECT, 0)
}

func (s *UnionContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *UnionContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *UnionContext) AllQuery_expression() []IQuery_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem())
	var tst = make([]IQuery_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQuery_expressionContext)
		}
	}

	return tst
}

func (s *UnionContext) Query_expression(i int) IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterUnion(s)
	}
}

func (s *UnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitUnion(s)
	}
}

func (p *tsqlParser) Union() (localctx IUnionContext) {
	localctx = NewUnionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, tsqlParserRULE_union)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2170)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNION:
		{
			p.SetState(2164)
			p.Match(tsqlParserUNION)
		}
		p.SetState(2166)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserALL {
			{
				p.SetState(2165)
				p.Match(tsqlParserALL)
			}

		}

	case tsqlParserEXCEPT:
		{
			p.SetState(2168)
			p.Match(tsqlParserEXCEPT)
		}

	case tsqlParserINTERSECT:
		{
			p.SetState(2169)
			p.Match(tsqlParserINTERSECT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2181)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserSELECT:
		{
			p.SetState(2172)
			p.Query_specification()
		}

	case tsqlParserLR_BRACKET:
		p.SetState(2177)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2173)
					p.Match(tsqlParserLR_BRACKET)
				}
				{
					p.SetState(2174)
					p.Query_expression()
				}
				{
					p.SetState(2175)
					p.Match(tsqlParserRR_BRACKET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2179)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 329, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQuery_specificationContext is an interface to support dynamic dispatch.
type IQuery_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() ISearch_conditionContext

	// GetHaving returns the having rule contexts.
	GetHaving() ISearch_conditionContext

	// SetWhere sets the where rule contexts.
	SetWhere(ISearch_conditionContext)

	// SetHaving sets the having rule contexts.
	SetHaving(ISearch_conditionContext)

	// IsQuery_specificationContext differentiates from other interfaces.
	IsQuery_specificationContext()
}

type Query_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	where  ISearch_conditionContext
	having ISearch_conditionContext
}

func NewEmptyQuery_specificationContext() *Query_specificationContext {
	var p = new(Query_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_query_specification
	return p
}

func (*Query_specificationContext) IsQuery_specificationContext() {}

func NewQuery_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_specificationContext {
	var p = new(Query_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_query_specification

	return p
}

func (s *Query_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_specificationContext) GetWhere() ISearch_conditionContext { return s.where }

func (s *Query_specificationContext) GetHaving() ISearch_conditionContext { return s.having }

func (s *Query_specificationContext) SetWhere(v ISearch_conditionContext) { s.where = v }

func (s *Query_specificationContext) SetHaving(v ISearch_conditionContext) { s.having = v }

func (s *Query_specificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELECT, 0)
}

func (s *Query_specificationContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Query_specificationContext) TOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserTOP, 0)
}

func (s *Query_specificationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Query_specificationContext) INTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserINTO, 0)
}

func (s *Query_specificationContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Query_specificationContext) FROM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFROM, 0)
}

func (s *Query_specificationContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Query_specificationContext) WHERE() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHERE, 0)
}

func (s *Query_specificationContext) GROUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUP, 0)
}

func (s *Query_specificationContext) BY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBY, 0)
}

func (s *Query_specificationContext) AllGroup_by_item() []IGroup_by_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem())
	var tst = make([]IGroup_by_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroup_by_itemContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Group_by_item(i int) IGroup_by_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroup_by_itemContext)
}

func (s *Query_specificationContext) HAVING() antlr.TerminalNode {
	return s.GetToken(tsqlParserHAVING, 0)
}

func (s *Query_specificationContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *Query_specificationContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISTINCT, 0)
}

func (s *Query_specificationContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Query_specificationContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserPERCENT, 0)
}

func (s *Query_specificationContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Query_specificationContext) TIES() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIES, 0)
}

func (s *Query_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterQuery_specification(s)
	}
}

func (s *Query_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitQuery_specification(s)
	}
}

func (p *tsqlParser) Query_specification() (localctx IQuery_specificationContext) {
	localctx = NewQuery_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, tsqlParserRULE_query_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2183)
		p.Match(tsqlParserSELECT)
	}
	p.SetState(2185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserALL || _la == tsqlParserDISTINCT {
		p.SetState(2184)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserALL || _la == tsqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2196)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserTOP {
		{
			p.SetState(2187)
			p.Match(tsqlParserTOP)
		}
		{
			p.SetState(2188)
			p.expression(0)
		}
		p.SetState(2190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPERCENT {
			{
				p.SetState(2189)
				p.Match(tsqlParserPERCENT)
			}

		}
		p.SetState(2194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserWITH {
			{
				p.SetState(2192)
				p.Match(tsqlParserWITH)
			}
			{
				p.SetState(2193)
				p.Match(tsqlParserTIES)
			}

		}

	}
	{
		p.SetState(2198)
		p.Select_list()
	}
	p.SetState(2201)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserINTO {
		{
			p.SetState(2199)
			p.Match(tsqlParserINTO)
		}
		{
			p.SetState(2200)
			p.Table_name()
		}

	}
	p.SetState(2205)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFROM {
		{
			p.SetState(2203)
			p.Match(tsqlParserFROM)
		}
		{
			p.SetState(2204)
			p.Table_sources()
		}

	}
	p.SetState(2209)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 337, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2207)
			p.Match(tsqlParserWHERE)
		}
		{
			p.SetState(2208)

			var _x = p.Search_condition()

			localctx.(*Query_specificationContext).where = _x
		}

	}
	p.SetState(2221)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2211)
			p.Match(tsqlParserGROUP)
		}
		{
			p.SetState(2212)
			p.Match(tsqlParserBY)
		}
		{
			p.SetState(2213)
			p.Group_by_item()
		}
		p.SetState(2218)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 338, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2214)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2215)
					p.Group_by_item()
				}

			}
			p.SetState(2220)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 338, p.GetParserRuleContext())
		}

	}
	p.SetState(2225)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 340, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2223)
			p.Match(tsqlParserHAVING)
		}
		{
			p.SetState(2224)

			var _x = p.Search_condition()

			localctx.(*Query_specificationContext).having = _x
		}

	}

	return localctx
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_order_by_clause
	return p
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(tsqlParserORDER, 0)
}

func (s *Order_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBY, 0)
}

func (s *Order_by_clauseContext) AllOrder_by_expression() []IOrder_by_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem())
	var tst = make([]IOrder_by_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrder_by_expressionContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Order_by_expression(i int) IOrder_by_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expressionContext)
}

func (s *Order_by_clauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFFSET, 0)
}

func (s *Order_by_clauseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_clauseContext) AllROW() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserROW)
}

func (s *Order_by_clauseContext) ROW(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, i)
}

func (s *Order_by_clauseContext) AllROWS() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserROWS)
}

func (s *Order_by_clauseContext) ROWS(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, i)
}

func (s *Order_by_clauseContext) FETCH() antlr.TerminalNode {
	return s.GetToken(tsqlParserFETCH, 0)
}

func (s *Order_by_clauseContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Order_by_clauseContext) FIRST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFIRST, 0)
}

func (s *Order_by_clauseContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (p *tsqlParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, tsqlParserRULE_order_by_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2227)
		p.Match(tsqlParserORDER)
	}
	{
		p.SetState(2228)
		p.Match(tsqlParserBY)
	}
	{
		p.SetState(2229)
		p.Order_by_expression()
	}
	p.SetState(2234)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2230)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2231)
				p.Order_by_expression()
			}

		}
		p.SetState(2236)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext())
	}
	p.SetState(2248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 343, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2237)
			p.Match(tsqlParserOFFSET)
		}
		{
			p.SetState(2238)
			p.expression(0)
		}
		p.SetState(2239)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserROW || _la == tsqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(2246)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 342, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2240)
				p.Match(tsqlParserFETCH)
			}
			p.SetState(2241)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFIRST || _la == tsqlParserNEXT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(2242)
				p.expression(0)
			}
			p.SetState(2243)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserROW || _la == tsqlParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(2244)
				p.Match(tsqlParserONLY)
			}

		}

	}

	return localctx
}

// IFor_clauseContext is an interface to support dynamic dispatch.
type IFor_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_clauseContext differentiates from other interfaces.
	IsFor_clauseContext()
}

type For_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_clauseContext() *For_clauseContext {
	var p = new(For_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_for_clause
	return p
}

func (*For_clauseContext) IsFor_clauseContext() {}

func NewFor_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_clauseContext {
	var p = new(For_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_for_clause

	return p
}

func (s *For_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *For_clauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *For_clauseContext) BROWSE() antlr.TerminalNode {
	return s.GetToken(tsqlParserBROWSE, 0)
}

func (s *For_clauseContext) XML() antlr.TerminalNode {
	return s.GetToken(tsqlParserXML, 0)
}

func (s *For_clauseContext) AUTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO, 0)
}

func (s *For_clauseContext) Xml_common_directives() IXml_common_directivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_common_directivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXml_common_directivesContext)
}

func (s *For_clauseContext) PATH() antlr.TerminalNode {
	return s.GetToken(tsqlParserPATH, 0)
}

func (s *For_clauseContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *For_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFor_clause(s)
	}
}

func (s *For_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFor_clause(s)
	}
}

func (p *tsqlParser) For_clause() (localctx IFor_clauseContext) {
	localctx = NewFor_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, tsqlParserRULE_for_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2269)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 347, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2250)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2251)
			p.Match(tsqlParserBROWSE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2252)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2253)
			p.Match(tsqlParserXML)
		}
		{
			p.SetState(2254)
			p.Match(tsqlParserAUTO)
		}
		p.SetState(2256)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2255)
				p.Xml_common_directives()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2258)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2259)
			p.Match(tsqlParserXML)
		}
		{
			p.SetState(2260)
			p.Match(tsqlParserPATH)
		}
		p.SetState(2264)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 345, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2261)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(2262)
				p.Match(tsqlParserSTRING)
			}
			{
				p.SetState(2263)
				p.Match(tsqlParserRR_BRACKET)
			}

		}
		p.SetState(2267)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 346, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2266)
				p.Xml_common_directives()
			}

		}

	}

	return localctx
}

// IXml_common_directivesContext is an interface to support dynamic dispatch.
type IXml_common_directivesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXml_common_directivesContext differentiates from other interfaces.
	IsXml_common_directivesContext()
}

type Xml_common_directivesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXml_common_directivesContext() *Xml_common_directivesContext {
	var p = new(Xml_common_directivesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_xml_common_directives
	return p
}

func (*Xml_common_directivesContext) IsXml_common_directivesContext() {}

func NewXml_common_directivesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_common_directivesContext {
	var p = new(Xml_common_directivesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_xml_common_directives

	return p
}

func (s *Xml_common_directivesContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_common_directivesContext) BINARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY, 0)
}

func (s *Xml_common_directivesContext) BASE64() antlr.TerminalNode {
	return s.GetToken(tsqlParserBASE64, 0)
}

func (s *Xml_common_directivesContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Xml_common_directivesContext) ROOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserROOT, 0)
}

func (s *Xml_common_directivesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_common_directivesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xml_common_directivesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterXml_common_directives(s)
	}
}

func (s *Xml_common_directivesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitXml_common_directives(s)
	}
}

func (p *tsqlParser) Xml_common_directives() (localctx IXml_common_directivesContext) {
	localctx = NewXml_common_directivesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, tsqlParserRULE_xml_common_directives)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2271)
		p.Match(tsqlParserCOMMA)
	}
	p.SetState(2276)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserBINARY:
		{
			p.SetState(2272)
			p.Match(tsqlParserBINARY)
		}
		{
			p.SetState(2273)
			p.Match(tsqlParserBASE64)
		}

	case tsqlParserTYPE:
		{
			p.SetState(2274)
			p.Match(tsqlParserTYPE)
		}

	case tsqlParserROOT:
		{
			p.SetState(2275)
			p.Match(tsqlParserROOT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOrder_by_expressionContext is an interface to support dynamic dispatch.
type IOrder_by_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_expressionContext differentiates from other interfaces.
	IsOrder_by_expressionContext()
}

type Order_by_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expressionContext() *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_order_by_expression
	return p
}

func (*Order_by_expressionContext) IsOrder_by_expressionContext() {}

func NewOrder_by_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_order_by_expression

	return p
}

func (s *Order_by_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_expressionContext) ASC() antlr.TerminalNode {
	return s.GetToken(tsqlParserASC, 0)
}

func (s *Order_by_expressionContext) DESC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDESC, 0)
}

func (s *Order_by_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOrder_by_expression(s)
	}
}

func (s *Order_by_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOrder_by_expression(s)
	}
}

func (p *tsqlParser) Order_by_expression() (localctx IOrder_by_expressionContext) {
	localctx = NewOrder_by_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, tsqlParserRULE_order_by_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2278)
		p.expression(0)
	}
	p.SetState(2280)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserASC || _la == tsqlParserDESC {
		p.SetState(2279)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserASC || _la == tsqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IGroup_by_itemContext is an interface to support dynamic dispatch.
type IGroup_by_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_by_itemContext differentiates from other interfaces.
	IsGroup_by_itemContext()
}

type Group_by_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_itemContext() *Group_by_itemContext {
	var p = new(Group_by_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_group_by_item
	return p
}

func (*Group_by_itemContext) IsGroup_by_itemContext() {}

func NewGroup_by_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_itemContext {
	var p = new(Group_by_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_group_by_item

	return p
}

func (s *Group_by_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Group_by_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterGroup_by_item(s)
	}
}

func (s *Group_by_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitGroup_by_item(s)
	}
}

func (p *tsqlParser) Group_by_item() (localctx IGroup_by_itemContext) {
	localctx = NewGroup_by_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, tsqlParserRULE_group_by_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2282)
		p.expression(0)
	}

	return localctx
}

// IOption_clauseContext is an interface to support dynamic dispatch.
type IOption_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOption_clauseContext differentiates from other interfaces.
	IsOption_clauseContext()
}

type Option_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOption_clauseContext() *Option_clauseContext {
	var p = new(Option_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_option_clause
	return p
}

func (*Option_clauseContext) IsOption_clauseContext() {}

func NewOption_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_clauseContext {
	var p = new(Option_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_option_clause

	return p
}

func (s *Option_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_clauseContext) OPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTION, 0)
}

func (s *Option_clauseContext) AllOption() []IOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptionContext)(nil)).Elem())
	var tst = make([]IOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptionContext)
		}
	}

	return tst
}

func (s *Option_clauseContext) Option(i int) IOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptionContext)
}

func (s *Option_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Option_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOption_clause(s)
	}
}

func (s *Option_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOption_clause(s)
	}
}

func (p *tsqlParser) Option_clause() (localctx IOption_clauseContext) {
	localctx = NewOption_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, tsqlParserRULE_option_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2284)
		p.Match(tsqlParserOPTION)
	}
	{
		p.SetState(2285)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2286)
		p.Option()
	}
	p.SetState(2291)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2287)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2288)
			p.Option()
		}

		p.SetState(2293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2294)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IOptionContext is an interface to support dynamic dispatch.
type IOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumber_rows returns the number_rows token.
	GetNumber_rows() antlr.Token

	// GetNumber_of_processors returns the number_of_processors token.
	GetNumber_of_processors() antlr.Token

	// GetNumber_recursion returns the number_recursion token.
	GetNumber_recursion() antlr.Token

	// SetNumber_rows sets the number_rows token.
	SetNumber_rows(antlr.Token)

	// SetNumber_of_processors sets the number_of_processors token.
	SetNumber_of_processors(antlr.Token)

	// SetNumber_recursion sets the number_recursion token.
	SetNumber_recursion(antlr.Token)

	// IsOptionContext differentiates from other interfaces.
	IsOptionContext()
}

type OptionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	number_rows          antlr.Token
	number_of_processors antlr.Token
	number_recursion     antlr.Token
}

func NewEmptyOptionContext() *OptionContext {
	var p = new(OptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_option
	return p
}

func (*OptionContext) IsOptionContext() {}

func NewOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionContext {
	var p = new(OptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_option

	return p
}

func (s *OptionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionContext) GetNumber_rows() antlr.Token { return s.number_rows }

func (s *OptionContext) GetNumber_of_processors() antlr.Token { return s.number_of_processors }

func (s *OptionContext) GetNumber_recursion() antlr.Token { return s.number_recursion }

func (s *OptionContext) SetNumber_rows(v antlr.Token) { s.number_rows = v }

func (s *OptionContext) SetNumber_of_processors(v antlr.Token) { s.number_of_processors = v }

func (s *OptionContext) SetNumber_recursion(v antlr.Token) { s.number_recursion = v }

func (s *OptionContext) FAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST, 0)
}

func (s *OptionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *OptionContext) GROUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUP, 0)
}

func (s *OptionContext) HASH() antlr.TerminalNode {
	return s.GetToken(tsqlParserHASH, 0)
}

func (s *OptionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(tsqlParserORDER, 0)
}

func (s *OptionContext) UNION() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNION, 0)
}

func (s *OptionContext) MERGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserMERGE, 0)
}

func (s *OptionContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONCAT, 0)
}

func (s *OptionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserJOIN, 0)
}

func (s *OptionContext) LOOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOOP, 0)
}

func (s *OptionContext) EXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXPAND, 0)
}

func (s *OptionContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEWS, 0)
}

func (s *OptionContext) FORCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCE, 0)
}

func (s *OptionContext) IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)
}

func (s *OptionContext) KEEP() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEP, 0)
}

func (s *OptionContext) PLAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserPLAN, 0)
}

func (s *OptionContext) KEEPFIXED() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEPFIXED, 0)
}

func (s *OptionContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXDOP, 0)
}

func (s *OptionContext) MAXRECURSION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXRECURSION, 0)
}

func (s *OptionContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMIZE, 0)
}

func (s *OptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOR, 0)
}

func (s *OptionContext) AllOptimize_for_arg() []IOptimize_for_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptimize_for_argContext)(nil)).Elem())
	var tst = make([]IOptimize_for_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptimize_for_argContext)
		}
	}

	return tst
}

func (s *OptionContext) Optimize_for_arg(i int) IOptimize_for_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimize_for_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptimize_for_argContext)
}

func (s *OptionContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNKNOWN, 0)
}

func (s *OptionContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARAMETERIZATION, 0)
}

func (s *OptionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *OptionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *OptionContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOMPILE, 0)
}

func (s *OptionContext) ROBUST() antlr.TerminalNode {
	return s.GetToken(tsqlParserROBUST, 0)
}

func (s *OptionContext) USE() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSE, 0)
}

func (s *OptionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *OptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOption(s)
	}
}

func (s *OptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOption(s)
	}
}

func (p *tsqlParser) Option() (localctx IOptionContext) {
	localctx = NewOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, tsqlParserRULE_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2341)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 352, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2296)
			p.Match(tsqlParserFAST)
		}
		{
			p.SetState(2297)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*OptionContext).number_rows = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2298)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserORDER || _la == tsqlParserHASH) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2299)
			p.Match(tsqlParserGROUP)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(2300)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserMERGE || _la == tsqlParserCONCAT || _la == tsqlParserHASH) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2301)
			p.Match(tsqlParserUNION)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(2302)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserMERGE || _la == tsqlParserHASH || _la == tsqlParserLOOP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2303)
			p.Match(tsqlParserJOIN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2304)
			p.Match(tsqlParserEXPAND)
		}
		{
			p.SetState(2305)
			p.Match(tsqlParserVIEWS)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2306)
			p.Match(tsqlParserFORCE)
		}
		{
			p.SetState(2307)
			p.Match(tsqlParserORDER)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2308)
			p.Match(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2309)
			p.Match(tsqlParserKEEP)
		}
		{
			p.SetState(2310)
			p.Match(tsqlParserPLAN)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2311)
			p.Match(tsqlParserKEEPFIXED)
		}
		{
			p.SetState(2312)
			p.Match(tsqlParserPLAN)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2313)
			p.Match(tsqlParserMAXDOP)
		}
		{
			p.SetState(2314)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*OptionContext).number_of_processors = _m
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2315)
			p.Match(tsqlParserMAXRECURSION)
		}
		{
			p.SetState(2316)

			var _m = p.Match(tsqlParserDECIMAL)

			localctx.(*OptionContext).number_recursion = _m
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2317)
			p.Match(tsqlParserOPTIMIZE)
		}
		{
			p.SetState(2318)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2319)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2320)
			p.Optimize_for_arg()
		}
		p.SetState(2325)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(2321)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2322)
				p.Optimize_for_arg()
			}

			p.SetState(2327)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2328)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2330)
			p.Match(tsqlParserOPTIMIZE)
		}
		{
			p.SetState(2331)
			p.Match(tsqlParserFOR)
		}
		{
			p.SetState(2332)
			p.Match(tsqlParserUNKNOWN)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2333)
			p.Match(tsqlParserPARAMETERIZATION)
		}
		p.SetState(2334)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFORCED || _la == tsqlParserSIMPLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2335)
			p.Match(tsqlParserRECOMPILE)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2336)
			p.Match(tsqlParserROBUST)
		}
		{
			p.SetState(2337)
			p.Match(tsqlParserPLAN)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2338)
			p.Match(tsqlParserUSE)
		}
		{
			p.SetState(2339)
			p.Match(tsqlParserPLAN)
		}
		{
			p.SetState(2340)
			p.Match(tsqlParserSTRING)
		}

	}

	return localctx
}

// IOptimize_for_argContext is an interface to support dynamic dispatch.
type IOptimize_for_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptimize_for_argContext differentiates from other interfaces.
	IsOptimize_for_argContext()
}

type Optimize_for_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptimize_for_argContext() *Optimize_for_argContext {
	var p = new(Optimize_for_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_optimize_for_arg
	return p
}

func (*Optimize_for_argContext) IsOptimize_for_argContext() {}

func NewOptimize_for_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Optimize_for_argContext {
	var p = new(Optimize_for_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_optimize_for_arg

	return p
}

func (s *Optimize_for_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Optimize_for_argContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Optimize_for_argContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNKNOWN, 0)
}

func (s *Optimize_for_argContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Optimize_for_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Optimize_for_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Optimize_for_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOptimize_for_arg(s)
	}
}

func (s *Optimize_for_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOptimize_for_arg(s)
	}
}

func (p *tsqlParser) Optimize_for_arg() (localctx IOptimize_for_argContext) {
	localctx = NewOptimize_for_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, tsqlParserRULE_optimize_for_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2343)
		p.Match(tsqlParserLOCAL_ID)
	}
	p.SetState(2347)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNKNOWN:
		{
			p.SetState(2344)
			p.Match(tsqlParserUNKNOWN)
		}

	case tsqlParserEQUAL:
		{
			p.SetState(2345)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2346)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_select_list
	return p
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_elem() []ISelect_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem())
	var tst = make([]ISelect_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_list_elemContext)
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_elem(i int) ISelect_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_list_elemContext)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (p *tsqlParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, tsqlParserRULE_select_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2349)
		p.Select_list_elem()
	}
	p.SetState(2354)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2350)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2351)
				p.Select_list_elem()
			}

		}
		p.SetState(2356)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext())
	}

	return localctx
}

// ISelect_list_elemContext is an interface to support dynamic dispatch.
type ISelect_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_list_elemContext differentiates from other interfaces.
	IsSelect_list_elemContext()
}

type Select_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_elemContext() *Select_list_elemContext {
	var p = new(Select_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_select_list_elem
	return p
}

func (*Select_list_elemContext) IsSelect_list_elemContext() {}

func NewSelect_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_elemContext {
	var p = new(Select_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_select_list_elem

	return p
}

func (s *Select_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_elemContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Select_list_elemContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Select_list_elemContext) ROWGUID() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWGUID, 0)
}

func (s *Select_list_elemContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Select_list_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_list_elemContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Select_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSelect_list_elem(s)
	}
}

func (s *Select_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSelect_list_elem(s)
	}
}

func (p *tsqlParser) Select_list_elem() (localctx ISelect_list_elemContext) {
	localctx = NewSelect_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, tsqlParserRULE_select_list_elem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2378)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
			{
				p.SetState(2357)
				p.Table_name()
			}
			{
				p.SetState(2358)
				p.Match(tsqlParserDOT)
			}

		}
		p.SetState(2365)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserSTAR:
			{
				p.SetState(2362)
				p.Match(tsqlParserSTAR)
			}

		case tsqlParserDOLLAR:
			{
				p.SetState(2363)
				p.Match(tsqlParserDOLLAR)
			}
			p.SetState(2364)
			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserIDENTITY || _la == tsqlParserROWGUID) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2367)
			p.Column_alias()
		}
		{
			p.SetState(2368)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2369)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2371)
			p.expression(0)
		}
		p.SetState(2376)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext()) == 1 {
			p.SetState(2373)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserAS {
				{
					p.SetState(2372)
					p.Match(tsqlParserAS)
				}

			}
			{
				p.SetState(2375)
				p.Column_alias()
			}

		}

	}

	return localctx
}

// ITable_sourcesContext is an interface to support dynamic dispatch.
type ITable_sourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourcesContext differentiates from other interfaces.
	IsTable_sourcesContext()
}

type Table_sourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourcesContext() *Table_sourcesContext {
	var p = new(Table_sourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_sources
	return p
}

func (*Table_sourcesContext) IsTable_sourcesContext() {}

func NewTable_sourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourcesContext {
	var p = new(Table_sourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_sources

	return p
}

func (s *Table_sourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourcesContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Table_sourcesContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Table_sourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourcesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_sources(s)
	}
}

func (s *Table_sourcesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_sources(s)
	}
}

func (p *tsqlParser) Table_sources() (localctx ITable_sourcesContext) {
	localctx = NewTable_sourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, tsqlParserRULE_table_sources)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2380)
		p.Table_source()
	}
	p.SetState(2385)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 360, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2381)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2382)
				p.Table_source()
			}

		}
		p.SetState(2387)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 360, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_sourceContext is an interface to support dynamic dispatch.
type ITable_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourceContext differentiates from other interfaces.
	IsTable_sourceContext()
}

type Table_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourceContext() *Table_sourceContext {
	var p = new(Table_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_source
	return p
}

func (*Table_sourceContext) IsTable_sourceContext() {}

func NewTable_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourceContext {
	var p = new(Table_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_source

	return p
}

func (s *Table_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourceContext) Table_source_item_joined() ITable_source_item_joinedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_item_joinedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_item_joinedContext)
}

func (s *Table_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source(s)
	}
}

func (s *Table_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source(s)
	}
}

func (p *tsqlParser) Table_source() (localctx ITable_sourceContext) {
	localctx = NewTable_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, tsqlParserRULE_table_source)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2393)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2388)
			p.Table_source_item_joined()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2389)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2390)
			p.Table_source_item_joined()
		}
		{
			p.SetState(2391)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITable_source_item_joinedContext is an interface to support dynamic dispatch.
type ITable_source_item_joinedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_item_joinedContext differentiates from other interfaces.
	IsTable_source_item_joinedContext()
}

type Table_source_item_joinedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_item_joinedContext() *Table_source_item_joinedContext {
	var p = new(Table_source_item_joinedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_source_item_joined
	return p
}

func (*Table_source_item_joinedContext) IsTable_source_item_joinedContext() {}

func NewTable_source_item_joinedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_item_joinedContext {
	var p = new(Table_source_item_joinedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_source_item_joined

	return p
}

func (s *Table_source_item_joinedContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_item_joinedContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *Table_source_item_joinedContext) AllJoin_part() []IJoin_partContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_partContext)(nil)).Elem())
	var tst = make([]IJoin_partContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_partContext)
		}
	}

	return tst
}

func (s *Table_source_item_joinedContext) Join_part(i int) IJoin_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_partContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_partContext)
}

func (s *Table_source_item_joinedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_joinedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_source_item_joinedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source_item_joined(s)
	}
}

func (s *Table_source_item_joinedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source_item_joined(s)
	}
}

func (p *tsqlParser) Table_source_item_joined() (localctx ITable_source_item_joinedContext) {
	localctx = NewTable_source_item_joinedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, tsqlParserRULE_table_source_item_joined)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2395)
		p.Table_source_item()
	}
	p.SetState(2399)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2396)
				p.Join_part()
			}

		}
		p.SetState(2401)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_source_itemContext is an interface to support dynamic dispatch.
type ITable_source_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_itemContext differentiates from other interfaces.
	IsTable_source_itemContext()
}

type Table_source_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_itemContext() *Table_source_itemContext {
	var p = new(Table_source_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_source_item
	return p
}

func (*Table_source_itemContext) IsTable_source_itemContext() {}

func NewTable_source_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_itemContext {
	var p = new(Table_source_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_source_item

	return p
}

func (s *Table_source_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_itemContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Table_source_itemContext) As_table_alias() IAs_table_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_table_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_table_aliasContext)
}

func (s *Table_source_itemContext) Rowset_function() IRowset_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_functionContext)
}

func (s *Table_source_itemContext) Derived_table() IDerived_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerived_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerived_tableContext)
}

func (s *Table_source_itemContext) Column_alias_list() IColumn_alias_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_alias_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_alias_listContext)
}

func (s *Table_source_itemContext) Change_table() IChange_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_tableContext)
}

func (s *Table_source_itemContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Table_source_itemContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Table_source_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_source_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_source_item(s)
	}
}

func (s *Table_source_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_source_item(s)
	}
}

func (p *tsqlParser) Table_source_item() (localctx ITable_source_itemContext) {
	localctx = NewTable_source_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, tsqlParserRULE_table_source_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2437)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 371, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2402)
			p.Table_name_with_hint()
		}
		p.SetState(2404)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 363, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2403)
				p.As_table_alias()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2406)
			p.Rowset_function()
		}
		p.SetState(2408)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 364, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2407)
				p.As_table_alias()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2410)
			p.Derived_table()
		}
		p.SetState(2415)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 366, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2411)
				p.As_table_alias()
			}
			p.SetState(2413)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 365, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2412)
					p.Column_alias_list()
				}

			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2417)
			p.Change_table()
		}
		{
			p.SetState(2418)
			p.As_table_alias()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2420)
			p.Function_call()
		}
		p.SetState(2422)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 367, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2421)
				p.As_table_alias()
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2424)
			p.Match(tsqlParserLOCAL_ID)
		}
		p.SetState(2426)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2425)
				p.As_table_alias()
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2428)
			p.Match(tsqlParserLOCAL_ID)
		}
		{
			p.SetState(2429)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2430)
			p.Function_call()
		}
		p.SetState(2435)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 370, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2431)
				p.As_table_alias()
			}
			p.SetState(2433)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2432)
					p.Column_alias_list()
				}

			}

		}

	}

	return localctx
}

// IChange_tableContext is an interface to support dynamic dispatch.
type IChange_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tableContext differentiates from other interfaces.
	IsChange_tableContext()
}

type Change_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tableContext() *Change_tableContext {
	var p = new(Change_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_change_table
	return p
}

func (*Change_tableContext) IsChange_tableContext() {}

func NewChange_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tableContext {
	var p = new(Change_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_change_table

	return p
}

func (s *Change_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tableContext) CHANGETABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGETABLE, 0)
}

func (s *Change_tableContext) CHANGES() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHANGES, 0)
}

func (s *Change_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Change_tableContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Change_tableContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Change_tableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Change_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterChange_table(s)
	}
}

func (s *Change_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitChange_table(s)
	}
}

func (p *tsqlParser) Change_table() (localctx IChange_tableContext) {
	localctx = NewChange_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, tsqlParserRULE_change_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2439)
		p.Match(tsqlParserCHANGETABLE)
	}
	{
		p.SetState(2440)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2441)
		p.Match(tsqlParserCHANGES)
	}
	{
		p.SetState(2442)
		p.Table_name()
	}
	{
		p.SetState(2443)
		p.Match(tsqlParserCOMMA)
	}
	p.SetState(2444)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserNULL || _la == tsqlParserLOCAL_ID || _la == tsqlParserDECIMAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(2445)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IJoin_partContext is an interface to support dynamic dispatch.
type IJoin_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetJoin_type returns the join_type token.
	GetJoin_type() antlr.Token

	// GetJoin_hint returns the join_hint token.
	GetJoin_hint() antlr.Token

	// SetJoin_type sets the join_type token.
	SetJoin_type(antlr.Token)

	// SetJoin_hint sets the join_hint token.
	SetJoin_hint(antlr.Token)

	// IsJoin_partContext differentiates from other interfaces.
	IsJoin_partContext()
}

type Join_partContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	join_type antlr.Token
	join_hint antlr.Token
}

func NewEmptyJoin_partContext() *Join_partContext {
	var p = new(Join_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_join_part
	return p
}

func (*Join_partContext) IsJoin_partContext() {}

func NewJoin_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_partContext {
	var p = new(Join_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_join_part

	return p
}

func (s *Join_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_partContext) GetJoin_type() antlr.Token { return s.join_type }

func (s *Join_partContext) GetJoin_hint() antlr.Token { return s.join_hint }

func (s *Join_partContext) SetJoin_type(v antlr.Token) { s.join_type = v }

func (s *Join_partContext) SetJoin_hint(v antlr.Token) { s.join_hint = v }

func (s *Join_partContext) JOIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserJOIN, 0)
}

func (s *Join_partContext) Table_source() ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Join_partContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Join_partContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Join_partContext) LEFT() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEFT, 0)
}

func (s *Join_partContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(tsqlParserRIGHT, 0)
}

func (s *Join_partContext) FULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULL, 0)
}

func (s *Join_partContext) INNER() antlr.TerminalNode {
	return s.GetToken(tsqlParserINNER, 0)
}

func (s *Join_partContext) OUTER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTER, 0)
}

func (s *Join_partContext) LOOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOOP, 0)
}

func (s *Join_partContext) HASH() antlr.TerminalNode {
	return s.GetToken(tsqlParserHASH, 0)
}

func (s *Join_partContext) MERGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserMERGE, 0)
}

func (s *Join_partContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREMOTE, 0)
}

func (s *Join_partContext) CROSS() antlr.TerminalNode {
	return s.GetToken(tsqlParserCROSS, 0)
}

func (s *Join_partContext) APPLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserAPPLY, 0)
}

func (s *Join_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterJoin_part(s)
	}
}

func (s *Join_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitJoin_part(s)
	}
}

func (p *tsqlParser) Join_part() (localctx IJoin_partContext) {
	localctx = NewJoin_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, tsqlParserRULE_join_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2473)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 376, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2454)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserINNER, tsqlParserJOIN, tsqlParserMERGE, tsqlParserHASH, tsqlParserLOOP, tsqlParserREMOTE:
			p.SetState(2448)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserINNER {
				{
					p.SetState(2447)
					p.Match(tsqlParserINNER)
				}

			}

		case tsqlParserFULL, tsqlParserLEFT, tsqlParserRIGHT:
			p.SetState(2450)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Join_partContext).join_type = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserFULL || _la == tsqlParserLEFT || _la == tsqlParserRIGHT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Join_partContext).join_type = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(2452)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == tsqlParserOUTER {
				{
					p.SetState(2451)
					p.Match(tsqlParserOUTER)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserMERGE || _la == tsqlParserHASH || _la == tsqlParserLOOP || _la == tsqlParserREMOTE {
			p.SetState(2456)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Join_partContext).join_hint = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == tsqlParserMERGE || _la == tsqlParserHASH || _la == tsqlParserLOOP || _la == tsqlParserREMOTE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Join_partContext).join_hint = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(2459)
			p.Match(tsqlParserJOIN)
		}
		{
			p.SetState(2460)
			p.Table_source()
		}
		{
			p.SetState(2461)
			p.Match(tsqlParserON)
		}
		{
			p.SetState(2462)
			p.Search_condition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2464)
			p.Match(tsqlParserCROSS)
		}
		{
			p.SetState(2465)
			p.Match(tsqlParserJOIN)
		}
		{
			p.SetState(2466)
			p.Table_source()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2467)
			p.Match(tsqlParserCROSS)
		}
		{
			p.SetState(2468)
			p.Match(tsqlParserAPPLY)
		}
		{
			p.SetState(2469)
			p.Table_source()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2470)
			p.Match(tsqlParserOUTER)
		}
		{
			p.SetState(2471)
			p.Match(tsqlParserAPPLY)
		}
		{
			p.SetState(2472)
			p.Table_source()
		}

	}

	return localctx
}

// ITable_name_with_hintContext is an interface to support dynamic dispatch.
type ITable_name_with_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_name_with_hintContext differentiates from other interfaces.
	IsTable_name_with_hintContext()
}

type Table_name_with_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_name_with_hintContext() *Table_name_with_hintContext {
	var p = new(Table_name_with_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_name_with_hint
	return p
}

func (*Table_name_with_hintContext) IsTable_name_with_hintContext() {}

func NewTable_name_with_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_name_with_hintContext {
	var p = new(Table_name_with_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_name_with_hint

	return p
}

func (s *Table_name_with_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_name_with_hintContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_name_with_hintContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Table_name_with_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_name_with_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_name_with_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_name_with_hint(s)
	}
}

func (s *Table_name_with_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_name_with_hint(s)
	}
}

func (p *tsqlParser) Table_name_with_hint() (localctx ITable_name_with_hintContext) {
	localctx = NewTable_name_with_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, tsqlParserRULE_table_name_with_hint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2475)
		p.Table_name()
	}
	p.SetState(2477)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2476)
			p.With_table_hints()
		}

	}

	return localctx
}

// IRowset_functionContext is an interface to support dynamic dispatch.
type IRowset_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider_name returns the provider_name token.
	GetProvider_name() antlr.Token

	// GetConnectionString returns the connectionString token.
	GetConnectionString() antlr.Token

	// GetSql returns the sql token.
	GetSql() antlr.Token

	// GetData_file returns the data_file token.
	GetData_file() antlr.Token

	// SetProvider_name sets the provider_name token.
	SetProvider_name(antlr.Token)

	// SetConnectionString sets the connectionString token.
	SetConnectionString(antlr.Token)

	// SetSql sets the sql token.
	SetSql(antlr.Token)

	// SetData_file sets the data_file token.
	SetData_file(antlr.Token)

	// IsRowset_functionContext differentiates from other interfaces.
	IsRowset_functionContext()
}

type Rowset_functionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	provider_name    antlr.Token
	connectionString antlr.Token
	sql              antlr.Token
	data_file        antlr.Token
}

func NewEmptyRowset_functionContext() *Rowset_functionContext {
	var p = new(Rowset_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_rowset_function
	return p
}

func (*Rowset_functionContext) IsRowset_functionContext() {}

func NewRowset_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rowset_functionContext {
	var p = new(Rowset_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_rowset_function

	return p
}

func (s *Rowset_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Rowset_functionContext) GetProvider_name() antlr.Token { return s.provider_name }

func (s *Rowset_functionContext) GetConnectionString() antlr.Token { return s.connectionString }

func (s *Rowset_functionContext) GetSql() antlr.Token { return s.sql }

func (s *Rowset_functionContext) GetData_file() antlr.Token { return s.data_file }

func (s *Rowset_functionContext) SetProvider_name(v antlr.Token) { s.provider_name = v }

func (s *Rowset_functionContext) SetConnectionString(v antlr.Token) { s.connectionString = v }

func (s *Rowset_functionContext) SetSql(v antlr.Token) { s.sql = v }

func (s *Rowset_functionContext) SetData_file(v antlr.Token) { s.data_file = v }

func (s *Rowset_functionContext) OPENROWSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPENROWSET, 0)
}

func (s *Rowset_functionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *Rowset_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserCOMMA)
}

func (s *Rowset_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMA, i)
}

func (s *Rowset_functionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *Rowset_functionContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSTRING)
}

func (s *Rowset_functionContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, i)
}

func (s *Rowset_functionContext) BULK() antlr.TerminalNode {
	return s.GetToken(tsqlParserBULK, 0)
}

func (s *Rowset_functionContext) AllBulk_option() []IBulk_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBulk_optionContext)(nil)).Elem())
	var tst = make([]IBulk_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBulk_optionContext)
		}
	}

	return tst
}

func (s *Rowset_functionContext) Bulk_option(i int) IBulk_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBulk_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBulk_optionContext)
}

func (s *Rowset_functionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Rowset_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rowset_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rowset_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRowset_function(s)
	}
}

func (s *Rowset_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRowset_function(s)
	}
}

func (p *tsqlParser) Rowset_function() (localctx IRowset_functionContext) {
	localctx = NewRowset_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, tsqlParserRULE_rowset_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2505)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 380, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2479)
			p.Match(tsqlParserOPENROWSET)
		}
		{
			p.SetState(2480)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2481)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).provider_name = _m
		}
		{
			p.SetState(2482)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2483)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).connectionString = _m
		}
		{
			p.SetState(2484)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2485)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).sql = _m
		}
		{
			p.SetState(2486)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2487)
			p.Match(tsqlParserOPENROWSET)
		}
		{
			p.SetState(2488)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2489)
			p.Match(tsqlParserBULK)
		}
		{
			p.SetState(2490)

			var _m = p.Match(tsqlParserSTRING)

			localctx.(*Rowset_functionContext).data_file = _m
		}
		{
			p.SetState(2491)
			p.Match(tsqlParserCOMMA)
		}
		p.SetState(2501)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 379, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2492)
				p.Bulk_option()
			}
			p.SetState(2497)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(2493)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2494)
					p.Bulk_option()
				}

				p.SetState(2499)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(2500)
				p.Id()
			}

		}
		{
			p.SetState(2503)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IBulk_optionContext is an interface to support dynamic dispatch.
type IBulk_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBulk_option_value returns the bulk_option_value token.
	GetBulk_option_value() antlr.Token

	// SetBulk_option_value sets the bulk_option_value token.
	SetBulk_option_value(antlr.Token)

	// IsBulk_optionContext differentiates from other interfaces.
	IsBulk_optionContext()
}

type Bulk_optionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	bulk_option_value antlr.Token
}

func NewEmptyBulk_optionContext() *Bulk_optionContext {
	var p = new(Bulk_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_bulk_option
	return p
}

func (*Bulk_optionContext) IsBulk_optionContext() {}

func NewBulk_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bulk_optionContext {
	var p = new(Bulk_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_bulk_option

	return p
}

func (s *Bulk_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bulk_optionContext) GetBulk_option_value() antlr.Token { return s.bulk_option_value }

func (s *Bulk_optionContext) SetBulk_option_value(v antlr.Token) { s.bulk_option_value = v }

func (s *Bulk_optionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Bulk_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Bulk_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Bulk_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bulk_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bulk_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterBulk_option(s)
	}
}

func (s *Bulk_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitBulk_option(s)
	}
}

func (p *tsqlParser) Bulk_option() (localctx IBulk_optionContext) {
	localctx = NewBulk_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, tsqlParserRULE_bulk_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2507)
		p.Id()
	}
	{
		p.SetState(2508)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(2509)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Bulk_optionContext).bulk_option_value = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserDECIMAL || _la == tsqlParserSTRING) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Bulk_optionContext).bulk_option_value = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDerived_tableContext is an interface to support dynamic dispatch.
type IDerived_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDerived_tableContext differentiates from other interfaces.
	IsDerived_tableContext()
}

type Derived_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDerived_tableContext() *Derived_tableContext {
	var p = new(Derived_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_derived_table
	return p
}

func (*Derived_tableContext) IsDerived_tableContext() {}

func NewDerived_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Derived_tableContext {
	var p = new(Derived_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_derived_table

	return p
}

func (s *Derived_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Derived_tableContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Derived_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Derived_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Derived_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDerived_table(s)
	}
}

func (s *Derived_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDerived_table(s)
	}
}

func (p *tsqlParser) Derived_table() (localctx IDerived_tableContext) {
	localctx = NewDerived_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, tsqlParserRULE_derived_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 381, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2511)
			p.Subquery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2512)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2513)
			p.Subquery()
		}
		{
			p.SetState(2514)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IFunction_callContext is an interface to support dynamic dispatch.
type IFunction_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeed returns the seed token.
	GetSeed() antlr.Token

	// GetIncrement returns the increment token.
	GetIncrement() antlr.Token

	// SetSeed sets the seed token.
	SetSeed(antlr.Token)

	// SetIncrement sets the increment token.
	SetIncrement(antlr.Token)

	// GetStyle returns the style rule contexts.
	GetStyle() IExpressionContext

	// SetStyle sets the style rule contexts.
	SetStyle(IExpressionContext)

	// IsFunction_callContext differentiates from other interfaces.
	IsFunction_callContext()
}

type Function_callContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	style     IExpressionContext
	seed      antlr.Token
	increment antlr.Token
}

func NewEmptyFunction_callContext() *Function_callContext {
	var p = new(Function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_function_call
	return p
}

func (*Function_callContext) IsFunction_callContext() {}

func NewFunction_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_callContext {
	var p = new(Function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_function_call

	return p
}

func (s *Function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_callContext) GetSeed() antlr.Token { return s.seed }

func (s *Function_callContext) GetIncrement() antlr.Token { return s.increment }

func (s *Function_callContext) SetSeed(v antlr.Token) { s.seed = v }

func (s *Function_callContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *Function_callContext) GetStyle() IExpressionContext { return s.style }

func (s *Function_callContext) SetStyle(v IExpressionContext) { s.style = v }

func (s *Function_callContext) Ranking_windowed_function() IRanking_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRanking_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRanking_windowed_functionContext)
}

func (s *Function_callContext) Aggregate_windowed_function() IAggregate_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_windowed_functionContext)
}

func (s *Function_callContext) Scalar_function_name() IScalar_function_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalar_function_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalar_function_nameContext)
}

func (s *Function_callContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Function_callContext) BINARY_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY_CHECKSUM, 0)
}

func (s *Function_callContext) CAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserCAST, 0)
}

func (s *Function_callContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Function_callContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_callContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *Function_callContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Function_callContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONVERT, 0)
}

func (s *Function_callContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM, 0)
}

func (s *Function_callContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOALESCE, 0)
}

func (s *Function_callContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT_TIMESTAMP, 0)
}

func (s *Function_callContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT_USER, 0)
}

func (s *Function_callContext) DATEADD() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATEADD, 0)
}

func (s *Function_callContext) ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserID, 0)
}

func (s *Function_callContext) DATEDIFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATEDIFF, 0)
}

func (s *Function_callContext) DATENAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATENAME, 0)
}

func (s *Function_callContext) DATEPART() antlr.TerminalNode {
	return s.GetToken(tsqlParserDATEPART, 0)
}

func (s *Function_callContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Function_callContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Function_callContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Function_callContext) MIN_ACTIVE_ROWVERSION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIN_ACTIVE_ROWVERSION, 0)
}

func (s *Function_callContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULLIF, 0)
}

func (s *Function_callContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserSESSION_USER, 0)
}

func (s *Function_callContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(tsqlParserSYSTEM_USER, 0)
}

func (s *Function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFunction_call(s)
	}
}

func (s *Function_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFunction_call(s)
	}
}

func (p *tsqlParser) Function_call() (localctx IFunction_callContext) {
	localctx = NewFunction_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, tsqlParserRULE_function_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2615)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 386, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2518)
			p.Ranking_windowed_function()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2519)
			p.Aggregate_windowed_function()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2520)
			p.Scalar_function_name()
		}
		{
			p.SetState(2521)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(tsqlParserCASE-18))|(1<<(tsqlParserCOALESCE-18))|(1<<(tsqlParserCONVERT-18))|(1<<(tsqlParserCURRENT_TIMESTAMP-18))|(1<<(tsqlParserCURRENT_USER-18))|(1<<(tsqlParserDEFAULT-18)))) != 0) || (((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(tsqlParserFORCESEEK-72))|(1<<(tsqlParserIDENTITY-72))|(1<<(tsqlParserLEFT-72)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(tsqlParserNULL-108))|(1<<(tsqlParserNULLIF-108))|(1<<(tsqlParserOVER-108)))) != 0) || (((_la-145)&-(0x1f+1)) == 0 && ((1<<uint((_la-145)))&((1<<(tsqlParserRIGHT-145))|(1<<(tsqlParserSESSION_USER-145))|(1<<(tsqlParserSYSTEM_USER-145)))) != 0) || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserBINARY_CHECKSUM-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDATEADD-225))|(1<<(tsqlParserDATEDIFF-225))|(1<<(tsqlParserDATENAME-225))|(1<<(tsqlParserDATEPART-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMIN_ACTIVE_ROWVERSION-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserLOCAL_ID-388))|(1<<(tsqlParserDECIMAL-388))|(1<<(tsqlParserID-388))|(1<<(tsqlParserSTRING-388))|(1<<(tsqlParserBINARY-388))|(1<<(tsqlParserFLOAT-388))|(1<<(tsqlParserREAL-388)))) != 0) || (((_la-425)&-(0x1f+1)) == 0 && ((1<<uint((_la-425)))&((1<<(tsqlParserDOLLAR-425))|(1<<(tsqlParserLR_BRACKET-425))|(1<<(tsqlParserPLUS-425))|(1<<(tsqlParserMINUS-425))|(1<<(tsqlParserBIT_NOT-425)))) != 0) {
			{
				p.SetState(2522)
				p.Expression_list()
			}

		}
		{
			p.SetState(2525)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2527)
			p.Match(tsqlParserBINARY_CHECKSUM)
		}
		{
			p.SetState(2528)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2529)
			p.Match(tsqlParserSTAR)
		}
		{
			p.SetState(2530)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2531)
			p.Match(tsqlParserCAST)
		}
		{
			p.SetState(2532)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2533)
			p.expression(0)
		}
		{
			p.SetState(2534)
			p.Match(tsqlParserAS)
		}
		{
			p.SetState(2535)
			p.Data_type()
		}
		{
			p.SetState(2536)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2538)
			p.Match(tsqlParserCONVERT)
		}
		{
			p.SetState(2539)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2540)
			p.Data_type()
		}
		{
			p.SetState(2541)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2542)
			p.expression(0)
		}
		p.SetState(2545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2543)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2544)

				var _x = p.expression(0)

				localctx.(*Function_callContext).style = _x
			}

		}
		{
			p.SetState(2547)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2549)
			p.Match(tsqlParserCHECKSUM)
		}
		{
			p.SetState(2550)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2551)
			p.Match(tsqlParserSTAR)
		}
		{
			p.SetState(2552)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2553)
			p.Match(tsqlParserCOALESCE)
		}
		{
			p.SetState(2554)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2555)
			p.Expression_list()
		}
		{
			p.SetState(2556)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2558)
			p.Match(tsqlParserCURRENT_TIMESTAMP)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2559)
			p.Match(tsqlParserCURRENT_USER)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2560)
			p.Match(tsqlParserDATEADD)
		}
		{
			p.SetState(2561)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2562)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2563)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2564)
			p.expression(0)
		}
		{
			p.SetState(2565)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2566)
			p.expression(0)
		}
		{
			p.SetState(2567)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2569)
			p.Match(tsqlParserDATEDIFF)
		}
		{
			p.SetState(2570)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2571)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2572)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2573)
			p.expression(0)
		}
		{
			p.SetState(2574)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2575)
			p.expression(0)
		}
		{
			p.SetState(2576)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2578)
			p.Match(tsqlParserDATENAME)
		}
		{
			p.SetState(2579)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2580)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2581)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2582)
			p.expression(0)
		}
		{
			p.SetState(2583)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2585)
			p.Match(tsqlParserDATEPART)
		}
		{
			p.SetState(2586)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2587)
			p.Match(tsqlParserID)
		}
		{
			p.SetState(2588)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2589)
			p.expression(0)
		}
		{
			p.SetState(2590)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2592)
			p.Match(tsqlParserIDENTITY)
		}
		{
			p.SetState(2593)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2594)
			p.Data_type()
		}
		p.SetState(2597)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 384, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2595)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2596)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Function_callContext).seed = _m
			}

		}
		p.SetState(2601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2599)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2600)

				var _m = p.Match(tsqlParserDECIMAL)

				localctx.(*Function_callContext).increment = _m
			}

		}
		{
			p.SetState(2603)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2605)
			p.Match(tsqlParserMIN_ACTIVE_ROWVERSION)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2606)
			p.Match(tsqlParserNULLIF)
		}
		{
			p.SetState(2607)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2608)
			p.expression(0)
		}
		{
			p.SetState(2609)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2610)
			p.expression(0)
		}
		{
			p.SetState(2611)
			p.Match(tsqlParserRR_BRACKET)
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2613)
			p.Match(tsqlParserSESSION_USER)
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2614)
			p.Match(tsqlParserSYSTEM_USER)
		}

	}

	return localctx
}

// ISwitch_sectionContext is an interface to support dynamic dispatch.
type ISwitch_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitch_sectionContext differentiates from other interfaces.
	IsSwitch_sectionContext()
}

type Switch_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitch_sectionContext() *Switch_sectionContext {
	var p = new(Switch_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_switch_section
	return p
}

func (*Switch_sectionContext) IsSwitch_sectionContext() {}

func NewSwitch_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_sectionContext {
	var p = new(Switch_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_switch_section

	return p
}

func (s *Switch_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHEN, 0)
}

func (s *Switch_sectionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Switch_sectionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Switch_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHEN, 0)
}

func (s *Switch_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Switch_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSwitch_section(s)
	}
}

func (s *Switch_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSwitch_section(s)
	}
}

func (p *tsqlParser) Switch_section() (localctx ISwitch_sectionContext) {
	localctx = NewSwitch_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, tsqlParserRULE_switch_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2617)
		p.Match(tsqlParserWHEN)
	}
	{
		p.SetState(2618)
		p.expression(0)
	}
	{
		p.SetState(2619)
		p.Match(tsqlParserTHEN)
	}
	{
		p.SetState(2620)
		p.expression(0)
	}

	return localctx
}

// ISwitch_search_condition_sectionContext is an interface to support dynamic dispatch.
type ISwitch_search_condition_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitch_search_condition_sectionContext differentiates from other interfaces.
	IsSwitch_search_condition_sectionContext()
}

type Switch_search_condition_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitch_search_condition_sectionContext() *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_switch_search_condition_section
	return p
}

func (*Switch_search_condition_sectionContext) IsSwitch_search_condition_sectionContext() {}

func NewSwitch_search_condition_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_switch_search_condition_section

	return p
}

func (s *Switch_search_condition_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_search_condition_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserWHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Switch_search_condition_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Switch_search_condition_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_search_condition_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Switch_search_condition_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSwitch_search_condition_section(s)
	}
}

func (s *Switch_search_condition_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSwitch_search_condition_section(s)
	}
}

func (p *tsqlParser) Switch_search_condition_section() (localctx ISwitch_search_condition_sectionContext) {
	localctx = NewSwitch_search_condition_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, tsqlParserRULE_switch_search_condition_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2622)
		p.Match(tsqlParserWHEN)
	}
	{
		p.SetState(2623)
		p.Search_condition()
	}
	{
		p.SetState(2624)
		p.Match(tsqlParserTHEN)
	}
	{
		p.SetState(2625)
		p.expression(0)
	}

	return localctx
}

// IAs_table_aliasContext is an interface to support dynamic dispatch.
type IAs_table_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAs_table_aliasContext differentiates from other interfaces.
	IsAs_table_aliasContext()
}

type As_table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_table_aliasContext() *As_table_aliasContext {
	var p = new(As_table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_as_table_alias
	return p
}

func (*As_table_aliasContext) IsAs_table_aliasContext() {}

func NewAs_table_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_table_aliasContext {
	var p = new(As_table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_as_table_alias

	return p
}

func (s *As_table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_table_aliasContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *As_table_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(tsqlParserAS, 0)
}

func (s *As_table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAs_table_alias(s)
	}
}

func (s *As_table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAs_table_alias(s)
	}
}

func (p *tsqlParser) As_table_alias() (localctx IAs_table_aliasContext) {
	localctx = NewAs_table_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, tsqlParserRULE_as_table_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2628)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserAS {
		{
			p.SetState(2627)
			p.Match(tsqlParserAS)
		}

	}
	{
		p.SetState(2630)
		p.Table_alias()
	}

	return localctx
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_alias
	return p
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Table_aliasContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (p *tsqlParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, tsqlParserRULE_table_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2632)
		p.Id()
	}
	p.SetState(2634)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 388, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2633)
			p.With_table_hints()
		}

	}

	return localctx
}

// IWith_table_hintsContext is an interface to support dynamic dispatch.
type IWith_table_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_table_hintsContext differentiates from other interfaces.
	IsWith_table_hintsContext()
}

type With_table_hintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_table_hintsContext() *With_table_hintsContext {
	var p = new(With_table_hintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_with_table_hints
	return p
}

func (*With_table_hintsContext) IsWith_table_hintsContext() {}

func NewWith_table_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_table_hintsContext {
	var p = new(With_table_hintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_with_table_hints

	return p
}

func (s *With_table_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *With_table_hintsContext) AllTable_hint() []ITable_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_hintContext)(nil)).Elem())
	var tst = make([]ITable_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_hintContext)
		}
	}

	return tst
}

func (s *With_table_hintsContext) Table_hint(i int) ITable_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_hintContext)
}

func (s *With_table_hintsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *With_table_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_table_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_table_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWith_table_hints(s)
	}
}

func (s *With_table_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWith_table_hints(s)
	}
}

func (p *tsqlParser) With_table_hints() (localctx IWith_table_hintsContext) {
	localctx = NewWith_table_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, tsqlParserRULE_with_table_hints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2637)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserWITH {
		{
			p.SetState(2636)
			p.Match(tsqlParserWITH)
		}

	}
	{
		p.SetState(2639)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2640)
		p.Table_hint()
	}
	p.SetState(2645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2641)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2642)
			p.Table_hint()
		}

		p.SetState(2647)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2648)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IInsert_with_table_hintsContext is an interface to support dynamic dispatch.
type IInsert_with_table_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_with_table_hintsContext differentiates from other interfaces.
	IsInsert_with_table_hintsContext()
}

type Insert_with_table_hintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_with_table_hintsContext() *Insert_with_table_hintsContext {
	var p = new(Insert_with_table_hintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_insert_with_table_hints
	return p
}

func (*Insert_with_table_hintsContext) IsInsert_with_table_hintsContext() {}

func NewInsert_with_table_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_with_table_hintsContext {
	var p = new(Insert_with_table_hintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_insert_with_table_hints

	return p
}

func (s *Insert_with_table_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_with_table_hintsContext) WITH() antlr.TerminalNode {
	return s.GetToken(tsqlParserWITH, 0)
}

func (s *Insert_with_table_hintsContext) AllTable_hint() []ITable_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_hintContext)(nil)).Elem())
	var tst = make([]ITable_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_hintContext)
		}
	}

	return tst
}

func (s *Insert_with_table_hintsContext) Table_hint(i int) ITable_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_hintContext)
}

func (s *Insert_with_table_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_with_table_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_with_table_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterInsert_with_table_hints(s)
	}
}

func (s *Insert_with_table_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitInsert_with_table_hints(s)
	}
}

func (p *tsqlParser) Insert_with_table_hints() (localctx IInsert_with_table_hintsContext) {
	localctx = NewInsert_with_table_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, tsqlParserRULE_insert_with_table_hints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2650)
		p.Match(tsqlParserWITH)
	}
	{
		p.SetState(2651)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2652)
		p.Table_hint()
	}
	p.SetState(2657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2653)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2654)
			p.Table_hint()
		}

		p.SetState(2659)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2660)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// ITable_hintContext is an interface to support dynamic dispatch.
type ITable_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_hintContext differentiates from other interfaces.
	IsTable_hintContext()
}

type Table_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_hintContext() *Table_hintContext {
	var p = new(Table_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_hint
	return p
}

func (*Table_hintContext) IsTable_hintContext() {}

func NewTable_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_hintContext {
	var p = new(Table_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_hint

	return p
}

func (s *Table_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_hintContext) NOEXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOEXPAND, 0)
}

func (s *Table_hintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserINDEX, 0)
}

func (s *Table_hintContext) AllIndex_value() []IIndex_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_valueContext)(nil)).Elem())
	var tst = make([]IIndex_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_valueContext)
		}
	}

	return tst
}

func (s *Table_hintContext) Index_value(i int) IIndex_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_valueContext)
}

func (s *Table_hintContext) FORCESEEK() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCESEEK, 0)
}

func (s *Table_hintContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSERIALIZABLE, 0)
}

func (s *Table_hintContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSNAPSHOT, 0)
}

func (s *Table_hintContext) SPATIAL_WINDOW_MAX_CELLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSPATIAL_WINDOW_MAX_CELLS, 0)
}

func (s *Table_hintContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Table_hintContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserID)
}

func (s *Table_hintContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserID, i)
}

func (s *Table_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_hint(s)
	}
}

func (s *Table_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_hint(s)
	}
}

func (p *tsqlParser) Table_hint() (localctx ITable_hintContext) {
	localctx = NewTable_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, tsqlParserRULE_table_hint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOEXPAND {
		{
			p.SetState(2662)
			p.Match(tsqlParserNOEXPAND)
		}

	}
	p.SetState(2703)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2665)
			p.Match(tsqlParserINDEX)
		}
		{
			p.SetState(2666)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2667)
			p.Index_value()
		}
		p.SetState(2672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == tsqlParserCOMMA {
			{
				p.SetState(2668)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2669)
				p.Index_value()
			}

			p.SetState(2674)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2675)
			p.Match(tsqlParserRR_BRACKET)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2677)
			p.Match(tsqlParserINDEX)
		}
		{
			p.SetState(2678)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2679)
			p.Index_value()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(2680)
			p.Match(tsqlParserFORCESEEK)
		}
		p.SetState(2695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserLR_BRACKET {
			{
				p.SetState(2681)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(2682)
				p.Index_value()
			}
			{
				p.SetState(2683)
				p.Match(tsqlParserLR_BRACKET)
			}
			{
				p.SetState(2684)
				p.Match(tsqlParserID)
			}
			p.SetState(2689)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == tsqlParserCOMMA {
				{
					p.SetState(2685)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2686)
					p.Match(tsqlParserID)
				}

				p.SetState(2691)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2692)
				p.Match(tsqlParserRR_BRACKET)
			}
			{
				p.SetState(2693)
				p.Match(tsqlParserRR_BRACKET)
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(2697)
			p.Match(tsqlParserSERIALIZABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(2698)
			p.Match(tsqlParserSNAPSHOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 6 {
		{
			p.SetState(2699)
			p.Match(tsqlParserSPATIAL_WINDOW_MAX_CELLS)
		}
		{
			p.SetState(2700)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2701)
			p.Match(tsqlParserDECIMAL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 7 {
		{
			p.SetState(2702)
			p.Match(tsqlParserID)
		}

	}

	return localctx
}

// IIndex_valueContext is an interface to support dynamic dispatch.
type IIndex_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_valueContext differentiates from other interfaces.
	IsIndex_valueContext()
}

type Index_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_valueContext() *Index_valueContext {
	var p = new(Index_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_index_value
	return p
}

func (*Index_valueContext) IsIndex_valueContext() {}

func NewIndex_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_valueContext {
	var p = new(Index_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_index_value

	return p
}

func (s *Index_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_valueContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Index_valueContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Index_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterIndex_value(s)
	}
}

func (s *Index_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitIndex_value(s)
	}
}

func (p *tsqlParser) Index_value() (localctx IIndex_valueContext) {
	localctx = NewIndex_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, tsqlParserRULE_index_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2707)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2705)
			p.Id()
		}

	case tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2706)
			p.Match(tsqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_alias_listContext is an interface to support dynamic dispatch.
type IColumn_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_alias_listContext differentiates from other interfaces.
	IsColumn_alias_listContext()
}

type Column_alias_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_alias_listContext() *Column_alias_listContext {
	var p = new(Column_alias_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_alias_list
	return p
}

func (*Column_alias_listContext) IsColumn_alias_listContext() {}

func NewColumn_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_alias_listContext {
	var p = new(Column_alias_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_alias_list

	return p
}

func (s *Column_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_alias_listContext) AllColumn_alias() []IColumn_aliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem())
	var tst = make([]IColumn_aliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_aliasContext)
		}
	}

	return tst
}

func (s *Column_alias_listContext) Column_alias(i int) IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Column_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_alias_list(s)
	}
}

func (s *Column_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_alias_list(s)
	}
}

func (p *tsqlParser) Column_alias_list() (localctx IColumn_alias_listContext) {
	localctx = NewColumn_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, tsqlParserRULE_column_alias_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2709)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2710)
		p.Column_alias()
	}
	p.SetState(2715)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2711)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2712)
			p.Column_alias()
		}

		p.SetState(2717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2718)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_aliasContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (p *tsqlParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, tsqlParserRULE_column_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2722)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2720)
			p.Id()
		}

	case tsqlParserSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2721)
			p.Match(tsqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_value_constructorContext is an interface to support dynamic dispatch.
type ITable_value_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_value_constructorContext differentiates from other interfaces.
	IsTable_value_constructorContext()
}

type Table_value_constructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_value_constructorContext() *Table_value_constructorContext {
	var p = new(Table_value_constructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_value_constructor
	return p
}

func (*Table_value_constructorContext) IsTable_value_constructorContext() {}

func NewTable_value_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_value_constructorContext {
	var p = new(Table_value_constructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_value_constructor

	return p
}

func (s *Table_value_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_value_constructorContext) VALUES() antlr.TerminalNode {
	return s.GetToken(tsqlParserVALUES, 0)
}

func (s *Table_value_constructorContext) AllExpression_list() []IExpression_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_listContext)(nil)).Elem())
	var tst = make([]IExpression_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_listContext)
		}
	}

	return tst
}

func (s *Table_value_constructorContext) Expression_list(i int) IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Table_value_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_value_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_value_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_value_constructor(s)
	}
}

func (s *Table_value_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_value_constructor(s)
	}
}

func (p *tsqlParser) Table_value_constructor() (localctx ITable_value_constructorContext) {
	localctx = NewTable_value_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, tsqlParserRULE_table_value_constructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2724)
		p.Match(tsqlParserVALUES)
	}
	{
		p.SetState(2725)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2726)
		p.Expression_list()
	}
	{
		p.SetState(2727)
		p.Match(tsqlParserRR_BRACKET)
	}
	p.SetState(2735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2728)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2729)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2730)
			p.Expression_list()
		}
		{
			p.SetState(2731)
			p.Match(tsqlParserRR_BRACKET)
		}

		p.SetState(2737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (p *tsqlParser) Expression_list() (localctx IExpression_listContext) {
	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, tsqlParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2738)
		p.expression(0)
	}
	p.SetState(2743)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(2739)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(2740)
			p.expression(0)
		}

		p.SetState(2745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRanking_windowed_functionContext is an interface to support dynamic dispatch.
type IRanking_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRanking_windowed_functionContext differentiates from other interfaces.
	IsRanking_windowed_functionContext()
}

type Ranking_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRanking_windowed_functionContext() *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_ranking_windowed_function
	return p
}

func (*Ranking_windowed_functionContext) IsRanking_windowed_functionContext() {}

func NewRanking_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_ranking_windowed_function

	return p
}

func (s *Ranking_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ranking_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Ranking_windowed_functionContext) RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANK, 0)
}

func (s *Ranking_windowed_functionContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserDENSE_RANK, 0)
}

func (s *Ranking_windowed_functionContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW_NUMBER, 0)
}

func (s *Ranking_windowed_functionContext) NTILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNTILE, 0)
}

func (s *Ranking_windowed_functionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ranking_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ranking_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ranking_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRanking_windowed_function(s)
	}
}

func (s *Ranking_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRanking_windowed_function(s)
	}
}

func (p *tsqlParser) Ranking_windowed_function() (localctx IRanking_windowed_functionContext) {
	localctx = NewRanking_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, tsqlParserRULE_ranking_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2756)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserDENSE_RANK, tsqlParserRANK, tsqlParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2746)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserDENSE_RANK || _la == tsqlParserRANK || _la == tsqlParserROW_NUMBER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2747)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2748)
			p.Match(tsqlParserRR_BRACKET)
		}
		{
			p.SetState(2749)
			p.Over_clause()
		}

	case tsqlParserNTILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2750)
			p.Match(tsqlParserNTILE)
		}
		{
			p.SetState(2751)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2752)
			p.expression(0)
		}
		{
			p.SetState(2753)
			p.Match(tsqlParserRR_BRACKET)
		}
		{
			p.SetState(2754)
			p.Over_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAggregate_windowed_functionContext is an interface to support dynamic dispatch.
type IAggregate_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregate_windowed_functionContext differentiates from other interfaces.
	IsAggregate_windowed_functionContext()
}

type Aggregate_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_windowed_functionContext() *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_aggregate_windowed_function
	return p
}

func (*Aggregate_windowed_functionContext) IsAggregate_windowed_functionContext() {}

func NewAggregate_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_aggregate_windowed_function

	return p
}

func (s *Aggregate_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_windowed_functionContext) All_distinct_expression() IAll_distinct_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_distinct_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_distinct_expressionContext)
}

func (s *Aggregate_windowed_functionContext) AVG() antlr.TerminalNode {
	return s.GetToken(tsqlParserAVG, 0)
}

func (s *Aggregate_windowed_functionContext) MAX() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAX, 0)
}

func (s *Aggregate_windowed_functionContext) MIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIN, 0)
}

func (s *Aggregate_windowed_functionContext) SUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSUM, 0)
}

func (s *Aggregate_windowed_functionContext) STDEV() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEV, 0)
}

func (s *Aggregate_windowed_functionContext) STDEVP() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEVP, 0)
}

func (s *Aggregate_windowed_functionContext) VAR() antlr.TerminalNode {
	return s.GetToken(tsqlParserVAR, 0)
}

func (s *Aggregate_windowed_functionContext) VARP() antlr.TerminalNode {
	return s.GetToken(tsqlParserVARP, 0)
}

func (s *Aggregate_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Aggregate_windowed_functionContext) COUNT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT, 0)
}

func (s *Aggregate_windowed_functionContext) COUNT_BIG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT_BIG, 0)
}

func (s *Aggregate_windowed_functionContext) CHECKSUM_AGG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM_AGG, 0)
}

func (s *Aggregate_windowed_functionContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING, 0)
}

func (s *Aggregate_windowed_functionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Aggregate_windowed_functionContext) GROUPING_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING_ID, 0)
}

func (s *Aggregate_windowed_functionContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Aggregate_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAggregate_windowed_function(s)
	}
}

func (s *Aggregate_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAggregate_windowed_function(s)
	}
}

func (p *tsqlParser) Aggregate_windowed_function() (localctx IAggregate_windowed_functionContext) {
	localctx = NewAggregate_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, tsqlParserRULE_aggregate_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2790)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserAVG, tsqlParserMAX, tsqlParserMIN, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserVAR, tsqlParserVARP:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2758)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserAVG || _la == tsqlParserMAX || _la == tsqlParserMIN || (((_la-367)&-(0x1f+1)) == 0 && ((1<<uint((_la-367)))&((1<<(tsqlParserSTDEV-367))|(1<<(tsqlParserSTDEVP-367))|(1<<(tsqlParserSUM-367))|(1<<(tsqlParserVAR-367))|(1<<(tsqlParserVARP-367)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2759)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2760)
			p.All_distinct_expression()
		}
		{
			p.SetState(2761)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(2763)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 403, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2762)
				p.Over_clause()
			}

		}

	case tsqlParserCOUNT, tsqlParserCOUNT_BIG:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2765)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserCOUNT || _la == tsqlParserCOUNT_BIG) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2766)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(2769)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserSTAR:
			{
				p.SetState(2767)
				p.Match(tsqlParserSTAR)
			}

		case tsqlParserALL, tsqlParserCASE, tsqlParserCOALESCE, tsqlParserCONVERT, tsqlParserCURRENT_TIMESTAMP, tsqlParserCURRENT_USER, tsqlParserDEFAULT, tsqlParserDISTINCT, tsqlParserFORCESEEK, tsqlParserIDENTITY, tsqlParserLEFT, tsqlParserNULL, tsqlParserNULLIF, tsqlParserOVER, tsqlParserRIGHT, tsqlParserSESSION_USER, tsqlParserSYSTEM_USER, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserBINARY_CHECKSUM, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDATEADD, tsqlParserDATEDIFF, tsqlParserDATENAME, tsqlParserDATEPART, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMIN_ACTIVE_ROWVERSION, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserLOCAL_ID, tsqlParserDECIMAL, tsqlParserID, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserLR_BRACKET, tsqlParserPLUS, tsqlParserMINUS, tsqlParserBIT_NOT:
			{
				p.SetState(2768)
				p.All_distinct_expression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2771)
			p.Match(tsqlParserRR_BRACKET)
		}
		p.SetState(2773)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 405, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2772)
				p.Over_clause()
			}

		}

	case tsqlParserCHECKSUM_AGG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2775)
			p.Match(tsqlParserCHECKSUM_AGG)
		}
		{
			p.SetState(2776)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2777)
			p.All_distinct_expression()
		}
		{
			p.SetState(2778)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserGROUPING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2780)
			p.Match(tsqlParserGROUPING)
		}
		{
			p.SetState(2781)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2782)
			p.expression(0)
		}
		{
			p.SetState(2783)
			p.Match(tsqlParserRR_BRACKET)
		}

	case tsqlParserGROUPING_ID:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2785)
			p.Match(tsqlParserGROUPING_ID)
		}
		{
			p.SetState(2786)
			p.Match(tsqlParserLR_BRACKET)
		}
		{
			p.SetState(2787)
			p.Expression_list()
		}
		{
			p.SetState(2788)
			p.Match(tsqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAll_distinct_expressionContext is an interface to support dynamic dispatch.
type IAll_distinct_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_distinct_expressionContext differentiates from other interfaces.
	IsAll_distinct_expressionContext()
}

type All_distinct_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_distinct_expressionContext() *All_distinct_expressionContext {
	var p = new(All_distinct_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_all_distinct_expression
	return p
}

func (*All_distinct_expressionContext) IsAll_distinct_expressionContext() {}

func NewAll_distinct_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_distinct_expressionContext {
	var p = new(All_distinct_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_all_distinct_expression

	return p
}

func (s *All_distinct_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *All_distinct_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *All_distinct_expressionContext) ALL() antlr.TerminalNode {
	return s.GetToken(tsqlParserALL, 0)
}

func (s *All_distinct_expressionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISTINCT, 0)
}

func (s *All_distinct_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_distinct_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *All_distinct_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAll_distinct_expression(s)
	}
}

func (s *All_distinct_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAll_distinct_expression(s)
	}
}

func (p *tsqlParser) All_distinct_expression() (localctx IAll_distinct_expressionContext) {
	localctx = NewAll_distinct_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, tsqlParserRULE_all_distinct_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserALL || _la == tsqlParserDISTINCT {
		p.SetState(2792)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserALL || _la == tsqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(2795)
		p.expression(0)
	}

	return localctx
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_over_clause
	return p
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOVER, 0)
}

func (s *Over_clauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTITION, 0)
}

func (s *Over_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBY, 0)
}

func (s *Over_clauseContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Over_clauseContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Over_clauseContext) Row_or_range_clause() IRow_or_range_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRow_or_range_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRow_or_range_clauseContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (p *tsqlParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, tsqlParserRULE_over_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2797)
		p.Match(tsqlParserOVER)
	}
	{
		p.SetState(2798)
		p.Match(tsqlParserLR_BRACKET)
	}
	p.SetState(2802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserPARTITION {
		{
			p.SetState(2799)
			p.Match(tsqlParserPARTITION)
		}
		{
			p.SetState(2800)
			p.Match(tsqlParserBY)
		}
		{
			p.SetState(2801)
			p.Expression_list()
		}

	}
	p.SetState(2805)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserORDER {
		{
			p.SetState(2804)
			p.Order_by_clause()
		}

	}
	p.SetState(2808)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserRANGE || _la == tsqlParserROWS {
		{
			p.SetState(2807)
			p.Row_or_range_clause()
		}

	}
	{
		p.SetState(2810)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IRow_or_range_clauseContext is an interface to support dynamic dispatch.
type IRow_or_range_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRow_or_range_clauseContext differentiates from other interfaces.
	IsRow_or_range_clauseContext()
}

type Row_or_range_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_or_range_clauseContext() *Row_or_range_clauseContext {
	var p = new(Row_or_range_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_row_or_range_clause
	return p
}

func (*Row_or_range_clauseContext) IsRow_or_range_clauseContext() {}

func NewRow_or_range_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_or_range_clauseContext {
	var p = new(Row_or_range_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_row_or_range_clause

	return p
}

func (s *Row_or_range_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_or_range_clauseContext) Window_frame_extent() IWindow_frame_extentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_extentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_extentContext)
}

func (s *Row_or_range_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Row_or_range_clauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANGE, 0)
}

func (s *Row_or_range_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_or_range_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_or_range_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterRow_or_range_clause(s)
	}
}

func (s *Row_or_range_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitRow_or_range_clause(s)
	}
}

func (p *tsqlParser) Row_or_range_clause() (localctx IRow_or_range_clauseContext) {
	localctx = NewRow_or_range_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, tsqlParserRULE_row_or_range_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2812)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserRANGE || _la == tsqlParserROWS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(2813)
		p.Window_frame_extent()
	}

	return localctx
}

// IWindow_frame_extentContext is an interface to support dynamic dispatch.
type IWindow_frame_extentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_extentContext differentiates from other interfaces.
	IsWindow_frame_extentContext()
}

type Window_frame_extentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_extentContext() *Window_frame_extentContext {
	var p = new(Window_frame_extentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_extent
	return p
}

func (*Window_frame_extentContext) IsWindow_frame_extentContext() {}

func NewWindow_frame_extentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_extentContext {
	var p = new(Window_frame_extentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_extent

	return p
}

func (s *Window_frame_extentContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_extentContext) Window_frame_preceding() IWindow_frame_precedingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_precedingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_precedingContext)
}

func (s *Window_frame_extentContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(tsqlParserBETWEEN, 0)
}

func (s *Window_frame_extentContext) AllWindow_frame_bound() []IWindow_frame_boundContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_frame_boundContext)(nil)).Elem())
	var tst = make([]IWindow_frame_boundContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_frame_boundContext)
		}
	}

	return tst
}

func (s *Window_frame_extentContext) Window_frame_bound(i int) IWindow_frame_boundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_boundContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundContext)
}

func (s *Window_frame_extentContext) AND() antlr.TerminalNode {
	return s.GetToken(tsqlParserAND, 0)
}

func (s *Window_frame_extentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_extentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_extentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_extent(s)
	}
}

func (s *Window_frame_extentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_extent(s)
	}
}

func (p *tsqlParser) Window_frame_extent() (localctx IWindow_frame_extentContext) {
	localctx = NewWindow_frame_extentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, tsqlParserRULE_window_frame_extent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2821)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserCURRENT, tsqlParserUNBOUNDED, tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2815)
			p.Window_frame_preceding()
		}

	case tsqlParserBETWEEN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2816)
			p.Match(tsqlParserBETWEEN)
		}
		{
			p.SetState(2817)
			p.Window_frame_bound()
		}
		{
			p.SetState(2818)
			p.Match(tsqlParserAND)
		}
		{
			p.SetState(2819)
			p.Window_frame_bound()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_boundContext is an interface to support dynamic dispatch.
type IWindow_frame_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_boundContext differentiates from other interfaces.
	IsWindow_frame_boundContext()
}

type Window_frame_boundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_boundContext() *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_bound
	return p
}

func (*Window_frame_boundContext) IsWindow_frame_boundContext() {}

func NewWindow_frame_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_bound

	return p
}

func (s *Window_frame_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_boundContext) Window_frame_preceding() IWindow_frame_precedingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_precedingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_precedingContext)
}

func (s *Window_frame_boundContext) Window_frame_following() IWindow_frame_followingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_followingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_followingContext)
}

func (s *Window_frame_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_bound(s)
	}
}

func (p *tsqlParser) Window_frame_bound() (localctx IWindow_frame_boundContext) {
	localctx = NewWindow_frame_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, tsqlParserRULE_window_frame_bound)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2825)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 412, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2823)
			p.Window_frame_preceding()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2824)
			p.Window_frame_following()
		}

	}

	return localctx
}

// IWindow_frame_precedingContext is an interface to support dynamic dispatch.
type IWindow_frame_precedingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_precedingContext differentiates from other interfaces.
	IsWindow_frame_precedingContext()
}

type Window_frame_precedingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_precedingContext() *Window_frame_precedingContext {
	var p = new(Window_frame_precedingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_preceding
	return p
}

func (*Window_frame_precedingContext) IsWindow_frame_precedingContext() {}

func NewWindow_frame_precedingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_precedingContext {
	var p = new(Window_frame_precedingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_preceding

	return p
}

func (s *Window_frame_precedingContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_precedingContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNBOUNDED, 0)
}

func (s *Window_frame_precedingContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRECEDING, 0)
}

func (s *Window_frame_precedingContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Window_frame_precedingContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCURRENT, 0)
}

func (s *Window_frame_precedingContext) ROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, 0)
}

func (s *Window_frame_precedingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_precedingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_precedingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_preceding(s)
	}
}

func (s *Window_frame_precedingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_preceding(s)
	}
}

func (p *tsqlParser) Window_frame_preceding() (localctx IWindow_frame_precedingContext) {
	localctx = NewWindow_frame_precedingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, tsqlParserRULE_window_frame_preceding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2833)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2827)
			p.Match(tsqlParserUNBOUNDED)
		}
		{
			p.SetState(2828)
			p.Match(tsqlParserPRECEDING)
		}

	case tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2829)
			p.Match(tsqlParserDECIMAL)
		}
		{
			p.SetState(2830)
			p.Match(tsqlParserPRECEDING)
		}

	case tsqlParserCURRENT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2831)
			p.Match(tsqlParserCURRENT)
		}
		{
			p.SetState(2832)
			p.Match(tsqlParserROW)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_followingContext is an interface to support dynamic dispatch.
type IWindow_frame_followingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_followingContext differentiates from other interfaces.
	IsWindow_frame_followingContext()
}

type Window_frame_followingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_followingContext() *Window_frame_followingContext {
	var p = new(Window_frame_followingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_window_frame_following
	return p
}

func (*Window_frame_followingContext) IsWindow_frame_followingContext() {}

func NewWindow_frame_followingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_followingContext {
	var p = new(Window_frame_followingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_window_frame_following

	return p
}

func (s *Window_frame_followingContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_followingContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNBOUNDED, 0)
}

func (s *Window_frame_followingContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOLLOWING, 0)
}

func (s *Window_frame_followingContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Window_frame_followingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_followingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_followingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterWindow_frame_following(s)
	}
}

func (s *Window_frame_followingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitWindow_frame_following(s)
	}
}

func (p *tsqlParser) Window_frame_following() (localctx IWindow_frame_followingContext) {
	localctx = NewWindow_frame_followingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, tsqlParserRULE_window_frame_following)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2839)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserUNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2835)
			p.Match(tsqlParserUNBOUNDED)
		}
		{
			p.SetState(2836)
			p.Match(tsqlParserFOLLOWING)
		}

	case tsqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2837)
			p.Match(tsqlParserDECIMAL)
		}
		{
			p.SetState(2838)
			p.Match(tsqlParserFOLLOWING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_database_optionContext is an interface to support dynamic dispatch.
type ICreate_database_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_optionContext differentiates from other interfaces.
	IsCreate_database_optionContext()
}

type Create_database_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_optionContext() *Create_database_optionContext {
	var p = new(Create_database_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_create_database_option
	return p
}

func (*Create_database_optionContext) IsCreate_database_optionContext() {}

func NewCreate_database_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_optionContext {
	var p = new(Create_database_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_create_database_option

	return p
}

func (s *Create_database_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_optionContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILESTREAM, 0)
}

func (s *Create_database_optionContext) AllDatabase_filestream_option() []IDatabase_filestream_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem())
	var tst = make([]IDatabase_filestream_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_filestream_optionContext)
		}
	}

	return tst
}

func (s *Create_database_optionContext) Database_filestream_option(i int) IDatabase_filestream_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_filestream_optionContext)
}

func (s *Create_database_optionContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_LANGUAGE, 0)
}

func (s *Create_database_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Create_database_optionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_database_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Create_database_optionContext) DEFAULT_FULLTEXT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT_FULLTEXT_LANGUAGE, 0)
}

func (s *Create_database_optionContext) NESTED_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(tsqlParserNESTED_TRIGGERS, 0)
}

func (s *Create_database_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Create_database_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *Create_database_optionContext) TRANSFORM_NOISE_WORDS() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRANSFORM_NOISE_WORDS, 0)
}

func (s *Create_database_optionContext) TWO_DIGIT_YEAR_CUTOFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserTWO_DIGIT_YEAR_CUTOFF, 0)
}

func (s *Create_database_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *Create_database_optionContext) DB_CHAINING() antlr.TerminalNode {
	return s.GetToken(tsqlParserDB_CHAINING, 0)
}

func (s *Create_database_optionContext) TRUSTWORTHY() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRUSTWORTHY, 0)
}

func (s *Create_database_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCreate_database_option(s)
	}
}

func (p *tsqlParser) Create_database_option() (localctx ICreate_database_optionContext) {
	localctx = NewCreate_database_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, tsqlParserRULE_create_database_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2875)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFILESTREAM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2841)
			p.Match(tsqlParserFILESTREAM)
		}

		{
			p.SetState(2842)
			p.Database_filestream_option()
		}
		p.SetState(2847)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 415, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2843)
					p.Match(tsqlParserCOMMA)
				}
				{
					p.SetState(2844)
					p.Database_filestream_option()
				}

			}
			p.SetState(2849)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 415, p.GetParserRuleContext())
		}

	case tsqlParserDEFAULT_LANGUAGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2850)
			p.Match(tsqlParserDEFAULT_LANGUAGE)
		}
		{
			p.SetState(2851)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2854)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(2852)
				p.Id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(2853)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserDEFAULT_FULLTEXT_LANGUAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2856)
			p.Match(tsqlParserDEFAULT_FULLTEXT_LANGUAGE)
		}
		{
			p.SetState(2857)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2860)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
			{
				p.SetState(2858)
				p.Id()
			}

		case tsqlParserSTRING:
			{
				p.SetState(2859)
				p.Match(tsqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case tsqlParserNESTED_TRIGGERS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2862)
			p.Match(tsqlParserNESTED_TRIGGERS)
		}
		{
			p.SetState(2863)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2864)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserTRANSFORM_NOISE_WORDS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2865)
			p.Match(tsqlParserTRANSFORM_NOISE_WORDS)
		}
		{
			p.SetState(2866)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2867)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserTWO_DIGIT_YEAR_CUTOFF:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2868)
			p.Match(tsqlParserTWO_DIGIT_YEAR_CUTOFF)
		}
		{
			p.SetState(2869)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2870)
			p.Match(tsqlParserDECIMAL)
		}

	case tsqlParserDB_CHAINING:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2871)
			p.Match(tsqlParserDB_CHAINING)
		}
		p.SetState(2872)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserTRUSTWORTHY:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2873)
			p.Match(tsqlParserTRUSTWORTHY)
		}
		p.SetState(2874)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserOFF || _la == tsqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDatabase_filestream_optionContext is an interface to support dynamic dispatch.
type IDatabase_filestream_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_filestream_optionContext differentiates from other interfaces.
	IsDatabase_filestream_optionContext()
}

type Database_filestream_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_filestream_optionContext() *Database_filestream_optionContext {
	var p = new(Database_filestream_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_database_filestream_option
	return p
}

func (*Database_filestream_optionContext) IsDatabase_filestream_optionContext() {}

func NewDatabase_filestream_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_filestream_optionContext {
	var p = new(Database_filestream_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_database_filestream_option

	return p
}

func (s *Database_filestream_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_filestream_optionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *Database_filestream_optionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *Database_filestream_optionContext) NON_TRANSACTED_ACCESS() antlr.TerminalNode {
	return s.GetToken(tsqlParserNON_TRANSACTED_ACCESS, 0)
}

func (s *Database_filestream_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, 0)
}

func (s *Database_filestream_optionContext) DIRECTORY_NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserDIRECTORY_NAME, 0)
}

func (s *Database_filestream_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *Database_filestream_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *Database_filestream_optionContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Database_filestream_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULL, 0)
}

func (s *Database_filestream_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_filestream_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_filestream_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDatabase_filestream_option(s)
	}
}

func (s *Database_filestream_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDatabase_filestream_option(s)
	}
}

func (p *tsqlParser) Database_filestream_option() (localctx IDatabase_filestream_optionContext) {
	localctx = NewDatabase_filestream_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, tsqlParserRULE_database_filestream_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2877)
		p.Match(tsqlParserLR_BRACKET)
	}
	p.SetState(2884)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserNON_TRANSACTED_ACCESS:
		{
			p.SetState(2878)
			p.Match(tsqlParserNON_TRANSACTED_ACCESS)
		}
		{
			p.SetState(2879)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2880)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFULL || _la == tsqlParserOFF || _la == tsqlParserREAD_ONLY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case tsqlParserDIRECTORY_NAME:
		{
			p.SetState(2881)
			p.Match(tsqlParserDIRECTORY_NAME)
		}
		{
			p.SetState(2882)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2883)
			p.Match(tsqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2886)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IDatabase_file_specContext is an interface to support dynamic dispatch.
type IDatabase_file_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_file_specContext differentiates from other interfaces.
	IsDatabase_file_specContext()
}

type Database_file_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_file_specContext() *Database_file_specContext {
	var p = new(Database_file_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_database_file_spec
	return p
}

func (*Database_file_specContext) IsDatabase_file_specContext() {}

func NewDatabase_file_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_file_specContext {
	var p = new(Database_file_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_database_file_spec

	return p
}

func (s *Database_file_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_file_specContext) File_group() IFile_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_groupContext)
}

func (s *Database_file_specContext) File_spec() IFile_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_specContext)
}

func (s *Database_file_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_file_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_file_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDatabase_file_spec(s)
	}
}

func (s *Database_file_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDatabase_file_spec(s)
	}
}

func (p *tsqlParser) Database_file_spec() (localctx IDatabase_file_specContext) {
	localctx = NewDatabase_file_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, tsqlParserRULE_database_file_spec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2890)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFILEGROUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2888)
			p.File_group()
		}

	case tsqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2889)
			p.File_spec()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFile_groupContext is an interface to support dynamic dispatch.
type IFile_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_groupContext differentiates from other interfaces.
	IsFile_groupContext()
}

type File_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_groupContext() *File_groupContext {
	var p = new(File_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_file_group
	return p
}

func (*File_groupContext) IsFile_groupContext() {}

func NewFile_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_groupContext {
	var p = new(File_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_file_group

	return p
}

func (s *File_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *File_groupContext) FILEGROUP() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILEGROUP, 0)
}

func (s *File_groupContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *File_groupContext) AllFile_spec() []IFile_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFile_specContext)(nil)).Elem())
	var tst = make([]IFile_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFile_specContext)
		}
	}

	return tst
}

func (s *File_groupContext) File_spec(i int) IFile_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFile_specContext)
}

func (s *File_groupContext) AllCONTAINS() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserCONTAINS)
}

func (s *File_groupContext) CONTAINS(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTAINS, i)
}

func (s *File_groupContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILESTREAM, 0)
}

func (s *File_groupContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(tsqlParserDEFAULT, 0)
}

func (s *File_groupContext) MEMORY_OPTIMIZED_DATA() antlr.TerminalNode {
	return s.GetToken(tsqlParserMEMORY_OPTIMIZED_DATA, 0)
}

func (s *File_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFile_group(s)
	}
}

func (s *File_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFile_group(s)
	}
}

func (p *tsqlParser) File_group() (localctx IFile_groupContext) {
	localctx = NewFile_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, tsqlParserRULE_file_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2892)
		p.Match(tsqlParserFILEGROUP)
	}
	{
		p.SetState(2893)
		p.Id()
	}
	p.SetState(2896)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2894)
			p.Match(tsqlParserCONTAINS)
		}
		{
			p.SetState(2895)
			p.Match(tsqlParserFILESTREAM)
		}

	}
	p.SetState(2899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserDEFAULT {
		{
			p.SetState(2898)
			p.Match(tsqlParserDEFAULT)
		}

	}
	p.SetState(2903)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCONTAINS {
		{
			p.SetState(2901)
			p.Match(tsqlParserCONTAINS)
		}
		{
			p.SetState(2902)
			p.Match(tsqlParserMEMORY_OPTIMIZED_DATA)
		}

	}
	{
		p.SetState(2905)
		p.File_spec()
	}
	p.SetState(2910)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2906)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(2907)
				p.File_spec()
			}

		}
		p.SetState(2912)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext())
	}

	return localctx
}

// IFile_specContext is an interface to support dynamic dispatch.
type IFile_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFile returns the file token.
	GetFile() antlr.Token

	// SetFile sets the file token.
	SetFile(antlr.Token)

	// IsFile_specContext differentiates from other interfaces.
	IsFile_specContext()
}

type File_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	file   antlr.Token
}

func NewEmptyFile_specContext() *File_specContext {
	var p = new(File_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_file_spec
	return p
}

func (*File_specContext) IsFile_specContext() {}

func NewFile_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_specContext {
	var p = new(File_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_file_spec

	return p
}

func (s *File_specContext) GetParser() antlr.Parser { return s.parser }

func (s *File_specContext) GetFile() antlr.Token { return s.file }

func (s *File_specContext) SetFile(v antlr.Token) { s.file = v }

func (s *File_specContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserLR_BRACKET, 0)
}

func (s *File_specContext) NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserNAME, 0)
}

func (s *File_specContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserEQUAL)
}

func (s *File_specContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserEQUAL, i)
}

func (s *File_specContext) FILENAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILENAME, 0)
}

func (s *File_specContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(tsqlParserRR_BRACKET, 0)
}

func (s *File_specContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserSTRING)
}

func (s *File_specContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, i)
}

func (s *File_specContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *File_specContext) SIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIZE, 0)
}

func (s *File_specContext) AllFile_size() []IFile_sizeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFile_sizeContext)(nil)).Elem())
	var tst = make([]IFile_sizeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFile_sizeContext)
		}
	}

	return tst
}

func (s *File_specContext) File_size(i int) IFile_sizeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_sizeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFile_sizeContext)
}

func (s *File_specContext) MAXSIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXSIZE, 0)
}

func (s *File_specContext) FILEGROWTH() antlr.TerminalNode {
	return s.GetToken(tsqlParserFILEGROWTH, 0)
}

func (s *File_specContext) UNLIMITED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNLIMITED, 0)
}

func (s *File_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFile_spec(s)
	}
}

func (s *File_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFile_spec(s)
	}
}

func (p *tsqlParser) File_spec() (localctx IFile_specContext) {
	localctx = NewFile_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, tsqlParserRULE_file_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2913)
		p.Match(tsqlParserLR_BRACKET)
	}
	{
		p.SetState(2914)
		p.Match(tsqlParserNAME)
	}
	{
		p.SetState(2915)
		p.Match(tsqlParserEQUAL)
	}
	p.SetState(2918)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		{
			p.SetState(2916)
			p.Id()
		}

	case tsqlParserSTRING:
		{
			p.SetState(2917)
			p.Match(tsqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOMMA {
		{
			p.SetState(2920)
			p.Match(tsqlParserCOMMA)
		}

	}
	{
		p.SetState(2923)
		p.Match(tsqlParserFILENAME)
	}
	{
		p.SetState(2924)
		p.Match(tsqlParserEQUAL)
	}
	{
		p.SetState(2925)

		var _m = p.Match(tsqlParserSTRING)

		localctx.(*File_specContext).file = _m
	}
	p.SetState(2927)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserCOMMA {
		{
			p.SetState(2926)
			p.Match(tsqlParserCOMMA)
		}

	}
	p.SetState(2935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserSIZE {
		{
			p.SetState(2929)
			p.Match(tsqlParserSIZE)
		}
		{
			p.SetState(2930)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2931)
			p.File_size()
		}
		p.SetState(2933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2932)
				p.Match(tsqlParserCOMMA)
			}

		}

	}
	p.SetState(2946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserMAXSIZE {
		{
			p.SetState(2937)
			p.Match(tsqlParserMAXSIZE)
		}
		{
			p.SetState(2938)
			p.Match(tsqlParserEQUAL)
		}
		p.SetState(2941)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case tsqlParserDECIMAL:
			{
				p.SetState(2939)
				p.File_size()
			}

		case tsqlParserUNLIMITED:
			{
				p.SetState(2940)
				p.Match(tsqlParserUNLIMITED)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2944)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2943)
				p.Match(tsqlParserCOMMA)
			}

		}

	}
	p.SetState(2954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserFILEGROWTH {
		{
			p.SetState(2948)
			p.Match(tsqlParserFILEGROWTH)
		}
		{
			p.SetState(2949)
			p.Match(tsqlParserEQUAL)
		}
		{
			p.SetState(2950)
			p.File_size()
		}
		p.SetState(2952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(2951)
				p.Match(tsqlParserCOMMA)
			}

		}

	}
	{
		p.SetState(2956)
		p.Match(tsqlParserRR_BRACKET)
	}

	return localctx
}

// IFull_table_nameContext is an interface to support dynamic dispatch.
type IFull_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer returns the server rule contexts.
	GetServer() IIdContext

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetServer sets the server rule contexts.
	SetServer(IIdContext)

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsFull_table_nameContext differentiates from other interfaces.
	IsFull_table_nameContext()
}

type Full_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	server   IIdContext
	database IIdContext
	schema   IIdContext
	table    IIdContext
}

func NewEmptyFull_table_nameContext() *Full_table_nameContext {
	var p = new(Full_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_full_table_name
	return p
}

func (*Full_table_nameContext) IsFull_table_nameContext() {}

func NewFull_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_table_nameContext {
	var p = new(Full_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_full_table_name

	return p
}

func (s *Full_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_table_nameContext) GetServer() IIdContext { return s.server }

func (s *Full_table_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Full_table_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Full_table_nameContext) GetTable() IIdContext { return s.table }

func (s *Full_table_nameContext) SetServer(v IIdContext) { s.server = v }

func (s *Full_table_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Full_table_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Full_table_nameContext) SetTable(v IIdContext) { s.table = v }

func (s *Full_table_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Full_table_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Full_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFull_table_name(s)
	}
}

func (s *Full_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFull_table_name(s)
	}
}

func (p *tsqlParser) Full_table_name() (localctx IFull_table_nameContext) {
	localctx = NewFull_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, tsqlParserRULE_full_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2975)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2958)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).server = _x
		}
		{
			p.SetState(2959)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2960)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).database = _x
		}
		{
			p.SetState(2961)
			p.Match(tsqlParserDOT)
		}
		{
			p.SetState(2962)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).schema = _x
		}
		{
			p.SetState(2963)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2965)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).database = _x
		}
		{
			p.SetState(2966)
			p.Match(tsqlParserDOT)
		}
		p.SetState(2968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
			{
				p.SetState(2967)

				var _x = p.Id()

				localctx.(*Full_table_nameContext).schema = _x
			}

		}
		{
			p.SetState(2970)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(2972)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).schema = _x
		}
		{
			p.SetState(2973)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(2977)

		var _x = p.Id()

		localctx.(*Full_table_nameContext).table = _x
	}

	return localctx
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	database IIdContext
	schema   IIdContext
	table    IIdContext
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Table_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Table_nameContext) GetTable() IIdContext { return s.table }

func (s *Table_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Table_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Table_nameContext) SetTable(v IIdContext) { s.table = v }

func (s *Table_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Table_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (p *tsqlParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, tsqlParserRULE_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2989)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2979)

			var _x = p.Id()

			localctx.(*Table_nameContext).database = _x
		}
		{
			p.SetState(2980)
			p.Match(tsqlParserDOT)
		}
		p.SetState(2982)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
			{
				p.SetState(2981)

				var _x = p.Id()

				localctx.(*Table_nameContext).schema = _x
			}

		}
		{
			p.SetState(2984)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2986)

			var _x = p.Id()

			localctx.(*Table_nameContext).schema = _x
		}
		{
			p.SetState(2987)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(2991)

		var _x = p.Id()

		localctx.(*Table_nameContext).table = _x
	}

	return localctx
}

// ISimple_nameContext is an interface to support dynamic dispatch.
type ISimple_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsSimple_nameContext differentiates from other interfaces.
	IsSimple_nameContext()
}

type Simple_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IIdContext
	name   IIdContext
}

func NewEmptySimple_nameContext() *Simple_nameContext {
	var p = new(Simple_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_simple_name
	return p
}

func (*Simple_nameContext) IsSimple_nameContext() {}

func NewSimple_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_nameContext {
	var p = new(Simple_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_simple_name

	return p
}

func (s *Simple_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Simple_nameContext) GetName() IIdContext { return s.name }

func (s *Simple_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Simple_nameContext) SetName(v IIdContext) { s.name = v }

func (s *Simple_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Simple_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Simple_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSimple_name(s)
	}
}

func (s *Simple_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSimple_name(s)
	}
}

func (p *tsqlParser) Simple_name() (localctx ISimple_nameContext) {
	localctx = NewSimple_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, tsqlParserRULE_simple_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2996)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 439, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2993)

			var _x = p.Id()

			localctx.(*Simple_nameContext).schema = _x
		}
		{
			p.SetState(2994)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(2998)

		var _x = p.Id()

		localctx.(*Simple_nameContext).name = _x
	}

	return localctx
}

// IFunc_proc_nameContext is an interface to support dynamic dispatch.
type IFunc_proc_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetProcedure returns the procedure rule contexts.
	GetProcedure() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetProcedure sets the procedure rule contexts.
	SetProcedure(IIdContext)

	// IsFunc_proc_nameContext differentiates from other interfaces.
	IsFunc_proc_nameContext()
}

type Func_proc_nameContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	database  IIdContext
	schema    IIdContext
	procedure IIdContext
}

func NewEmptyFunc_proc_nameContext() *Func_proc_nameContext {
	var p = new(Func_proc_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_func_proc_name
	return p
}

func (*Func_proc_nameContext) IsFunc_proc_nameContext() {}

func NewFunc_proc_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_proc_nameContext {
	var p = new(Func_proc_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_func_proc_name

	return p
}

func (s *Func_proc_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_proc_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Func_proc_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Func_proc_nameContext) GetProcedure() IIdContext { return s.procedure }

func (s *Func_proc_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Func_proc_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Func_proc_nameContext) SetProcedure(v IIdContext) { s.procedure = v }

func (s *Func_proc_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Func_proc_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Func_proc_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_proc_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_proc_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFunc_proc_name(s)
	}
}

func (s *Func_proc_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFunc_proc_name(s)
	}
}

func (p *tsqlParser) Func_proc_name() (localctx IFunc_proc_nameContext) {
	localctx = NewFunc_proc_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, tsqlParserRULE_func_proc_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3010)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3000)

			var _x = p.Id()

			localctx.(*Func_proc_nameContext).database = _x
		}
		{
			p.SetState(3001)
			p.Match(tsqlParserDOT)
		}
		p.SetState(3003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserDOUBLE_QUOTE_ID-388))|(1<<(tsqlParserSQUARE_BRACKET_ID-388))|(1<<(tsqlParserID-388)))) != 0) {
			{
				p.SetState(3002)

				var _x = p.Id()

				localctx.(*Func_proc_nameContext).schema = _x
			}

		}
		{
			p.SetState(3005)
			p.Match(tsqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3007)

			var _x = p.Id()

			localctx.(*Func_proc_nameContext).schema = _x
		}

		{
			p.SetState(3008)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(3012)

		var _x = p.Id()

		localctx.(*Func_proc_nameContext).procedure = _x
	}

	return localctx
}

// IDdl_objectContext is an interface to support dynamic dispatch.
type IDdl_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_objectContext differentiates from other interfaces.
	IsDdl_objectContext()
}

type Ddl_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_objectContext() *Ddl_objectContext {
	var p = new(Ddl_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_ddl_object
	return p
}

func (*Ddl_objectContext) IsDdl_objectContext() {}

func NewDdl_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_objectContext {
	var p = new(Ddl_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_ddl_object

	return p
}

func (s *Ddl_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_objectContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Ddl_objectContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Ddl_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDdl_object(s)
	}
}

func (s *Ddl_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDdl_object(s)
	}
}

func (p *tsqlParser) Ddl_object() (localctx IDdl_objectContext) {
	localctx = NewDdl_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, tsqlParserRULE_ddl_object)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3016)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3014)
			p.Full_table_name()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3015)
			p.Match(tsqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFull_column_nameContext is an interface to support dynamic dispatch.
type IFull_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_column_nameContext differentiates from other interfaces.
	IsFull_column_nameContext()
}

type Full_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_column_nameContext() *Full_column_nameContext {
	var p = new(Full_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_full_column_name
	return p
}

func (*Full_column_nameContext) IsFull_column_nameContext() {}

func NewFull_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_column_nameContext {
	var p = new(Full_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_full_column_name

	return p
}

func (s *Full_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_column_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Full_column_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Full_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFull_column_name(s)
	}
}

func (s *Full_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFull_column_name(s)
	}
}

func (p *tsqlParser) Full_column_name() (localctx IFull_column_nameContext) {
	localctx = NewFull_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, tsqlParserRULE_full_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3021)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 443, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3018)
			p.Table_name()
		}
		{
			p.SetState(3019)
			p.Match(tsqlParserDOT)
		}

	}
	{
		p.SetState(3023)
		p.Id()
	}

	return localctx
}

// IColumn_name_listContext is an interface to support dynamic dispatch.
type IColumn_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_name_listContext differentiates from other interfaces.
	IsColumn_name_listContext()
}

type Column_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_listContext() *Column_name_listContext {
	var p = new(Column_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_column_name_list
	return p
}

func (*Column_name_listContext) IsColumn_name_listContext() {}

func NewColumn_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_listContext {
	var p = new(Column_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_column_name_list

	return p
}

func (s *Column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_listContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Column_name_listContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterColumn_name_list(s)
	}
}

func (s *Column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitColumn_name_list(s)
	}
}

func (p *tsqlParser) Column_name_list() (localctx IColumn_name_listContext) {
	localctx = NewColumn_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, tsqlParserRULE_column_name_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3025)
		p.Id()
	}
	p.SetState(3030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == tsqlParserCOMMA {
		{
			p.SetState(3026)
			p.Match(tsqlParserCOMMA)
		}
		{
			p.SetState(3027)
			p.Id()
		}

		p.SetState(3032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICursor_nameContext is an interface to support dynamic dispatch.
type ICursor_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_nameContext differentiates from other interfaces.
	IsCursor_nameContext()
}

type Cursor_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_nameContext() *Cursor_nameContext {
	var p = new(Cursor_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_cursor_name
	return p
}

func (*Cursor_nameContext) IsCursor_nameContext() {}

func NewCursor_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_nameContext {
	var p = new(Cursor_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_cursor_name

	return p
}

func (s *Cursor_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Cursor_nameContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL_ID, 0)
}

func (s *Cursor_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterCursor_name(s)
	}
}

func (s *Cursor_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitCursor_name(s)
	}
}

func (p *tsqlParser) Cursor_name() (localctx ICursor_nameContext) {
	localctx = NewCursor_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, tsqlParserRULE_cursor_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3035)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3033)
			p.Id()
		}

	case tsqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3034)
			p.Match(tsqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOn_offContext is an interface to support dynamic dispatch.
type IOn_offContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_offContext differentiates from other interfaces.
	IsOn_offContext()
}

type On_offContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_offContext() *On_offContext {
	var p = new(On_offContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_on_off
	return p
}

func (*On_offContext) IsOn_offContext() {}

func NewOn_offContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_offContext {
	var p = new(On_offContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_on_off

	return p
}

func (s *On_offContext) GetParser() antlr.Parser { return s.parser }

func (s *On_offContext) ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserON, 0)
}

func (s *On_offContext) OFF() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFF, 0)
}

func (s *On_offContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_offContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_offContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterOn_off(s)
	}
}

func (s *On_offContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitOn_off(s)
	}
}

func (p *tsqlParser) On_off() (localctx IOn_offContext) {
	localctx = NewOn_offContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, tsqlParserRULE_on_off)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3037)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserOFF || _la == tsqlParserON) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IClusteredContext is an interface to support dynamic dispatch.
type IClusteredContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClusteredContext differentiates from other interfaces.
	IsClusteredContext()
}

type ClusteredContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClusteredContext() *ClusteredContext {
	var p = new(ClusteredContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_clustered
	return p
}

func (*ClusteredContext) IsClusteredContext() {}

func NewClusteredContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClusteredContext {
	var p = new(ClusteredContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_clustered

	return p
}

func (s *ClusteredContext) GetParser() antlr.Parser { return s.parser }

func (s *ClusteredContext) CLUSTERED() antlr.TerminalNode {
	return s.GetToken(tsqlParserCLUSTERED, 0)
}

func (s *ClusteredContext) NONCLUSTERED() antlr.TerminalNode {
	return s.GetToken(tsqlParserNONCLUSTERED, 0)
}

func (s *ClusteredContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClusteredContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClusteredContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterClustered(s)
	}
}

func (s *ClusteredContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitClustered(s)
	}
}

func (p *tsqlParser) Clustered() (localctx IClusteredContext) {
	localctx = NewClusteredContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, tsqlParserRULE_clustered)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3039)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserCLUSTERED || _la == tsqlParserNONCLUSTERED) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// INull_notnullContext is an interface to support dynamic dispatch.
type INull_notnullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_notnullContext differentiates from other interfaces.
	IsNull_notnullContext()
}

type Null_notnullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_notnullContext() *Null_notnullContext {
	var p = new(Null_notnullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_null_notnull
	return p
}

func (*Null_notnullContext) IsNull_notnullContext() {}

func NewNull_notnullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_notnullContext {
	var p = new(Null_notnullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_null_notnull

	return p
}

func (s *Null_notnullContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_notnullContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Null_notnullContext) NOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOT, 0)
}

func (s *Null_notnullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_notnullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_notnullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterNull_notnull(s)
	}
}

func (s *Null_notnullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitNull_notnull(s)
	}
}

func (p *tsqlParser) Null_notnull() (localctx INull_notnullContext) {
	localctx = NewNull_notnullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, tsqlParserRULE_null_notnull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3042)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == tsqlParserNOT {
		{
			p.SetState(3041)
			p.Match(tsqlParserNOT)
		}

	}
	{
		p.SetState(3044)
		p.Match(tsqlParserNULL)
	}

	return localctx
}

// IScalar_function_nameContext is an interface to support dynamic dispatch.
type IScalar_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalar_function_nameContext differentiates from other interfaces.
	IsScalar_function_nameContext()
}

type Scalar_function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalar_function_nameContext() *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_scalar_function_name
	return p
}

func (*Scalar_function_nameContext) IsScalar_function_nameContext() {}

func NewScalar_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_scalar_function_name

	return p
}

func (s *Scalar_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Scalar_function_nameContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Scalar_function_nameContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(tsqlParserRIGHT, 0)
}

func (s *Scalar_function_nameContext) LEFT() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEFT, 0)
}

func (s *Scalar_function_nameContext) BINARY_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY_CHECKSUM, 0)
}

func (s *Scalar_function_nameContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM, 0)
}

func (s *Scalar_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scalar_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scalar_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterScalar_function_name(s)
	}
}

func (s *Scalar_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitScalar_function_name(s)
	}
}

func (p *tsqlParser) Scalar_function_name() (localctx IScalar_function_nameContext) {
	localctx = NewScalar_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, tsqlParserRULE_scalar_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3051)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserDOUBLE_QUOTE_ID, tsqlParserSQUARE_BRACKET_ID, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3046)
			p.Func_proc_name()
		}

	case tsqlParserRIGHT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3047)
			p.Match(tsqlParserRIGHT)
		}

	case tsqlParserLEFT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3048)
			p.Match(tsqlParserLEFT)
		}

	case tsqlParserBINARY_CHECKSUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3049)
			p.Match(tsqlParserBINARY_CHECKSUM)
		}

	case tsqlParserCHECKSUM:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3050)
			p.Match(tsqlParserCHECKSUM)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Data_typeContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(tsqlParserIDENTITY, 0)
}

func (s *Data_typeContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(tsqlParserDECIMAL)
}

func (s *Data_typeContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, i)
}

func (s *Data_typeContext) MAX() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAX, 0)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (p *tsqlParser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, tsqlParserRULE_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3053)
		p.Id()
	}
	p.SetState(3055)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 448, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3054)
			p.Match(tsqlParserIDENTITY)
		}

	}
	p.SetState(3064)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 450, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3057)
			p.Match(tsqlParserLR_BRACKET)
		}
		p.SetState(3058)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserMAX || _la == tsqlParserDECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(3061)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserCOMMA {
			{
				p.SetState(3059)
				p.Match(tsqlParserCOMMA)
			}
			{
				p.SetState(3060)
				p.Match(tsqlParserDECIMAL)
			}

		}
		{
			p.SetState(3063)
			p.Match(tsqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_default_value
	return p
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) NULL() antlr.TerminalNode {
	return s.GetToken(tsqlParserNULL, 0)
}

func (s *Default_valueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (p *tsqlParser) Default_value() (localctx IDefault_valueContext) {
	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, tsqlParserRULE_default_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3068)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserNULL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3066)
			p.Match(tsqlParserNULL)
		}

	case tsqlParserDECIMAL, tsqlParserSTRING, tsqlParserBINARY, tsqlParserFLOAT, tsqlParserREAL, tsqlParserDOLLAR, tsqlParserPLUS, tsqlParserMINUS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3067)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDollar returns the dollar token.
	GetDollar() antlr.Token

	// SetDollar sets the dollar token.
	SetDollar(antlr.Token)

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	dollar antlr.Token
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) GetDollar() antlr.Token { return s.dollar }

func (s *ConstantContext) SetDollar(v antlr.Token) { s.dollar = v }

func (s *ConstantContext) STRING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTRING, 0)
}

func (s *ConstantContext) BINARY() antlr.TerminalNode {
	return s.GetToken(tsqlParserBINARY, 0)
}

func (s *ConstantContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *ConstantContext) Sign() ISignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignContext)
}

func (s *ConstantContext) REAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAL, 0)
}

func (s *ConstantContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(tsqlParserFLOAT, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (p *tsqlParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, tsqlParserRULE_constant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3085)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 455, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3070)
			p.Match(tsqlParserSTRING)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3071)
			p.Match(tsqlParserBINARY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(3073)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPLUS || _la == tsqlParserMINUS {
			{
				p.SetState(3072)
				p.Sign()
			}

		}
		{
			p.SetState(3075)
			p.Match(tsqlParserDECIMAL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(3077)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPLUS || _la == tsqlParserMINUS {
			{
				p.SetState(3076)
				p.Sign()
			}

		}
		p.SetState(3079)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserFLOAT || _la == tsqlParserREAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(3081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == tsqlParserPLUS || _la == tsqlParserMINUS {
			{
				p.SetState(3080)
				p.Sign()
			}

		}
		{
			p.SetState(3083)

			var _m = p.Match(tsqlParserDOLLAR)

			localctx.(*ConstantContext).dollar = _m
		}
		p.SetState(3084)
		_la = p.GetTokenStream().LA(1)

		if !(_la == tsqlParserDECIMAL || _la == tsqlParserFLOAT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ISignContext is an interface to support dynamic dispatch.
type ISignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignContext differentiates from other interfaces.
	IsSignContext()
}

type SignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignContext() *SignContext {
	var p = new(SignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_sign
	return p
}

func (*SignContext) IsSignContext() {}

func NewSignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignContext {
	var p = new(SignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_sign

	return p
}

func (s *SignContext) GetParser() antlr.Parser { return s.parser }
func (s *SignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSign(s)
	}
}

func (s *SignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSign(s)
	}
}

func (p *tsqlParser) Sign() (localctx ISignContext) {
	localctx = NewSignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, tsqlParserRULE_sign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3087)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserPLUS || _la == tsqlParserMINUS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_id
	return p
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) Simple_id() ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *IdContext) DOUBLE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserDOUBLE_QUOTE_ID, 0)
}

func (s *IdContext) SQUARE_BRACKET_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserSQUARE_BRACKET_ID, 0)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterId(s)
	}
}

func (s *IdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitId(s)
	}
}

func (p *tsqlParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, tsqlParserRULE_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3092)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case tsqlParserFORCESEEK, tsqlParserABSOLUTE, tsqlParserAPPLY, tsqlParserAUTO, tsqlParserAVG, tsqlParserBASE64, tsqlParserCALLER, tsqlParserCAST, tsqlParserCATCH, tsqlParserCHECKSUM_AGG, tsqlParserCOMMITTED, tsqlParserCONCAT, tsqlParserCONTROL, tsqlParserCOOKIE, tsqlParserCOUNT, tsqlParserCOUNT_BIG, tsqlParserDELAY, tsqlParserDELETED, tsqlParserDENSE_RANK, tsqlParserDISABLE, tsqlParserDYNAMIC, tsqlParserENCRYPTION, tsqlParserEXPAND, tsqlParserFAST, tsqlParserFAST_FORWARD, tsqlParserFIRST, tsqlParserFOLLOWING, tsqlParserFORCE, tsqlParserFORCED, tsqlParserFORWARD_ONLY, tsqlParserFULLSCAN, tsqlParserGLOBAL, tsqlParserGO, tsqlParserGROUPING, tsqlParserGROUPING_ID, tsqlParserHASH, tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParserIMPERSONATE, tsqlParserINSENSITIVE, tsqlParserINSERTED, tsqlParserISOLATION, tsqlParserKEEP, tsqlParserKEEPFIXED, tsqlParserKEYSET, tsqlParserLAST, tsqlParserLEVEL, tsqlParserLOCAL, tsqlParserLOCK_ESCALATION, tsqlParserLOGIN, tsqlParserLOOP, tsqlParserMARK, tsqlParserMAX, tsqlParserMAXDOP, tsqlParserMAXRECURSION, tsqlParserMIN, tsqlParserMODIFY, tsqlParserNAME, tsqlParserNEXT, tsqlParserNOCOUNT, tsqlParserNOEXPAND, tsqlParserNORECOMPUTE, tsqlParserNTILE, tsqlParserNUMBER, tsqlParserOFFSET, tsqlParserONLINE, tsqlParserONLY, tsqlParserOPTIMISTIC, tsqlParserOPTIMIZE, tsqlParserOUT, tsqlParserOUTPUT, tsqlParserOWNER, tsqlParserPARAMETERIZATION, tsqlParserPARTITION, tsqlParserPATH, tsqlParserPRECEDING, tsqlParserPRIOR, tsqlParserPRIVILEGES, tsqlParserRANGE, tsqlParserRANK, tsqlParserREADONLY, tsqlParserREAD_ONLY, tsqlParserRECOMPILE, tsqlParserRELATIVE, tsqlParserREMOTE, tsqlParserREPEATABLE, tsqlParserROBUST, tsqlParserROOT, tsqlParserROW, tsqlParserROWGUID, tsqlParserROWS, tsqlParserROW_NUMBER, tsqlParserSAMPLE, tsqlParserSCHEMABINDING, tsqlParserSCROLL, tsqlParserSCROLL_LOCKS, tsqlParserSELF, tsqlParserSERIALIZABLE, tsqlParserSIMPLE, tsqlParserSNAPSHOT, tsqlParserSPATIAL_WINDOW_MAX_CELLS, tsqlParserSTATIC, tsqlParserSTATS_STREAM, tsqlParserSTDEV, tsqlParserSTDEVP, tsqlParserSUM, tsqlParserTEXTIMAGE_ON, tsqlParserTHROW, tsqlParserTIES, tsqlParserTIME, tsqlParserTRY, tsqlParserTYPE, tsqlParserTYPE_WARNING, tsqlParserUNBOUNDED, tsqlParserUNCOMMITTED, tsqlParserUNKNOWN, tsqlParserUSING, tsqlParserVAR, tsqlParserVARP, tsqlParserVIEWS, tsqlParserVIEW_METADATA, tsqlParserWORK, tsqlParserXML, tsqlParserXMLNAMESPACES, tsqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3089)
			p.Simple_id()
		}

	case tsqlParserDOUBLE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3090)
			p.Match(tsqlParserDOUBLE_QUOTE_ID)
		}

	case tsqlParserSQUARE_BRACKET_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3091)
			p.Match(tsqlParserSQUARE_BRACKET_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISimple_idContext is an interface to support dynamic dispatch.
type ISimple_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_idContext differentiates from other interfaces.
	IsSimple_idContext()
}

type Simple_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_idContext() *Simple_idContext {
	var p = new(Simple_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_simple_id
	return p
}

func (*Simple_idContext) IsSimple_idContext() {}

func NewSimple_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_idContext {
	var p = new(Simple_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_simple_id

	return p
}

func (s *Simple_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_idContext) ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserID, 0)
}

func (s *Simple_idContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserABSOLUTE, 0)
}

func (s *Simple_idContext) APPLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserAPPLY, 0)
}

func (s *Simple_idContext) AUTO() antlr.TerminalNode {
	return s.GetToken(tsqlParserAUTO, 0)
}

func (s *Simple_idContext) AVG() antlr.TerminalNode {
	return s.GetToken(tsqlParserAVG, 0)
}

func (s *Simple_idContext) BASE64() antlr.TerminalNode {
	return s.GetToken(tsqlParserBASE64, 0)
}

func (s *Simple_idContext) CALLER() antlr.TerminalNode {
	return s.GetToken(tsqlParserCALLER, 0)
}

func (s *Simple_idContext) CAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserCAST, 0)
}

func (s *Simple_idContext) CATCH() antlr.TerminalNode {
	return s.GetToken(tsqlParserCATCH, 0)
}

func (s *Simple_idContext) CHECKSUM_AGG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCHECKSUM_AGG, 0)
}

func (s *Simple_idContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOMMITTED, 0)
}

func (s *Simple_idContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONCAT, 0)
}

func (s *Simple_idContext) CONTROL() antlr.TerminalNode {
	return s.GetToken(tsqlParserCONTROL, 0)
}

func (s *Simple_idContext) COOKIE() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOOKIE, 0)
}

func (s *Simple_idContext) COUNT() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT, 0)
}

func (s *Simple_idContext) COUNT_BIG() antlr.TerminalNode {
	return s.GetToken(tsqlParserCOUNT_BIG, 0)
}

func (s *Simple_idContext) DELAY() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELAY, 0)
}

func (s *Simple_idContext) DELETED() antlr.TerminalNode {
	return s.GetToken(tsqlParserDELETED, 0)
}

func (s *Simple_idContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserDENSE_RANK, 0)
}

func (s *Simple_idContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserDISABLE, 0)
}

func (s *Simple_idContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserDYNAMIC, 0)
}

func (s *Simple_idContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(tsqlParserENCRYPTION, 0)
}

func (s *Simple_idContext) EXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserEXPAND, 0)
}

func (s *Simple_idContext) FAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST, 0)
}

func (s *Simple_idContext) FAST_FORWARD() antlr.TerminalNode {
	return s.GetToken(tsqlParserFAST_FORWARD, 0)
}

func (s *Simple_idContext) FIRST() antlr.TerminalNode {
	return s.GetToken(tsqlParserFIRST, 0)
}

func (s *Simple_idContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(tsqlParserFOLLOWING, 0)
}

func (s *Simple_idContext) FORCE() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCE, 0)
}

func (s *Simple_idContext) FORCESEEK() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCESEEK, 0)
}

func (s *Simple_idContext) FORWARD_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORWARD_ONLY, 0)
}

func (s *Simple_idContext) FULLSCAN() antlr.TerminalNode {
	return s.GetToken(tsqlParserFULLSCAN, 0)
}

func (s *Simple_idContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserGLOBAL, 0)
}

func (s *Simple_idContext) GO() antlr.TerminalNode {
	return s.GetToken(tsqlParserGO, 0)
}

func (s *Simple_idContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING, 0)
}

func (s *Simple_idContext) GROUPING_ID() antlr.TerminalNode {
	return s.GetToken(tsqlParserGROUPING_ID, 0)
}

func (s *Simple_idContext) HASH() antlr.TerminalNode {
	return s.GetToken(tsqlParserHASH, 0)
}

func (s *Simple_idContext) IMPERSONATE() antlr.TerminalNode {
	return s.GetToken(tsqlParserIMPERSONATE, 0)
}

func (s *Simple_idContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSENSITIVE, 0)
}

func (s *Simple_idContext) INSERTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserINSERTED, 0)
}

func (s *Simple_idContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserISOLATION, 0)
}

func (s *Simple_idContext) KEEP() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEP, 0)
}

func (s *Simple_idContext) KEEPFIXED() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEEPFIXED, 0)
}

func (s *Simple_idContext) FORCED() antlr.TerminalNode {
	return s.GetToken(tsqlParserFORCED, 0)
}

func (s *Simple_idContext) KEYSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserKEYSET, 0)
}

func (s *Simple_idContext) IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() antlr.TerminalNode {
	return s.GetToken(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)
}

func (s *Simple_idContext) LAST() antlr.TerminalNode {
	return s.GetToken(tsqlParserLAST, 0)
}

func (s *Simple_idContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLEVEL, 0)
}

func (s *Simple_idContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCAL, 0)
}

func (s *Simple_idContext) LOCK_ESCALATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOCK_ESCALATION, 0)
}

func (s *Simple_idContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOGIN, 0)
}

func (s *Simple_idContext) LOOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserLOOP, 0)
}

func (s *Simple_idContext) MARK() antlr.TerminalNode {
	return s.GetToken(tsqlParserMARK, 0)
}

func (s *Simple_idContext) MAX() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAX, 0)
}

func (s *Simple_idContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXDOP, 0)
}

func (s *Simple_idContext) MAXRECURSION() antlr.TerminalNode {
	return s.GetToken(tsqlParserMAXRECURSION, 0)
}

func (s *Simple_idContext) MIN() antlr.TerminalNode {
	return s.GetToken(tsqlParserMIN, 0)
}

func (s *Simple_idContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(tsqlParserMODIFY, 0)
}

func (s *Simple_idContext) NAME() antlr.TerminalNode {
	return s.GetToken(tsqlParserNAME, 0)
}

func (s *Simple_idContext) NEXT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNEXT, 0)
}

func (s *Simple_idContext) NOCOUNT() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOCOUNT, 0)
}

func (s *Simple_idContext) NOEXPAND() antlr.TerminalNode {
	return s.GetToken(tsqlParserNOEXPAND, 0)
}

func (s *Simple_idContext) NORECOMPUTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNORECOMPUTE, 0)
}

func (s *Simple_idContext) NTILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserNTILE, 0)
}

func (s *Simple_idContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(tsqlParserNUMBER, 0)
}

func (s *Simple_idContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(tsqlParserOFFSET, 0)
}

func (s *Simple_idContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLINE, 0)
}

func (s *Simple_idContext) ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserONLY, 0)
}

func (s *Simple_idContext) OPTIMISTIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMISTIC, 0)
}

func (s *Simple_idContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(tsqlParserOPTIMIZE, 0)
}

func (s *Simple_idContext) OUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUT, 0)
}

func (s *Simple_idContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(tsqlParserOUTPUT, 0)
}

func (s *Simple_idContext) OWNER() antlr.TerminalNode {
	return s.GetToken(tsqlParserOWNER, 0)
}

func (s *Simple_idContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARAMETERIZATION, 0)
}

func (s *Simple_idContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(tsqlParserPARTITION, 0)
}

func (s *Simple_idContext) PATH() antlr.TerminalNode {
	return s.GetToken(tsqlParserPATH, 0)
}

func (s *Simple_idContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRECEDING, 0)
}

func (s *Simple_idContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIOR, 0)
}

func (s *Simple_idContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(tsqlParserPRIVILEGES, 0)
}

func (s *Simple_idContext) RANGE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANGE, 0)
}

func (s *Simple_idContext) RANK() antlr.TerminalNode {
	return s.GetToken(tsqlParserRANK, 0)
}

func (s *Simple_idContext) READONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREADONLY, 0)
}

func (s *Simple_idContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(tsqlParserREAD_ONLY, 0)
}

func (s *Simple_idContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRECOMPILE, 0)
}

func (s *Simple_idContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(tsqlParserRELATIVE, 0)
}

func (s *Simple_idContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREMOTE, 0)
}

func (s *Simple_idContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserREPEATABLE, 0)
}

func (s *Simple_idContext) ROBUST() antlr.TerminalNode {
	return s.GetToken(tsqlParserROBUST, 0)
}

func (s *Simple_idContext) ROOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserROOT, 0)
}

func (s *Simple_idContext) ROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW, 0)
}

func (s *Simple_idContext) ROWGUID() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWGUID, 0)
}

func (s *Simple_idContext) ROWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserROWS, 0)
}

func (s *Simple_idContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(tsqlParserROW_NUMBER, 0)
}

func (s *Simple_idContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSAMPLE, 0)
}

func (s *Simple_idContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCHEMABINDING, 0)
}

func (s *Simple_idContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL, 0)
}

func (s *Simple_idContext) SCROLL_LOCKS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSCROLL_LOCKS, 0)
}

func (s *Simple_idContext) SELF() antlr.TerminalNode {
	return s.GetToken(tsqlParserSELF, 0)
}

func (s *Simple_idContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSERIALIZABLE, 0)
}

func (s *Simple_idContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(tsqlParserSIMPLE, 0)
}

func (s *Simple_idContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(tsqlParserSNAPSHOT, 0)
}

func (s *Simple_idContext) SPATIAL_WINDOW_MAX_CELLS() antlr.TerminalNode {
	return s.GetToken(tsqlParserSPATIAL_WINDOW_MAX_CELLS, 0)
}

func (s *Simple_idContext) STATIC() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATIC, 0)
}

func (s *Simple_idContext) STATS_STREAM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTATS_STREAM, 0)
}

func (s *Simple_idContext) STDEV() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEV, 0)
}

func (s *Simple_idContext) STDEVP() antlr.TerminalNode {
	return s.GetToken(tsqlParserSTDEVP, 0)
}

func (s *Simple_idContext) SUM() antlr.TerminalNode {
	return s.GetToken(tsqlParserSUM, 0)
}

func (s *Simple_idContext) TEXTIMAGE_ON() antlr.TerminalNode {
	return s.GetToken(tsqlParserTEXTIMAGE_ON, 0)
}

func (s *Simple_idContext) THROW() antlr.TerminalNode {
	return s.GetToken(tsqlParserTHROW, 0)
}

func (s *Simple_idContext) TIES() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIES, 0)
}

func (s *Simple_idContext) TIME() antlr.TerminalNode {
	return s.GetToken(tsqlParserTIME, 0)
}

func (s *Simple_idContext) TRY() antlr.TerminalNode {
	return s.GetToken(tsqlParserTRY, 0)
}

func (s *Simple_idContext) TYPE() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE, 0)
}

func (s *Simple_idContext) TYPE_WARNING() antlr.TerminalNode {
	return s.GetToken(tsqlParserTYPE_WARNING, 0)
}

func (s *Simple_idContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNBOUNDED, 0)
}

func (s *Simple_idContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNCOMMITTED, 0)
}

func (s *Simple_idContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(tsqlParserUNKNOWN, 0)
}

func (s *Simple_idContext) USING() antlr.TerminalNode {
	return s.GetToken(tsqlParserUSING, 0)
}

func (s *Simple_idContext) VAR() antlr.TerminalNode {
	return s.GetToken(tsqlParserVAR, 0)
}

func (s *Simple_idContext) VARP() antlr.TerminalNode {
	return s.GetToken(tsqlParserVARP, 0)
}

func (s *Simple_idContext) VIEW_METADATA() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEW_METADATA, 0)
}

func (s *Simple_idContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(tsqlParserVIEWS, 0)
}

func (s *Simple_idContext) WORK() antlr.TerminalNode {
	return s.GetToken(tsqlParserWORK, 0)
}

func (s *Simple_idContext) XML() antlr.TerminalNode {
	return s.GetToken(tsqlParserXML, 0)
}

func (s *Simple_idContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(tsqlParserXMLNAMESPACES, 0)
}

func (s *Simple_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterSimple_id(s)
	}
}

func (s *Simple_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitSimple_id(s)
	}
}

func (p *tsqlParser) Simple_id() (localctx ISimple_idContext) {
	localctx = NewSimple_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, tsqlParserRULE_simple_id)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3094)
	_la = p.GetTokenStream().LA(1)

	if !(_la == tsqlParserFORCESEEK || (((_la-193)&-(0x1f+1)) == 0 && ((1<<uint((_la-193)))&((1<<(tsqlParserABSOLUTE-193))|(1<<(tsqlParserAPPLY-193))|(1<<(tsqlParserAUTO-193))|(1<<(tsqlParserAVG-193))|(1<<(tsqlParserBASE64-193))|(1<<(tsqlParserCALLER-193))|(1<<(tsqlParserCAST-193))|(1<<(tsqlParserCATCH-193))|(1<<(tsqlParserCHECKSUM_AGG-193))|(1<<(tsqlParserCOMMITTED-193))|(1<<(tsqlParserCONCAT-193)))) != 0) || (((_la-225)&-(0x1f+1)) == 0 && ((1<<uint((_la-225)))&((1<<(tsqlParserCONTROL-225))|(1<<(tsqlParserCOOKIE-225))|(1<<(tsqlParserCOUNT-225))|(1<<(tsqlParserCOUNT_BIG-225))|(1<<(tsqlParserDELAY-225))|(1<<(tsqlParserDELETED-225))|(1<<(tsqlParserDENSE_RANK-225))|(1<<(tsqlParserDISABLE-225))|(1<<(tsqlParserDYNAMIC-225))|(1<<(tsqlParserENCRYPTION-225))|(1<<(tsqlParserEXPAND-225))|(1<<(tsqlParserFAST-225))|(1<<(tsqlParserFAST_FORWARD-225)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(tsqlParserFIRST-259))|(1<<(tsqlParserFOLLOWING-259))|(1<<(tsqlParserFORCE-259))|(1<<(tsqlParserFORCED-259))|(1<<(tsqlParserFORWARD_ONLY-259))|(1<<(tsqlParserFULLSCAN-259))|(1<<(tsqlParserGLOBAL-259))|(1<<(tsqlParserGO-259))|(1<<(tsqlParserGROUPING-259))|(1<<(tsqlParserGROUPING_ID-259))|(1<<(tsqlParserHASH-259))|(1<<(tsqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-259))|(1<<(tsqlParserIMPERSONATE-259))|(1<<(tsqlParserINSENSITIVE-259))|(1<<(tsqlParserINSERTED-259))|(1<<(tsqlParserISOLATION-259))|(1<<(tsqlParserKEEP-259))|(1<<(tsqlParserKEEPFIXED-259))|(1<<(tsqlParserKEYSET-259))|(1<<(tsqlParserLAST-259))|(1<<(tsqlParserLEVEL-259))|(1<<(tsqlParserLOCAL-259))|(1<<(tsqlParserLOCK_ESCALATION-259))|(1<<(tsqlParserLOGIN-259))|(1<<(tsqlParserLOOP-259)))) != 0) || (((_la-291)&-(0x1f+1)) == 0 && ((1<<uint((_la-291)))&((1<<(tsqlParserMARK-291))|(1<<(tsqlParserMAX-291))|(1<<(tsqlParserMAXDOP-291))|(1<<(tsqlParserMAXRECURSION-291))|(1<<(tsqlParserMIN-291))|(1<<(tsqlParserMODIFY-291))|(1<<(tsqlParserNAME-291))|(1<<(tsqlParserNEXT-291))|(1<<(tsqlParserNOCOUNT-291))|(1<<(tsqlParserNOEXPAND-291))|(1<<(tsqlParserNORECOMPUTE-291))|(1<<(tsqlParserNTILE-291))|(1<<(tsqlParserNUMBER-291))|(1<<(tsqlParserOFFSET-291))|(1<<(tsqlParserONLINE-291))|(1<<(tsqlParserONLY-291))|(1<<(tsqlParserOPTIMISTIC-291))|(1<<(tsqlParserOPTIMIZE-291))|(1<<(tsqlParserOUT-291)))) != 0) || (((_la-323)&-(0x1f+1)) == 0 && ((1<<uint((_la-323)))&((1<<(tsqlParserOUTPUT-323))|(1<<(tsqlParserOWNER-323))|(1<<(tsqlParserPARAMETERIZATION-323))|(1<<(tsqlParserPARTITION-323))|(1<<(tsqlParserPATH-323))|(1<<(tsqlParserPRECEDING-323))|(1<<(tsqlParserPRIOR-323))|(1<<(tsqlParserPRIVILEGES-323))|(1<<(tsqlParserRANGE-323))|(1<<(tsqlParserRANK-323))|(1<<(tsqlParserREADONLY-323))|(1<<(tsqlParserREAD_ONLY-323))|(1<<(tsqlParserRECOMPILE-323))|(1<<(tsqlParserRELATIVE-323))|(1<<(tsqlParserREMOTE-323))|(1<<(tsqlParserREPEATABLE-323))|(1<<(tsqlParserROBUST-323))|(1<<(tsqlParserROOT-323))|(1<<(tsqlParserROW-323))|(1<<(tsqlParserROWGUID-323))|(1<<(tsqlParserROWS-323))|(1<<(tsqlParserROW_NUMBER-323))|(1<<(tsqlParserSAMPLE-323))|(1<<(tsqlParserSCHEMABINDING-323))|(1<<(tsqlParserSCROLL-323)))) != 0) || (((_la-355)&-(0x1f+1)) == 0 && ((1<<uint((_la-355)))&((1<<(tsqlParserSCROLL_LOCKS-355))|(1<<(tsqlParserSELF-355))|(1<<(tsqlParserSERIALIZABLE-355))|(1<<(tsqlParserSIMPLE-355))|(1<<(tsqlParserSNAPSHOT-355))|(1<<(tsqlParserSPATIAL_WINDOW_MAX_CELLS-355))|(1<<(tsqlParserSTATIC-355))|(1<<(tsqlParserSTATS_STREAM-355))|(1<<(tsqlParserSTDEV-355))|(1<<(tsqlParserSTDEVP-355))|(1<<(tsqlParserSUM-355))|(1<<(tsqlParserTEXTIMAGE_ON-355))|(1<<(tsqlParserTHROW-355))|(1<<(tsqlParserTIES-355))|(1<<(tsqlParserTIME-355))|(1<<(tsqlParserTRY-355))|(1<<(tsqlParserTYPE-355))|(1<<(tsqlParserTYPE_WARNING-355))|(1<<(tsqlParserUNBOUNDED-355))|(1<<(tsqlParserUNCOMMITTED-355))|(1<<(tsqlParserUNKNOWN-355)))) != 0) || (((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(tsqlParserUSING-388))|(1<<(tsqlParserVAR-388))|(1<<(tsqlParserVARP-388))|(1<<(tsqlParserVIEWS-388))|(1<<(tsqlParserVIEW_METADATA-388))|(1<<(tsqlParserWORK-388))|(1<<(tsqlParserXML-388))|(1<<(tsqlParserXMLNAMESPACES-388))|(1<<(tsqlParserID-388)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IComparison_operatorContext is an interface to support dynamic dispatch.
type IComparison_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparison_operatorContext differentiates from other interfaces.
	IsComparison_operatorContext()
}

type Comparison_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparison_operatorContext() *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_comparison_operator
	return p
}

func (*Comparison_operatorContext) IsComparison_operatorContext() {}

func NewComparison_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_comparison_operator

	return p
}

func (s *Comparison_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Comparison_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparison_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitComparison_operator(s)
	}
}

func (p *tsqlParser) Comparison_operator() (localctx IComparison_operatorContext) {
	localctx = NewComparison_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, tsqlParserRULE_comparison_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3111)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 457, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3096)
			p.Match(tsqlParserEQUAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3097)
			p.Match(tsqlParserGREATER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3098)
			p.Match(tsqlParserLESS)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3099)
			p.Match(tsqlParserLESS)
		}
		{
			p.SetState(3100)
			p.Match(tsqlParserEQUAL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3101)
			p.Match(tsqlParserGREATER)
		}
		{
			p.SetState(3102)
			p.Match(tsqlParserEQUAL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3103)
			p.Match(tsqlParserLESS)
		}
		{
			p.SetState(3104)
			p.Match(tsqlParserGREATER)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3105)
			p.Match(tsqlParserEXCLAMATION)
		}
		{
			p.SetState(3106)
			p.Match(tsqlParserEQUAL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3107)
			p.Match(tsqlParserEXCLAMATION)
		}
		{
			p.SetState(3108)
			p.Match(tsqlParserGREATER)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3109)
			p.Match(tsqlParserEXCLAMATION)
		}
		{
			p.SetState(3110)
			p.Match(tsqlParserLESS)
		}

	}

	return localctx
}

// IAssignment_operatorContext is an interface to support dynamic dispatch.
type IAssignment_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_operatorContext differentiates from other interfaces.
	IsAssignment_operatorContext()
}

type Assignment_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_operatorContext() *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_assignment_operator
	return p
}

func (*Assignment_operatorContext) IsAssignment_operatorContext() {}

func NewAssignment_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_assignment_operator

	return p
}

func (s *Assignment_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Assignment_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterAssignment_operator(s)
	}
}

func (s *Assignment_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitAssignment_operator(s)
	}
}

func (p *tsqlParser) Assignment_operator() (localctx IAssignment_operatorContext) {
	localctx = NewAssignment_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, tsqlParserRULE_assignment_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3113)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-413)&-(0x1f+1)) == 0 && ((1<<uint((_la-413)))&((1<<(tsqlParserPLUS_ASSIGN-413))|(1<<(tsqlParserMINUS_ASSIGN-413))|(1<<(tsqlParserMULT_ASSIGN-413))|(1<<(tsqlParserDIV_ASSIGN-413))|(1<<(tsqlParserMOD_ASSIGN-413))|(1<<(tsqlParserAND_ASSIGN-413))|(1<<(tsqlParserXOR_ASSIGN-413))|(1<<(tsqlParserOR_ASSIGN-413)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IFile_sizeContext is an interface to support dynamic dispatch.
type IFile_sizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_sizeContext differentiates from other interfaces.
	IsFile_sizeContext()
}

type File_sizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_sizeContext() *File_sizeContext {
	var p = new(File_sizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = tsqlParserRULE_file_size
	return p
}

func (*File_sizeContext) IsFile_sizeContext() {}

func NewFile_sizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_sizeContext {
	var p = new(File_sizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = tsqlParserRULE_file_size

	return p
}

func (s *File_sizeContext) GetParser() antlr.Parser { return s.parser }

func (s *File_sizeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(tsqlParserDECIMAL, 0)
}

func (s *File_sizeContext) KB() antlr.TerminalNode {
	return s.GetToken(tsqlParserKB, 0)
}

func (s *File_sizeContext) MB() antlr.TerminalNode {
	return s.GetToken(tsqlParserMB, 0)
}

func (s *File_sizeContext) GB() antlr.TerminalNode {
	return s.GetToken(tsqlParserGB, 0)
}

func (s *File_sizeContext) TB() antlr.TerminalNode {
	return s.GetToken(tsqlParserTB, 0)
}

func (s *File_sizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_sizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_sizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.EnterFile_size(s)
	}
}

func (s *File_sizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(tsqlListener); ok {
		listenerT.ExitFile_size(s)
	}
}

func (p *tsqlParser) File_size() (localctx IFile_sizeContext) {
	localctx = NewFile_sizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, tsqlParserRULE_file_size)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3115)
		p.Match(tsqlParserDECIMAL)
	}
	p.SetState(3117)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-265)&-(0x1f+1)) == 0 && ((1<<uint((_la-265)))&((1<<(tsqlParserGB-265))|(1<<(tsqlParserKB-265))|(1<<(tsqlParserMB-265)))) != 0) || _la == tsqlParserTB || _la == tsqlParserMODULE {
		p.SetState(3116)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-265)&-(0x1f+1)) == 0 && ((1<<uint((_la-265)))&((1<<(tsqlParserGB-265))|(1<<(tsqlParserKB-265))|(1<<(tsqlParserMB-265)))) != 0) || _la == tsqlParserTB || _la == tsqlParserMODULE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

func (p *tsqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 85:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *tsqlParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
